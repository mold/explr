{"version":3,"sources":["aria-announcer.js","auditory-feedback.js","api/lastfm.js","search.js","api/api.js","utils.js","screenshot.js","keyboard-mode.js","no-countries.js","script.js","map.js"],"names":["announcer","LIVEREGION_TIMEOUT_DELAY","liveAnnouncer","debounce","func","wait","timeout","_len","arguments","length","args","Array","_key2","clearTimeout","setTimeout","apply","announce","message","assertiveness","undefined","LiveAnnouncer","clearAnnouncer","clear","destroyAnnouncer","destroy","_classCallCheck","this","node","document","createElement","dataset","Object","assign","style","border","clip","clipPath","height","margin","overflow","padding","position","width","whiteSpace","assertiveLog","createLog","appendChild","politeLog","body","prepend","ariaLive","setAttribute","removeChild","textContent","remove","innerHTML","auditoryFeedback","audioContext","oscillator","gainNode","audioFeedbackEnabled","keyboardNavigationOnly","isPlaying","toneTimeout","toneDuration","lastInteractionWasKeyboard","scheduleToneStop","gain","exponentialRampToValueAtTime","currentTime","stop","toggleAudioFeedback","window","updateFeedback","updateTone","density","frequency","Math","pow","e","createOscillator","createGain","type","value","connect","destination","start","keyboardMode","isActive","totalArtists","data","userName","maxDomain","countries","getCurrentlyVisibleCountries","console","warn","isArray","_typeof","reduce","sum","country","artistCount","script","getCurrentData","location","href","split","forEach","countryId","avgDensity","map","getColorDomain","colorDomain","min","addEventListener","init","initAudioContext","AudioContext","webkitAudioContext","log","removeEventListener","once","key","toLowerCase","repeat","error","isEnabled","setKeyboardOnly","setToneDuration","duration","api","lastfm","url","setKeyInfo","success","keyInfo","total","fails","keyI","keys","k","send","method","options","callback","retries","xhr","gotResponse","aborted","tryGet","tries","cb","avgErrors","avg","i","arr","bestKeys","_url","_key","filter","d3","json","el","replace","d","JSON","parse","response","errInfo","errorCode","try","_JSON$parse","bind","abort","typingTimeout","superCount","utils","getCountriesData","promise","Promise","res","rej","csv","err","id","names","tags","mainName","tag","name","all","then","_ref","_ref2","_slicedToArray","countryData","hardcodedCountries","splits","concat","_objectSpread","splice","flat","alias","nest","cname","getCountry","artist","hardcodedTagName","responseData2","demonymTag","countryTag","bestTag","toptags","theTroubles","count","some","t","tname","includes","info","getCountries","artists","checkCount","setLoadingStatus","SESSION","total_artists","select","html","localforage","setItem","STORED_ARTISTS","returnList","returnObject","push","Date","getTime","getTags","getArtistInfo","artistInfo","data1","tagnamelist","image","description","bio","summary","recommendationRequests","cancelRecommendationRequests","getRecommendations","recommendations","USER_TAGS","slice","userTagObj","rollup","xhr1","tagCounts","topartists","a","num","xhr2","data2","hasTags","sort","b","getFriends","screenshot","exportToCSV","countryCountObj","list","countryNames","countryCount","countryName","json2csv","_ref3","_ref4","localeCompare","fields","label","row","acc","playcount","replaceAll","open","encodeURI","getCountryNameFromId","match","find","getNumberOfArtistsForCountry","_ref5","_toConsumableArray","values","item","hasOwnProperty","search","render","drawCenteredText","obj","ctx","font","fillText","string","w","measureText","y","lineWidth","strokeStyle","strokeText","autoDownload","explrLogo","Image","svg","attr","h","canvas","getContext","backgroundColor","getComputedStyle","textColor","color","insert","fill","selectAll","font-family","font-size","stroke","canvg","XMLSerializer","serializeToString","onload","save","globalAlpha","fillStyle","scoreString","countryScore","titleString","overlay","fillRect","restore","drawImage","getElementById","src","toDataURL","getElementsByClassName","ariaModal","download","close","dataurl","click","SEARCH_IS_OPEN","searchButton","filteredCountries","filteredArtists","filteredCountryArtists","noCountryArtists","filteredShortcuts","getAnnouncement","artistText","announcementParts","input","querySelector","totalArtistLength","shortcutText","countryText","join","initSearch","FOCUSED_RESULT","countriesList","shortcuts","ariaExpanded","onClick","clearExplrCache","reload","nextTheme","toggleFilter","_ref6","searchContainer","searchInputWrapper","classList","add","resultsDiv","placeholder","role","focus","shortcutsWrapper","shortcutsHeading","countriesWrapper","artistsWrapper","shortcutsWithoutStatus","shortcut","ariaLabelledby","c","searchResultWrapper","shortcutSpan","highlightedName","regex","RegExp","getLoadingStatus","countriesHeading","countrySpan","countryArtistsSpan","stopSearch","dispatchEvent","Event","artistsHeading","artistWrapper","artistCountryWrapper","srOnlyFrom","artistPlaycount","artistCountryNameSpan","addTagsSpan","searchArtist","artistNameSpan","evt","currentActiveDescendant","currentActiveElement","inputElement","keyCode","removeAttribute","scrollTop","preventDefault","nextResult","nextElementSibling","nextGroup","parentElement","scrollIntoView","behavior","block","previousResult","previousElementSibling","contains","previousGroup","resultsInGroup","querySelectorAll","lastGroup","allGroups","getAttribute","firstVisibleOption","target","closest","searchButtonClose","preventScroll","getSearchStatus","setSearchStatus","status","MIN_ZOOM_LEVEL_FOR_KEYBOARD_MODE","MAX_COUNTRY_SUGGESTIONS","KEYBOARD_MODE_ACTIVE","ALPHABET","visibleCountries","keyBuffer","keyBufferTimer","keyboardModeActive","isKeyboardModeEnabled","currentFocus","EXCLUDED_COUNTRY_IDS","countryLetterMap","handleLetterKeyPress","targetCountryId","tagName","ctrlKey","altKey","shiftKey","metaKey","toUpperCase","targetCountry","ga","hitType","eventCategory","eventAction","eventLabel","formattedCountries","parseInt","letter","number","isInViewport","element","COUNTRY_BBOX_OVERRIDES","overrides","bbox","isBBoxInViewport","rect","getBoundingClientRect","rectangleLeft","innerWidth","rectangleTop","innerHeight","top","bottom","left","right","_bbox","west","south","east","north","screenCorners","coord","projected","projection","x","minX","p","maxX","max","minY","maxY","scale","call","zoom","translate","transformedMinX","transformedMaxX","transformedMinY","transformedMaxY","displayKeyboardModeMessage","innerMessage","addViewportBoxIndicator","hideKeyboardModeMessage","removeViewportBoxIndicator","indicator","rectangleWidth","rectangleHeight","pointerEvents","zIndex","boxSizing","transform","borderRadius","fontSize","updateViewportBoxPosition","getPathCenter","path","parseFloat","hasAnnounced","getVisibleCountries","countriesSelection","each","getVisibleCountriesSummary","updateVisibleCountries","cleanup","assignLettersToCountries","center","append","text","getAnnouncementText","baseText","audioFeedbackState","move","MAX_ZOOM","zoomBehavior","param","s","centered","dismissCenteredCountry","newScale","getStatus","noCountries","listOfArtistsWithNoCountry","saveToStorage","object","sortArtists","announcementIntervalId","CACHED_NO_COUNTRIES","addArtistsWithNoCountry","handleCheckboxChange","_document$querySelect","artistName","checked","artistsState","localStorage","getItem","stringify","parentNode","display","nextCheckbox","updateNoCountriesList","sortedData","noCountryArtistSortMethod","noCountriesListEl","_art","artistState","listItem","property","on","_document$querySelect2","radios","getElementsByName","sortFunction","selectedValue","_step","_iterator","_createForOfIteratorHelper","n","done","radio","f","_step2","_iterator2","showModal","dialog","event","loadingReady","loadingStatus","STORED_ARTISTS_PROMISE","val","CACHED_NO_COUNTRIES_PROMISE","CACHED_USERS","cached_users","theme","legend","getAllArtists","user","currPage","responseData","confirm","maxPage","totalPages","artistNames","newArtist","newArtistCountries","leaves","artistsFromCountry","addArtists","end","getUserTags","alert","origin","pathname","tagCount","topArtists","forbidden","taglist","lim","nogood","user_tags","random","randomcountrylist","clearInterval","existingAriaLabelledBy","loader","transition","delay","substr","welcomeOverlay","_document$getElementB","innerText","_d3$select","visibility","friends","friendName","updateName","classed","_defineProperty","floor","colorArray","currentPage","itemsPerPage","currentZoom","prefersReducedMotion","matchMedia","matches","840","643","152","218","724","620","250","528","554","242","296","throttleTimer","redraw","topo","g","countryPlaylists","scaleExtent","countryDivIsOpen","mydomain","maxartists","maxplaycount","defaultTheme","updateDimensions","offsetWidth","getCountryPlaycount","numbersWithSpace","toString","updateScale","E","threshold","domain","range","updateLegend","len","ceil","legend_labels","text1","enter","getComputedTextLength","_","drawPlays","closeButton","offsetL","offsetT","tooltip","infoContainer","cnameDiv","themes","blue_black","green_black","pink_black","pink_white","green_white","red_white","toTheme","themeList","bodyClass","indexOf","setup","geo","naturalEarth","PI","class","draw","redrawMap","background-color","border-color","properties","getCountryCenter","offsetLeft","offsetTop","mouse","clicked","removeArtistDiv","tr","sc","animate","withKeyboard","highlightCountry","triggerAuditoryFeedback","invert","showArtists","pageNumber","pageItems","artistDiv","data-artist","lowlight","highlight","makeSummaryDiv","showNextFive","showPreviousFive","makeArtistDiv","nameTags","tagTags","pl","linkdiv","lastFmLink","recLoadingDiv","uri","playlistName","recLoadingMessage","alt","namelist","array","j","temp","shuffleArray","art","artistimg","artistname","recoArtistDiv","artisttaglist","usertaglist","summaryText","paragraphs","z","elem","pos","offsetHeight","tagdiv","paragraph","countryElement","bounds","modscaleX","modscaleY","pt","countryTopoData","mainBBox","_bbox2","world","topojson","feature","objects","features","newArtistsByCountry","countryDict","userPrefersReducedMotion","entries","_ref7","_ref8","index","findIndex"],"mappings":"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","file":"../all.min.js","sourcesContent":["var announcer = {};\n\n/* Inspired by https://github.com/AlmeroSteyn/react-aria-live */\nconst LIVEREGION_TIMEOUT_DELAY = 7000;\n\nlet liveAnnouncer = null;\n\nfunction debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            clearTimeout(timeout);\n            func(...args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n};\n\n/**\n * Announces the message using screen reader technology.\n */\nfunction announce(message, assertiveness = 'assertive', timeout = LIVEREGION_TIMEOUT_DELAY) {\n  if (!liveAnnouncer) {\n    liveAnnouncer = new LiveAnnouncer();\n  }\n\n  liveAnnouncer.announce(message, assertiveness, timeout);\n}\n\n/**\n * Stops all queued announcements.\n */\nfunction clearAnnouncer(assertiveness) {\n  if (liveAnnouncer) {\n    liveAnnouncer.clear(assertiveness);\n  }\n}\n\n/**\n * Removes the announcer from the DOM.\n */\nfunction destroyAnnouncer() {\n  if (liveAnnouncer) {\n    liveAnnouncer.destroy();\n    liveAnnouncer = null;\n  }\n}\n\nclass LiveAnnouncer {\n  constructor() {\n    this.node = document.createElement('div');\n    this.node.dataset.liveAnnouncer = 'true';\n    // copied from VisuallyHidden\n    Object.assign(this.node.style, {\n      border: 0,\n      clip: 'rect(0 0 0 0)',\n      clipPath: 'inset(50%)',\n      height: '1px',\n      margin: '-1px',\n      overflow: 'hidden',\n      padding: 0,\n      position: 'absolute',\n      width: '1px',\n      whiteSpace: 'nowrap'\n    });\n\n    this.assertiveLog = this.createLog('assertive');\n    this.node.appendChild(this.assertiveLog);\n\n    this.politeLog = this.createLog('polite');\n    this.node.appendChild(this.politeLog);\n\n    document.body.prepend(this.node);\n  }\n\n  createLog(ariaLive) {\n    let node = document.createElement('div');\n    node.setAttribute('role', 'log');\n    node.setAttribute('aria-live', ariaLive);\n    node.setAttribute('aria-relevant', 'additions');\n    return node;\n  }\n\n  destroy() {\n    if (!this.node) {\n      return;\n    }\n\n    document.body.removeChild(this.node);\n    this.node = null;\n  }\n\n  announce(message, assertiveness = 'assertive', timeout = LIVEREGION_TIMEOUT_DELAY) {\n    if (!this.node) {\n      return;\n    }\n\n    let node = document.createElement('div');\n    node.textContent = message;\n\n    if (assertiveness === 'assertive') {\n      this.assertiveLog.appendChild(node);\n    } else {\n      this.politeLog.appendChild(node);\n    }\n\n    if (message !== '') {\n      setTimeout(() => {\n        node.remove();\n      }, timeout);\n    }\n  }\n\n  clear(assertiveness) {\n    if (!this.node) {\n      return;\n    }\n\n    if (!assertiveness || assertiveness === 'assertive') {\n      this.assertiveLog.innerHTML = '';\n    }\n\n    if (!assertiveness || assertiveness === 'polite') {\n      this.politeLog.innerHTML = '';\n    }\n  }\n}\n\nannouncer.announce = announce;\nannouncer.clearAnnouncer = clearAnnouncer;\nannouncer.destroyAnnouncer = destroyAnnouncer;\nannouncer.debounce = debounce;","/* \n * Audio Feedback Module\n * Provides audio visualization of artist density on the music map\n * for improved accessibility for blind users\n */\n\nconst auditoryFeedback = (function() {\n  // Private variables\n  let audioContext = null;\n  let oscillator = null;\n  let gainNode = null;\n  let audioFeedbackEnabled = false;\n  let keyboardNavigationOnly = true; // Only trigger on keyboard navigation\n  let continuousTone = true; // Whether to use a continuous tone that modulates\n  let isPlaying = false; // Track if the tone is currently playing\n  let toneTimeout = null; // Timeout for stopping the tone\n  let toneDuration = 750; // Duration in ms that the tone plays\n  let lastInteractionWasKeyboard = false; // Track if the last interaction was keyboard\n  \n  // Initialize Web Audio API\n  function init() {\n    try {\n      // Create audio context with user interaction to avoid autoplay restrictions\n      document.addEventListener('click', function initAudioContext() {\n        if (!audioContext) {\n          audioContext = new (window.AudioContext || window.webkitAudioContext)();\n          console.log(\"Audio context initialized on user interaction\");\n        }\n        lastInteractionWasKeyboard = false; // Mouse click, not keyboard\n        document.removeEventListener('click', initAudioContext);\n      }, { once: true });\n      \n      // Add keyboard shortcut for toggling audio feedback\n      document.addEventListener('keydown', function(e) {\n        // Toggle audio feedback with 'A' key\n        if (e.key.toLowerCase() === 'a' && !e.repeat) {\n          toggleAudioFeedback();\n        }\n        \n        // Set flag for keyboard interaction\n        if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || \n            e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n          lastInteractionWasKeyboard = true;\n          \n          // Play feedback on arrow key navigation\n          if (keyboardNavigationOnly && audioFeedbackEnabled) {\n            // Small delay to allow the map to update first\n            setTimeout(updateFeedback, 100);\n          }\n        }\n      });\n      \n      // Track mouse interactions\n      document.addEventListener('mousemove', function() {\n        lastInteractionWasKeyboard = false;\n      });\n      \n      document.addEventListener('mousedown', function() {\n        lastInteractionWasKeyboard = false;\n      });\n      \n      document.addEventListener('wheel', function() {\n        lastInteractionWasKeyboard = false;\n      });\n      \n      console.log(\"Auditory feedback module initialized\");\n      \n      // Try to initialize audio context immediately if possible\n      try {\n        audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      } catch (e) {\n        console.log(\"Audio context will be initialized on first user interaction\");\n      }\n    } catch (e) {\n      console.error(\"Web Audio API is not supported in this browser\", e);\n    }\n  }\n  \n  // Set up the tone audio nodes\n  function setupTone() {\n    if (!audioContext) return;\n    \n    // Clean up any existing oscillator\n    if (oscillator) {\n      try {\n        oscillator.stop();\n      } catch (e) {\n        // Ignore errors if oscillator was already stopped\n      }\n      oscillator = null;\n    }\n    \n    // Create oscillator and gain nodes\n    oscillator = audioContext.createOscillator();\n    gainNode = audioContext.createGain();\n    \n    // Configure oscillator\n    oscillator.type = 'sine'; // Sine wave is less harsh\n    oscillator.frequency.value = 0; // Start at 0 Hz (silent)\n    \n    // Configure gain (volume)\n    gainNode.gain.value = 0; // Start silent\n    \n    // Connect nodes\n    oscillator.connect(gainNode);\n    gainNode.connect(audioContext.destination);\n    \n    // Start the oscillator\n    oscillator.start();\n    isPlaying = true;\n    \n    // Schedule the tone to stop after the duration\n    scheduleToneStop();\n  }\n  \n  // Schedule the tone to stop after the duration\n  function scheduleToneStop() {\n    // Clear any existing timeout\n    if (toneTimeout) {\n      clearTimeout(toneTimeout);\n    }\n    \n    // Set a new timeout to fade out and stop the tone\n    toneTimeout = setTimeout(() => {\n      if (gainNode) {\n        // Fade out\n        gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.5);\n        \n        // Stop oscillator after fade out\n        setTimeout(() => {\n          if (oscillator) {\n            oscillator.stop();\n            oscillator = null;\n            isPlaying = false;\n          }\n        }, 600);\n      }\n    }, toneDuration);\n  }\n  \n  // Toggle audio feedback on/off\n  function toggleAudioFeedback() {\n    audioFeedbackEnabled = !audioFeedbackEnabled;\n    \n    // Announce status change to screen readers\n    if (window.announcer) {\n      window.announcer.announce(\n        audioFeedbackEnabled ? \n        \"Audio feedback enabled. Use arrow keys to navigate and hear artist density for the currently visible countries.\" : \n        \"Audio feedback disabled.\"\n      );\n    }\n    \n    if (audioFeedbackEnabled) {\n      // Play initial tone based on current view\n      lastInteractionWasKeyboard = true; // Force keyboard mode for initial tone\n      updateFeedback();\n    } else if (gainNode) {\n      // Fade out the tone\n      gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.5);\n      \n      // Clear any scheduled stop\n      if (toneTimeout) {\n        clearTimeout(toneTimeout);\n        toneTimeout = null;\n      }\n    }\n  }\n  \n  // Update the tone based on artist density\n  function updateTone(density) {\n    if (!audioContext || !audioFeedbackEnabled) return;\n    \n    // Skip if keyboard only and last interaction was not keyboard\n    if (keyboardNavigationOnly && !lastInteractionWasKeyboard) return;\n    \n    // Map density to frequency (pitch)\n    // Low density: 220Hz (low A), High density: 880Hz (high A)\n    const minFreq = 220;\n    const maxFreq = 880;\n    \n    // Apply a slight curve to give better distinction at lower values\n    // while preserving the overall scale\n    // This power value (0.8) is closer to linear (1.0) but still provides\n    // some enhancement for lower values\n    const curvedDensity = Math.pow(density, 0.8);\n    \n    const frequency = minFreq + (curvedDensity * (maxFreq - minFreq));\n    \n    // Create or restart the tone if it's not playing\n    if (!isPlaying) {\n      setupTone();\n    } else {\n      // Extend the duration by rescheduling the stop\n      scheduleToneStop();\n    }\n    \n    // Smoothly change frequency\n    oscillator.frequency.exponentialRampToValueAtTime(\n      frequency, \n      audioContext.currentTime + 0.2\n    );\n    \n    // Fade in if needed\n    if (gainNode.gain.value < 0.1) {\n      gainNode.gain.exponentialRampToValueAtTime(0.1, audioContext.currentTime + 0.1);\n    }\n  }\n  \n  // Update auditory feedback based on current map view\n  function updateFeedback() {\n    // Check if feedback is enabled\n    if (!audioFeedbackEnabled) return;\n    \n    // Skip if keyboard only and last interaction was not keyboard\n    if (keyboardNavigationOnly && !lastInteractionWasKeyboard) return;\n    \n    // Check if keyboard mode is active (only when zoomed in far enough)\n    if (window.keyboardMode && typeof window.keyboardMode.isActive === 'function') {\n      if (!window.keyboardMode.isActive()) {\n        // Keyboard mode is not active, so don't play audio feedback\n        if (isPlaying && oscillator) {\n          // Fade out any currently playing tone\n          if (gainNode) {\n            gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.5);\n          }\n          return;\n        }\n        return;\n      }\n    }\n    \n    // Get the current data from the keyboard mode\n    const countries = getCurrentlyVisibleCountries();\n    if (!countries || countries.length === 0) return;\n    \n    let totalArtists = 0;\n    \n    // Handle different data formats\n    if (Array.isArray(countries) && typeof countries[0] === 'object' && 'artistCount' in countries[0]) {\n      // Format: [{name: \"Country\", artistCount: 5}, ...]\n      totalArtists = countries.reduce((sum, country) => sum + country.artistCount, 0);\n    } else if (Array.isArray(countries) && typeof countries[0] === 'object' && 'number' in countries[0]) {\n      // Format: [{name: \"Country\", number: \"A\", artistCount: 5}, ...]\n      totalArtists = countries.reduce((sum, country) => sum + country.artistCount, 0);\n    } else {\n      // Try to get artist counts from the script data\n      const data = window.script && window.script.getCurrentData ? window.script.getCurrentData() : {};\n      const userName = window.location.href.split(\"username=\")[1];\n      \n      countries.forEach(countryId => {\n        if (data[countryId] && data[countryId][userName]) {\n          totalArtists += data[countryId][userName].length;\n        }\n      });\n    }\n    \n    // If there are no artists in any of the visible countries, remain silent\n    if (totalArtists === 0) {\n      // Fade out any currently playing tone\n      if (isPlaying && oscillator && gainNode) {\n        gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.5);\n        \n        // Clear any scheduled stop\n        if (toneTimeout) {\n          clearTimeout(toneTimeout);\n          toneTimeout = null;\n        }\n        \n        // Stop oscillator after fade out\n        setTimeout(() => {\n          if (oscillator) {\n            oscillator.stop();\n            oscillator = null;\n            isPlaying = false;\n          }\n        }, 600);\n      }\n      return;\n    }\n    \n    const avgDensity = countries.length > 0 ? totalArtists / countries.length : 0;\n    \n    // Get the color domain from the map\n    let normalizedDensity = 0;\n    \n    if (window.map && window.map.getColorDomain) {\n      const colorDomain = window.map.getColorDomain();\n      if (colorDomain && colorDomain.length > 0) {\n        // Find where our density falls in the color domain\n        const maxDomain = colorDomain[colorDomain.length - 1];\n        normalizedDensity = Math.min(avgDensity / maxDomain, 1);\n      } else {\n        // Fallback to old method if color domain isn't available\n        const maxPossibleAvg = 100;\n        normalizedDensity = Math.min(avgDensity / maxPossibleAvg, 1);\n      }\n    } else {\n      // Fallback to old method if map or getColorDomain isn't available\n      const maxPossibleAvg = 100;\n      normalizedDensity = Math.min(avgDensity / maxPossibleAvg, 1);\n    }\n    \n    // Update the tone\n    updateTone(normalizedDensity);\n  }\n  \n  // Use the existing function from keyboard-mode.js to get visible countries\n  function getCurrentlyVisibleCountries() {\n    // Try to access it through the keyboardMode object\n    if (window.keyboardMode && typeof window.keyboardMode.getCurrentlyVisibleCountries === 'function') {\n      return window.keyboardMode.getCurrentlyVisibleCountries();\n    }\n    \n    // If we can't find the function, return an empty array\n    console.warn('Could not find getCurrentlyVisibleCountries function');\n    return [];\n  }\n  \n  // Clean up resources when the page is unloaded\n  window.addEventListener('beforeunload', function() {\n    if (oscillator) {\n      oscillator.stop();\n      oscillator = null;\n    }\n    \n    if (toneTimeout) {\n      clearTimeout(toneTimeout);\n      toneTimeout = null;\n    }\n  });\n  \n  // Public API\n  return {\n    init: init,\n    updateFeedback: updateFeedback,\n    toggleAudioFeedback: toggleAudioFeedback,\n    isEnabled: function() { return audioFeedbackEnabled; },\n    setKeyboardOnly: function(value) { \n      keyboardNavigationOnly = value; \n    },\n    setToneDuration: function(duration) { \n      toneDuration = duration; \n    }\n  };\n})();\n\n// Initialize when the DOM is ready\ndocument.addEventListener('DOMContentLoaded', function() {\n  auditoryFeedback.init();\n}); ","var api = api || {};\n\napi.lastfm = {};\napi.lastfm.key = \"865b1653dbe200905a5b75d9d839467a\";\napi.lastfm.url = \"https://ws.audioscrobbler.com/2.0/\";\n\n(function (api) {\n\tlet keyI = 0;\n\tlet keys = [\n\t\t// https://gitlab.gnome.org/World/lollypop/blob/master/lollypop/lastfm.py\n\t\t\"7a9619a850ccf7377c46cf233c51e3c6\",\n\t\t\n\t\t// https://github.com/ampache/ampache/issues/1694\n\t\t\"13893ba930c63b1b2cbe21441dc7f550\",\n\n\t\t// https://www.reddit.com/r/lastfm/comments/3okkij/cant_create_lastfm_api_key/\n\t\t\"4cb074e4b8ec4ee9ad3eb37d6f7eb240\",\n\n\t\t// https://www.w3resource.com/API/last.fm/tutorial.php\n\t\t\"4a9f5581a9cdf20a699f540ac52a95c9\",\n\n\t\t// https://www.reddit.com/r/lastfm/comments/3l3cae/cant_get_a_lastfm_api_key/\n\t\t\"57ee3318536b23ee81d6b27e36997cde\",\n\n\t\t// original explr api key\n\t\t\"865b1653dbe200905a5b75d9d839467a\",\n\n\t\t// https://www.w3resource.com/API/last.fm/example.html\n\t\t\"68b2125fd8f8fbadeb2195e551f32bc4\",\n\n\t\t// https://rstudio-pubs-static.s3.amazonaws.com/236264_81312ba4d795474c8641dd0e2af83cba.html\n\t\t\"1ba315d4d1673bbf88aed473f1917306\"\n\t];\n\tlet keyInfo = window.keyInfo = {};\n\tkeys.forEach(k => keyInfo[k] = { success: 0, fails: 0, total: 0 });\n\n\tlet rotateKey = function () {\n\t\tlet avgErrors = keys.reduce((avg, k, i, arr) => avg + keyInfo[k].fails / arr.length, 0);\n\t\tlet bestKeys = keys.filter(k => keyInfo[k].fails <= avgErrors);\n\t\tbestKeys = bestKeys.length ? bestKeys : keys;\n\t\tlet key = bestKeys[++keyI % bestKeys.length];\n\n\t\t// console.log({ key, avgErrors, bestKeys });\n\n\t\treturn key;\n\t}\n\n\tlet setKeyInfo = function (key, success) {\n\t\tkeyInfo[key].total++;\n\t\tkeyInfo[key].success += success ? 1 : 0;\n\t\tkeyInfo[key].fails += success ? 0 : 1;\n\t}\n\n\t/**\n\t* Send an API call to last.fm\n\t* @param {String} method    The method name (e.g. \"library.getartists\")\n\t* @param {Array} options    An array of tuples (arrays with two elements)\n\t                            with options for the request: [\"key\", \"value\"]\n\t* @param {Function} callback    The callback function to call with the data\n\t                                returned from the request. Takes two arguments,\n\t                                error and data (callback(error, data))\n\t*/\n\tapi.lastfm.send = function (method, options, callback, retries) {\n\t\tlet getUrl = (apiKey) => {\n\t\t\tlet _url = api.lastfm.url + \"?\" + \"method=\" + method + \"&api_key=\" +\n\t\t\t\tapiKey + \"&format=json\";\n\n\t\t\toptions.forEach(function (el) {\n\t\t\t\t_url += \"&\" + el[0] + \"=\" +\n\t\t\t\t\t(el[1] + \"\")\n\t\t\t\t\t.replace(\"&\", \"%26\")\n\t\t\t\t\t.replace(\"/\", \"%2F\")\n\t\t\t\t\t.replace(\"+\", \"%2B\")\n\t\t\t\t\t.replace(\"\\\\\", \"%5C\");\n\t\t\t});\n\n\t\t\treturn _url;\n\t\t};\n\n\t\tretries = undefined === retries ? 10 : retries\n\t\tlet xhr, gotResponse, aborted = false;\n\n\t\tfunction tryGet(tries, cb) {\n\t\t\tlet _key = rotateKey();\n\t\t\txhr = d3.json(getUrl(_key), function (e, d) {\n\t\t\t\tif (aborted) {\n\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (e) { // we got an actual server error: 4xx, 5xx\n\t\t\t\t\td = JSON.parse(e.response);\n\t\t\t\t\t// now e and d are the same\n\t\t\t\t} else if (d.error) {\n\t\t\t\t\t// we got 200 BUT it's an error\n\t\t\t\t\te = d;\n\t\t\t\t}\n\n\t\t\t\tif (e) {\n\t\t\t\t\tsetKeyInfo(_key, false);\n\n\t\t\t\t\tlet errInfo = {\n\t\t\t\t\t\tmethod: method,\n\t\t\t\t\t\terrorCode: e && e.error,\n\t\t\t\t\t\ttry: tries,\n\t\t\t\t\t\toptions: options,\n\t\t\t\t\t\tkey: _key,\n\t\t\t\t\t\tmessage: e.message || JSON.parse(e.response)?.message,\n\t\t\t\t\t};\n\t\t\t\t\t// alert(\"ERROR\");\n\t\t\t\t\tif (tries < retries) {\n\t\t\t\t\t\tconsole.warn(\"Retry request: \", errInfo);\n\t\t\t\t\t\tsetTimeout(tryGet.bind(null, tries + 1, cb), tries * 3000);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tries >= retries) {\n\t\t\t\t\t\tconsole.warn(\"Retry failed after \" + retries + \" attempts, will stop trying.\", errInfo);\n\t\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\t\taborted = true;\n\t\t\t\t\t\te = \"ERROR\";\n\t\t\t\t\t\td = {\n\t\t\t\t\t\t\terror: \"Took to long to respond\"\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tsetKeyInfo(_key, true);\n\t\t\t\t}\n\n\t\t\t\tgotResponse = true;\n\t\t\t\tcb(e, d);\n\t\t\t});\n\t\t}\n\n\t\ttryGet(0, callback);\n\n\t\t// Abort if the request takes too long - it sometimes ballar ur and fails after a minute :(\n\t\tlet timeout = setTimeout(function () {\n\t\t\tif (!gotResponse) {\n\t\t\t\t//console.log(\"GET \" + url + \" took to long, aborting\");\n\t\t\t\txhr.abort();\n\t\t\t\tcallback(\"ERROR\", {\n\t\t\t\t\terror: \"Took to long to respond\"\n\t\t\t\t});\n\t\t\t}\n\t\t}, 20000);\n\n\t\treturn {\n\t\t\tabort: function () {\n\t\t\t\taborted = true;\n\t\t\t\txhr.abort();\n\t\t\t}\n\t\t};\n\t}\n\n})(api);","/* requires:\napi/api.js\nutils.js\nscreenshot.js\naria-announcer.js\n*/\n\nconst search = search || {};\n\nlet typingTimeout;\n\nlet SEARCH_IS_OPEN = false;\n\nlet searchButton = null;\n\nlet filteredCountries = [];\nlet filteredArtists = [];\nlet filteredCountryArtists = [];\nlet noCountryArtists = [];\nlet filteredShortcuts = [];\n\n(function () {\n\n    // Function to generate screen reader feedback text for current search results\n    search.getAnnouncement = function () {\n        let announcementParts = [];\n\n        const input = document.querySelector('input.search');\n        \n        const totalArtistLength = filteredArtists.slice(0, 100).length + filteredCountryArtists.slice(0, 100).length + noCountryArtists.slice(0, 100).length;\n    \n        if (filteredShortcuts.length > 0 && input.value.length > 3) {\n            let shortcutText = filteredShortcuts.length === 1 ? 'shortcut' : 'shortcuts';\n            announcementParts.push(`${filteredShortcuts.length} ${shortcutText}`);\n        }\n    \n        if (filteredCountries.slice(0, 5).length > 0 && input.value.length > 1) {\n            let countryText = filteredCountries.length === 1 ? 'country' : 'countries';\n            announcementParts.push(`${filteredCountries.length} ${countryText}`);\n        }\n    \n        if (totalArtistLength && input.value.length > 1) {\n            let artistText = totalArtistLength === 1 ? 'artist' : 'artists';\n            announcementParts.push(`${totalArtistLength} ${artistText}`);\n        }\n        \n    \n        let announcement = '';\n        if (announcementParts.length > 0) {\n            announcement = 'Showing ' + announcementParts.slice(0, -1).join(', ') + (announcementParts.length > 1 ? ' and ' : '') + announcementParts.slice(-1) + ', press down arrow to go to results';\n        } else {\n            announcement = 'No results found';\n        }\n        return announcement;\n      }\n\n    search.initSearch = function () {  \n\n    SEARCH_IS_OPEN = true;\n\n    let FOCUSED_RESULT = null;\n\n    let countriesList = null;\n\n    const searchButton = document.querySelector('#search-button');\n    if (searchButton) searchButton.ariaExpanded = true;\n\n    api.getCountriesData().then(countries => {\n        // countries is the array of country data\n        // You can process the countries data here\n        countriesList = countries;\n      }).catch(error => {\n        // Handle any errors here\n        console.error(error);\n      });\n\n    // List of shortcuts that you can match against\n    const shortcuts = [\n        { name: \"Status\", onClick: () => { } },\n        { name: \"Clear cached users\", onClick: () => { clearExplrCache().then(()=>window.location.reload()) } },\n        { name: \"Change user\", onClick: () => { window.location = \"./\" } },\n        { name: \"Change theme\", onClick: () => {map.nextTheme()} },\n        { name: \"Download screenshot of map\", onClick: () => {screenshot.render(true)} },\n        { name: \"Export data\", onClick: () => {utils.exportToCSV(script.getCurrentData())} },\n        { name: \"Map: Toggle between artists or scrobbles\", onClick: () => { map.toggleFilter() } },\n        { name: \"Support Explr on BuyMeACoffee\", onClick: () => { window.open('https://www.buymeacoffee.com/explrfm', '_blank'); } },\n        { name: \"View Explr on GitHub\", onClick: () => { window.open('https://github.com/mold/explr', '_blank'); } },\n    ];\n    \n    // Get the current data\n    let data = script.getCurrentData();\n\n    // Flatten and prepare the data\n    let artists = [].concat(...Object.values(data));\n    artists = artists.reduce((acc, item) => {\n        for (let key in item) {\n            if (item.hasOwnProperty(key)) {\n                acc = acc.concat(item[key]);\n            }\n        }\n        return acc;\n    }, [])\n\n    // Sort the artists by playcount\n    artists = artists.sort((a, b) => b.playcount - a.playcount);\n\n    // Create a div to hold the search field\n    let searchContainer = document.getElementById('search-container');\n    searchContainer.classList.add(\"search-container\")\n    const searchInputWrapper = document.createElement('div');\n    searchInputWrapper.classList.add(\"search-input-wrapper\")\n    let input = document.createElement('input');\n    input.type = 'text';\n    input.classList.add(\"search\")\n    input.placeholder = 'Search for an artist or a country';\n    input.setAttribute('aria-label', 'Search for an artist or a country');\n    input.setAttribute('aria-autocomplete', 'list');\n    input.setAttribute('aria-controls', 'search-results');\n    input.setAttribute('aria-expanded', 'false');\n    input.role = 'combobox';\n    searchInputWrapper.appendChild(input);\n    searchContainer.appendChild(searchInputWrapper);\n    setTimeout(() => {\n        input.focus();\n    }, 50);\n\n    // Create a div to display the results\n    let resultsDiv = document.createElement('div');\n    resultsDiv.classList.add(\"search-results\")\n    resultsDiv.id = 'search-results';\n    resultsDiv.setAttribute('role', 'listbox');\n    resultsDiv.setAttribute('aria-label', 'Search results');\n    searchContainer.appendChild(resultsDiv);\n    \n    // Add an event listener to the input field\n    input.addEventListener('input', function() {\n        // Clear the previous results\n        resultsDiv.innerHTML = '';\n\n        input.setAttribute('aria-expanded', 'true');\n\n        const shortcutsWithoutStatus = shortcuts.filter(shortcut => shortcut.name !== \"Status\");\n\n        // Filter the shortcuts based on the user's input\n            filteredShortcuts = shortcutsWithoutStatus.filter(shortcut => \n                input.value.toLowerCase() === \"shortcuts\" || \n                shortcut.name.toLowerCase().includes(input.value.toLowerCase())\n            );\n            if (filteredShortcuts.length > 0 && input.value.length > 3) {\n            const shortcutsWrapper = document.createElement('ul');\n            let shortcutsHeading = document.createElement('li');\n            shortcutsHeading.textContent = 'Explr.fm shortcuts';\n            shortcutsHeading.id = 'shortcuts-heading';\n            shortcutsHeading.role = \"presentation\"\n            shortcutsHeading.classList.add('search-result-heading');\n            shortcutsWrapper.appendChild(shortcutsHeading);\n            shortcutsWrapper.setAttribute('role', 'group');\n            shortcutsWrapper.classList.add('search-result-group');\n            shortcutsWrapper.ariaLabelledby = 'shortcuts-heading';\n            resultsDiv.appendChild(shortcutsWrapper);\n        \n            filteredShortcuts.forEach(c => {\n                if (input.value.length > 3) {\n                    if (c.name === \"Status\") {\n                        shortcutsHeading.textContent = 'Explr.fm status';\n                    }\n                    let searchResultWrapper = document.createElement('div');\n                    searchResultWrapper.classList.add('result-wrapper');\n                    searchResultWrapper.role = 'option';\n                    searchResultWrapper.id = `shortcut-${c.name.replace(/\\s+/g, '-').toLowerCase()}`;\n                    searchResultWrapper.addEventListener('click', function() {\n                        c.onClick();\n                    });\n                    const shortcutSpan = document.createElement('span');\n                    shortcutSpan.classList.add('shortcut-name');\n        \n                    // Highlight the matching letters\n                    let regex = new RegExp(input.value, 'gi');\n                    const shortcutName = c.name === \"Status\" ? script.getLoadingStatus() : c.name\n                    let highlightedName = shortcutName.replace(regex, match => `<span class=\"highlight\">${match}</span>`);\n                    shortcutSpan.innerHTML = highlightedName;\n        \n                    searchResultWrapper.appendChild(shortcutSpan);\n                    shortcutsWrapper.appendChild(searchResultWrapper);\n                }\n            });\n        }\n\n        // Filter the countries based on the user's input\n        filteredCountries = countriesList.filter(country => \n            country.names.some(name => name.toLowerCase().includes(input.value.toLowerCase()))\n        );\n\n        // Display the filtered countries\n        if (filteredCountries.length > 0 && input.value.length > 1) {\n            const countriesWrapper = document.createElement('ul');\n            let countriesHeading = document.createElement('li');\n            countriesHeading.textContent = 'Countries';\n            countriesHeading.classList.add('search-result-heading');\n            countriesHeading.id = 'countries-heading';\n            countriesHeading.role = \"presentation\"\n            countriesWrapper.appendChild(countriesHeading);\n            countriesWrapper.setAttribute('role', 'group');\n            countriesWrapper.classList.add('search-result-group');\n            countriesWrapper.setAttribute(\"aria-labelledby\", \"countries-heading\");\n            resultsDiv.appendChild(countriesWrapper);\n\n            filteredCountries.slice(0, 5).forEach(c => {\n                if (input.value.length > 1) {\n                    let searchResultWrapper = document.createElement('div');\n                    searchResultWrapper.classList.add('result-wrapper', 'country');                    searchResultWrapper.role = 'option';\n                    searchResultWrapper.id = `country-${c.name.replace(/\\s+/g, '-').toLowerCase()}`;                    // Zoom into the country on click\n                    searchResultWrapper.addEventListener('click', function() {\n                        search.stopSearch();\n                        const country = document.querySelector(`.country#c${c.id}`);\n                        if (country) {\n                            country.dispatchEvent(new Event('click'));\n                            setTimeout(() => {\n                                document.querySelector('#cnameCont h1').setAttribute(\"tabindex\", \"-1\");\n                                document.querySelector('#cnameCont h1').focus();\n                            }, 250);\n                        }\n                    });\n                    const countrySpan = document.createElement('span');\n\n                    countrySpan.classList.add('country-name');\n                    const countryArtistsSpan = document.createElement('span');\n                    countryArtistsSpan.classList.add('country-artist-count');\n                    countryArtistsSpan.textContent = `${utils.getNumberOfArtistsForCountry(c.id)} artists`;\n\n                    // Highlight the matching letters\n                    let regex = new RegExp(input.value, 'gi');\n                    let highlightedName = c.name.replace(regex, match => `<span class=\"highlight\">${match}</span>`);\n                    countrySpan.innerHTML = highlightedName;\n\n                    searchResultWrapper.appendChild(countrySpan);\n                    searchResultWrapper.appendChild(countryArtistsSpan);\n                    countriesWrapper.appendChild(searchResultWrapper);\n                }\n            });\n        }\n\n        // Filter the artists based on the user's input\n        filteredArtists = artists.filter(country => country.artist.toLowerCase().includes(input.value.toLowerCase()));\n\n        if (filteredArtists.length > 0 && input.value.length > 1) {\n            const artistsWrapper = document.createElement('ul');\n            artistsWrapper.classList.add('search-result-group');\n            let artistsHeading = document.createElement('li');\n            artistsHeading.textContent = 'Artists';\n            artistsHeading.role = \"presentation\"\n            artistsHeading.classList.add('search-result-heading');\n            artistsHeading.id = 'artists-heading';\n            artistsWrapper.appendChild(artistsHeading);\n            artistsWrapper.setAttribute('role', 'group');\n            artistsWrapper.setAttribute(\"aria-labelledby\", \"artists-heading\");\n            resultsDiv.appendChild(artistsWrapper);\n        \n            filteredArtists.slice(0, 100).forEach(artist => {\n                if (input.value.length > 1) {\n                    let searchResultWrapper = document.createElement('div');\n                    searchResultWrapper.classList.add('result-wrapper');\n                    searchResultWrapper.role = 'option';\n                    searchResultWrapper.id = `artist-${artist.artist.replace(/\\s+/g, '-').toLowerCase()}`;\n            \n                    // Navigate to the artist's last.fm link on click\n                    searchResultWrapper.addEventListener('click', function() {\n                        search.stopSearch();\n                        if (!utils.getCountryNameFromId(artist.id)) {\n                            window.open(artist.url, '_blank');\n                        }\n                        const country = document.querySelector(`.country#c${artist.id}`);\n                        if (country) {\n                            country.dispatchEvent(new Event('click'));\n                            setTimeout(() => {\n                                map.searchArtist(artist.artist);\n                            }, 250);\n                        }\n                    });\n            \n                    let artistWrapper = document.createElement('span');\n                    artistWrapper.classList.add('artist-wrapper');\n                    let artistCountryWrapper = document.createElement('span');\n                    artistCountryWrapper.classList.add('country-wrapper');\n                    const srOnlyFrom = document.createElement('span');\n                    srOnlyFrom.classList.add('visually-hidden');\n                    srOnlyFrom.textContent = ', from ';\n                    let artistPlaycount = document.createElement('span');\n                    artistPlaycount.classList.add('playcount');\n                    artistPlaycount.textContent = `${artist.playcount} scrobbles`\n                    const artistNameSpan = document.createElement('span');\n                    artistNameSpan.classList.add('artist-name');\n            \n                    // Highlight the matching letters\n                    let regex = new RegExp(input.value, 'gi');\n                    let highlightedName = artist.artist.replace(regex, match => `<span class=\"highlight\">${match}</span>`);\n                    artistNameSpan.innerHTML = highlightedName;\n            \n                    artistWrapper.appendChild(artistNameSpan);\n                    artistWrapper.appendChild(artistPlaycount);\n                    const artistCountryNameSpan = document.createElement('span');\n                    artistCountryNameSpan.classList.add('country-name');\n                    artistCountryNameSpan.textContent = utils.getCountryNameFromId(artist.id) ? utils.getCountryNameFromId(artist.id) : 'Unknown country :-(';\n                    artistCountryWrapper.appendChild(artistCountryNameSpan);\n                    artistCountryWrapper.prepend(srOnlyFrom);\n                    // Check if the country is known\n                    let countryName = utils.getCountryNameFromId(artist.id);\n                    if (!countryName) {\n                        countryName = 'Unknown country';\n                        let addTagsSpan = document.createElement('span');\n                        addTagsSpan.classList.add('add-tags');\n                        addTagsSpan.textContent = 'Go add some tags on Last.fm!';\n                        artistCountryWrapper.appendChild(addTagsSpan);\n                    }\n                    searchResultWrapper.appendChild(artistWrapper);\n                    searchResultWrapper.appendChild(artistCountryWrapper);\n                    artistsWrapper.appendChild(searchResultWrapper);\n                    artistsWrapper.classList.add('artists-wrapper');\n                }\n            });\n        }\n\n        // Filter the artists for the currently shown country\n        filteredCountryArtists = artists.filter((artist) => filteredCountries.length === 1 && filteredCountries[0].id === artist.id);\n        if (filteredCountryArtists.length > 0 && input.value.length > 1) {\n            const artistsWrapper = document.createElement('ul');\n            artistsWrapper.classList.add('search-result-group');\n            let artistsHeading = document.createElement('li');\n            artistsHeading.textContent = 'Artists from ' + filteredCountries[0].name;\n            artistsHeading.role = \"presentation\"\n            artistsHeading.classList.add('search-result-heading');\n            artistsHeading.id = 'artists-country-heading';\n            artistsWrapper.appendChild(artistsHeading);\n            artistsWrapper.setAttribute('role', 'group');\n            artistsWrapper.setAttribute(\"aria-labelledby\", \"artists-country-heading\");\n            resultsDiv.appendChild(artistsWrapper);\n        \n            filteredCountryArtists.slice(0, 100).forEach(artist => {\n                if (input.value.length > 1) {\n                    let searchResultWrapper = document.createElement('div');\n                    searchResultWrapper.classList.add('result-wrapper');\n                    searchResultWrapper.role = 'option';\n                    searchResultWrapper.id = `${filteredCountries[0].name}-artist-${artist.artist.replace(/\\s+/g, '-').toLowerCase()}`;                    \n                    searchResultWrapper.addEventListener('click', function() {\n                        search.stopSearch();\n                        const country = document.querySelector(`.country#c${artist.id}`);\n                        if (country) {\n                            country.dispatchEvent(new Event('click'));\n                            setTimeout(() => {\n                                map.searchArtist(artist.artist);\n                            }, 250);\n                        }\n                        \n                    });\n                    let artistWrapper = document.createElement('span');\n                    artistWrapper.classList.add('artist-wrapper');\n                    let artistCountryWrapper = document.createElement('span');\n                    artistCountryWrapper.classList.add('country-wrapper');\n                    const srOnlyFrom = document.createElement('span');\n                    srOnlyFrom.classList.add('visually-hidden');\n                    srOnlyFrom.textContent = ', from ';\n                    let artistPlaycount = document.createElement('span');\n                    artistPlaycount.classList.add('playcount');\n                    artistPlaycount.textContent = `${artist.playcount} scrobbles`\n                    const artistNameSpan = document.createElement('span');\n                    artistNameSpan.classList.add('artist-name');\n        \n                    // Highlight the matching letters\n                    let regex = new RegExp(input.value, 'gi');\n                    let highlightedName = artist.artist.replace(regex, match => `<span class=\"highlight\">${match}</span>`);\n                    artistNameSpan.innerHTML = highlightedName;\n        \n                    artistWrapper.appendChild(artistNameSpan);\n                    artistWrapper.appendChild(artistPlaycount);\n                    artistCountryWrapper.textContent = utils.getCountryNameFromId(artist.id);\n                    artistCountryWrapper.prepend(srOnlyFrom);\n                    searchResultWrapper.appendChild(artistWrapper);\n                    searchResultWrapper.appendChild(artistCountryWrapper);\n                    artistsWrapper.appendChild(searchResultWrapper);\n                    artistsWrapper.classList.add('artists-wrapper');\n                }\n            });\n        }\n\n        // Show artists without country when the user types \"unknown\"\n        noCountryArtists = artists.filter((artist) => \n            input.value.toLowerCase() === \"unknown\" && \n            !artist.id\n        );\n\n        if (noCountryArtists.length > 0 && input.value.length > 1) {\n            const artistsWrapper = document.createElement('ul');\n            artistsWrapper.classList.add('search-result-group');\n            let artistsHeading = document.createElement('li');\n            artistsHeading.textContent = 'Artists without a country (first 100)';\n            artistsHeading.role = \"presentation\"\n            artistsHeading.classList.add('search-result-heading');\n            artistsHeading.id = 'unknown-artists-heading';\n            artistsWrapper.appendChild(artistsHeading);\n            artistsWrapper.setAttribute('role', 'group');\n            artistsWrapper.setAttribute(\"aria-labelledby\", \"unknown-artists-heading\");\n            resultsDiv.appendChild(artistsWrapper);\n        \n            noCountryArtists.slice(0, 100).forEach(artist => {\n                if (input.value.length > 1) {\n                    let searchResultWrapper = document.createElement('div');\n                    searchResultWrapper.classList.add('result-wrapper');\n                    searchResultWrapper.role = 'option';\n                    searchResultWrapper.id = `artist-${artist.artist.replace(/\\s+/g, '-').toLowerCase()}`;\n            \n                    // Navigate to the artist's last.fm link on click\n                    searchResultWrapper.addEventListener('click', function() {\n                        search.stopSearch();\n                        if (!utils.getCountryNameFromId(artist.id)) {\n                            window.open(artist.url, '_blank');\n                        }\n                        const country = document.querySelector(`.country#c${artist.id}`);\n                        if (country) {\n                            country.dispatchEvent(new Event('click'));\n                            setTimeout(() => {\n                                map.searchArtist(artist.artist);\n                            }, 250);\n                        }\n                    });\n            \n                    let artistWrapper = document.createElement('span');\n                    artistWrapper.classList.add('artist-wrapper');\n                    let artistCountryWrapper = document.createElement('span');\n                    artistCountryWrapper.classList.add('country-wrapper');\n                    const srOnlyFrom = document.createElement('span');\n                    srOnlyFrom.classList.add('visually-hidden');\n                    srOnlyFrom.textContent = ', from ';\n                    let artistPlaycount = document.createElement('span');\n                    artistPlaycount.classList.add('playcount');\n                    artistPlaycount.textContent = `${artist.playcount} scrobbles`\n                    const artistNameSpan = document.createElement('span');\n                    artistNameSpan.classList.add('artist-name');\n            \n                    // Highlight the matching letters\n                    let regex = new RegExp(input.value, 'gi');\n                    let highlightedName = artist.artist.replace(regex, match => `<span class=\"highlight\">${match}</span>`);\n                    artistNameSpan.innerHTML = highlightedName;\n            \n                    artistWrapper.appendChild(artistNameSpan);\n                    artistWrapper.appendChild(artistPlaycount);\n                    const artistCountryNameSpan = document.createElement('span');\n                    artistCountryNameSpan.classList.add('country-name');\n                    artistCountryNameSpan.textContent = utils.getCountryNameFromId(artist.id) ? utils.getCountryNameFromId(artist.id) : 'Unknown country :-(';\n                    artistCountryWrapper.appendChild(artistCountryNameSpan);\n                    artistCountryWrapper.prepend(srOnlyFrom);\n                    // Check if the country is known\n                    let countryName = utils.getCountryNameFromId(artist.id);\n                    if (!countryName) {\n                        countryName = 'Unknown country';\n                        let addTagsSpan = document.createElement('span');\n                        addTagsSpan.classList.add('add-tags');\n                        addTagsSpan.textContent = 'Go add some tags on Last.fm!';\n                        artistCountryWrapper.appendChild(addTagsSpan);\n                    }\n                    searchResultWrapper.appendChild(artistWrapper);\n                    searchResultWrapper.appendChild(artistCountryWrapper);\n                    artistsWrapper.appendChild(searchResultWrapper);\n                    artistsWrapper.classList.add('artists-wrapper');\n                }\n            });\n        }\n\n        // Announce the number of results to screen readers\n        clearTimeout(typingTimeout);\n        typingTimeout = setTimeout(() => {\n            announcer.announce(search.getAnnouncement(), 'polite');\n        }, 750);\n    });\n\n    window.addEventListener(\"keydown\", function (evt) {\n        const inputElement = document.querySelector('.search');\n\n        // if backspace or letter key, we clear the focused result\n        if (FOCUSED_RESULT && (evt.keyCode === 8 || (evt.keyCode >= 65 && evt.keyCode <= 90))) {\n            FOCUSED_RESULT.removeAttribute(\"aria-selected\")\n            FOCUSED_RESULT.classList.remove('focused');\n            inputElement.removeAttribute('aria-activedescendant');\n            FOCUSED_RESULT = null;\n            // scroll result list to top\n            resultsDiv.scrollTop = 0;\n        }\n\n        // If arrow down, we set aria-activedescentant to the next result\n        if (evt.keyCode === 40 && SEARCH_IS_OPEN) {\n            evt.preventDefault();\n            if (FOCUSED_RESULT) {\n                FOCUSED_RESULT.removeAttribute(\"aria-selected\")\n                FOCUSED_RESULT.classList.remove('focused');\n                inputElement.removeAttribute('aria-activedescendant');\n                let nextResult = FOCUSED_RESULT.nextElementSibling;\n                if (!nextResult) {\n                    // If there's no next sibling, find the next group and select the first result in it\n                    let nextGroup = FOCUSED_RESULT.parentElement.nextElementSibling;\n                    if (nextGroup) {\n                        nextResult = nextGroup.querySelector('.result-wrapper');\n                    }\n                }\n                FOCUSED_RESULT = nextResult;\n                if (FOCUSED_RESULT) {\n                    FOCUSED_RESULT.classList.add('focused');\n                    FOCUSED_RESULT.setAttribute(\"aria-selected\", \"true\")\n                    inputElement.setAttribute('aria-activedescendant', FOCUSED_RESULT.id);\n                    FOCUSED_RESULT.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n                }\n            } else {\n                FOCUSED_RESULT = document.querySelector('.result-wrapper');\n                FOCUSED_RESULT.classList.add('focused');\n                FOCUSED_RESULT.setAttribute(\"aria-selected\", \"true\")\n                inputElement.setAttribute('aria-activedescendant', FOCUSED_RESULT.id);\n                FOCUSED_RESULT.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n            }\n        }\n\n        // If arrow up, we set aria-activedescentant to the previous result\n        if (evt.keyCode === 38 && SEARCH_IS_OPEN) {\n            evt.preventDefault();\n            if (FOCUSED_RESULT) {\n                FOCUSED_RESULT.classList.remove('focused');\n                FOCUSED_RESULT.removeAttribute(\"aria-selected\")\n                inputElement.removeAttribute('aria-activedescendant');\n                let previousResult = FOCUSED_RESULT.previousElementSibling.classList.contains('search-result-heading') ? null : FOCUSED_RESULT.previousElementSibling;\n                if (!previousResult) {\n                    // If there's no previous sibling, find the previous group and select the last result in it\n                    let previousGroup = FOCUSED_RESULT.parentElement.previousElementSibling;\n                    if (previousGroup) {\n                        let resultsInGroup = previousGroup.querySelectorAll('.result-wrapper');\n                        previousResult = resultsInGroup[resultsInGroup.length - 1];\n                    } else {\n                        // If there's no previous group, find the last group and select the last result in it\n                        let allGroups = document.querySelectorAll('.search-result-group');\n                        let lastGroup = allGroups[allGroups.length - 1];\n                        if (lastGroup) {\n                            let resultsInGroup = lastGroup.querySelectorAll('.result-wrapper');\n                            previousResult = resultsInGroup[resultsInGroup.length - 1];\n                        }\n                        \n                    }\n                }\n                FOCUSED_RESULT = previousResult;\n                if (FOCUSED_RESULT) {\n                    FOCUSED_RESULT.classList.add('focused');\n                    FOCUSED_RESULT.setAttribute(\"aria-selected\", \"true\")\n                    inputElement.setAttribute('aria-activedescendant', FOCUSED_RESULT.id);\n                    FOCUSED_RESULT.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n                }\n            }\n        }\n\n        // If enter, activate the focused result\n        if (evt.keyCode === 13 && SEARCH_IS_OPEN) {\n            evt.preventDefault();\n            const currentActiveDescendant = inputElement.getAttribute('aria-activedescendant');\n            // If the user has selected a result\n            if (currentActiveDescendant) {\n                const currentActiveElement = document.getElementById(currentActiveDescendant);\n                if (currentActiveElement) {\n                    currentActiveElement.dispatchEvent(new Event('click'));\n                }\n            }\n            else {\n                console.log('no active descendant');\n                // Select the first visible option\n                const firstVisibleOption = document.querySelector('.result-wrapper');\n                // If the first visible option exists\n                if (firstVisibleOption) {\n                    // Trigger a click event on the first visible option\n                    firstVisibleOption.dispatchEvent(new Event('click'));\n                }\n            }\n        }\n        \n        // If escape, close the search\n        if (evt.keyCode === 27 && SEARCH_IS_OPEN) {\n            search.stopSearch();\n        }\n\n    });\n\n    // Set up click outside listener for search\n    window.addEventListener(\"click\", function (evt) {\n        if (SEARCH_IS_OPEN && !evt.target.closest('.search-container')) {\n            search.stopSearch();\n        }\n    });\n\n  }\n\n\n\n  search.stopSearch = function () {\n    const searchButtonClose = document.querySelector('#search-button');\n    const inputElement = document.querySelector('.search');\n    if (inputElement !== undefined) {\n        inputElement.removeAttribute('aria-activedescendant');\n        inputElement.setAttribute('aria-expanded', 'false');\n    }\n    const searchContainer = document.querySelector('.search-container');\n    if (searchContainer) searchContainer.innerHTML = '';\n    if (searchButtonClose){\n        searchButtonClose.focus( {preventScroll: true} ); \n        searchButtonClose.ariaExpanded = false;\n    };\n    SEARCH_IS_OPEN = false;\n  }\n  search.getSearchStatus = function () {\n    return SEARCH_IS_OPEN;\n  }\n\n  search.setSearchStatus = function (status) {\n    SEARCH_IS_OPEN = status;\n  }\n\n  window.initSearch = search.initSearch;\n\n})();","/*requires:\napi/lastfm.js\n*/\n\nvar api = api || {};\nvar superCount = 0;\n\n(function (window, document) {\n\tlet getHardcodedCountries = () => new Promise((res, rej) =>\n\t\td3.json(\"assets/data/artist-countries.json\", (err, data) =>\n\t\t\terr ? rej(err) : res(data)\n\t\t));\n\n\tapi.getCountriesData = (() => {\n\t\tconsole.log(\"Loading countries data...\")\n\t\tlet promise;\n\n\t\treturn () => {\n\t\t\tif (promise) { return promise; }\n\n\t\t\treturn promise = new Promise((res, rej) => {\n\t\t\t\td3.csv(\"assets/data/countries.csv\", function (err, data) {\n\t\t\t\t\tdata.forEach(d => {\n\t\t\t\t\t\td.id = +d.id;\n\t\t\t\t\t\td.names = d.names ? d.names.split(\"|\") : [];\n\t\t\t\t\t\td.tags = d.tags ? d.tags.split(\"|\") : [];\n\t\t\t\t\t\td.mainName = d.names[0];\n\t\t\t\t\t\td.tag = d.tags[0];\n\t\t\t\t\t\td.name = d.mainName;\n\t\t\t\t\t});\n\n\t\t\t\t\tres(data);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t})();\n\t\n\tPromise.all([api.getCountriesData(), getHardcodedCountries()]).then(([countryData, hardcodedCountries]) => {\n\t\tcountryData = countryData.map(d => {\n\t\t\tlet splits = [];\n\n\t\t\tif (d.names.length === 1 && d.tags.length === 0) {\n\t\t\t\tsplits = [d];\n\t\t\t}\n\t\t\tif (d.names.length > 1) {\n\t\t\t\tsplits = splits.concat(d.names.map(name => ({ ...d, name })));\n\t\t\t}\n\t\t\tif (d.tags.length > 0) {\n\t\t\t\tsplits = splits.concat(d.tags.map(tag => ({ ...d, tag }))); \n\t\t\t}\n\n\t\t\tif(d.names.length > 1 &&d.tags.length > 0){ splits.splice(0,1); }\n\t\t\t\n\t\t\treturn splits;\n\t\t}).flat();\n\n\t\tlet alias = d3.nest()\n\t\t\t.key(function(d) {\n\t\t\t\tif (d && d.tag) {\n\t\t\t\t\treturn d.tag.toLowerCase();\n\t\t\t\t} else {\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\t\t\t})\n\t\t\t.map(countryData);\n\n\t\tlet cname = d3.nest()\n\t\t\t.key(function(d) {\n\t\t\t\treturn d.name.toLowerCase();\n\t\t\t})\n\t\t\t.map(countryData);\n\n\t\t/**\n\t\t * Tries to find out the country for a specified artist.\n\t\t * @param  {String}   artist   Name of the artist to get country for\n\t\t * @param  {Function} callback Callback function, called when the search is over (whether a country's been found or not)\n\t\t *                             The callback function takes one argument, this object:\n\t\t *\n\t\t * \t\t\t\t\t\t\t\t```\n\t\t *                             {\n\t\t *                             \t\"artist\": \"\", // <artist name>,\n\t\t *                             \t\"country\": \"\", // <country name>,\n\t\t *                             \t\"id\": \"\", // <country id>,\n\t\t *                             \t\"tag\": \"\", // <the tag that decided the country (e.g. Swedish for Sweden)>\n\t\t *                             }\n\t\t * \t\t\t\t\t\t\t\t```\n\t\t *\n\t\t * \t\t\t\t\t\t\t\tIf no country could be found, \"country\", \"tag\" and \"id\" are undefined.\n\t\t *\n\t\t */\n\t\tapi.getCountry = function(artist, callback) {\n\t\t\tif (hardcodedCountries[artist]) {\n\t\t\t\tlet hardcodedTagName = hardcodedCountries[artist].toLowerCase();\n\t\t\t\t\n\t\t\t\tconsole.log(`Using hardcoded country tag \"${hardcodedTagName}\" for artist \"${artist}\"`)\n\t\t\t\t\n\t\t\t\tcallback({\n\t\t\t\t\tartist,\n\t\t\t\t\ttag: hardcodedTagName,\n\t\t\t\t\tid: cname[hardcodedTagName][0].id,\n\t\t\t\t\tcountry: cname[hardcodedTagName][0].mainName\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// Get artists country code here, from last.fm or whatever\n\t\t\tapi.lastfm.send(\"artist.gettoptags\", [[\"artist\", artist]], function(err, responseData2) {\n\t\t\t\t// Return if something failed\n\t\t\t\tif (err || !responseData2.toptags || !responseData2.toptags.tag || !\n\t\t\t\t\tresponseData2.toptags.tag.length) {\n\t\t\t\t\tcallback({\n\t\t\t\t\t\t\"artist\": artist\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Lista med taggar vi vill dubbelkolla\n\t\t\t\tvar troubleCountries = [\"georgia\", \"ireland\"];\n\t\t\t\tvar troubleLanguages = [\"spanish\", \"french\", \"english\", \"portuguese\", \"russian\", \"italian\", \"japanese\", \"korean\", \"indian\", \"swedish\", \"irish\"];\n\t\t\t\tvar theTroubles = [].concat(troubleCountries, troubleLanguages);\n\n\t\t\t\t// check for country-tags in the artist's tags\n\t\t\t\tlet demonymTag = { tag: \"\", id: null, country: \"\", count: 0 };\n\t\t\t\tlet countryTag = demonymTag;\n\n\t\t\t\tresponseData2.toptags.tag.some(function (t, i) {\n\t\t\t\t\tvar tname = t.name.toLowerCase();\n\n\t\t\t\t\t// no need to search anymore since we only care\n\t\t\t\t\t// about the créme de la creme i.e. the tag with the\n\t\t\t\t\t// highest count\n\t\t\t\t\tif (countryTag.id && demonymTag.id) { return true; }\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// sweden->sweden\n\t\t\t\t\t\tif (!countryTag.id && cname[tname] && cname[tname][0].id) {\n\t\t\t\t\t\t\tcountryTag = { tag: tname, id: cname[tname][0].id, country: cname[tname][0].mainName, count: t.count };\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// swedish -> sweden\n\t\t\t\t\t\tif (!demonymTag.id && alias[tname] && alias[tname][0].id) {\n\t\t\t\t\t\t\tdemonymTag = { tag: tname, id: alias[tname][0].id, country: alias[tname][0].name, count: t.count };\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {}\n\t\t\t\t});\n\n\t\t\t\t// country is best, demonym second\n\t\t\t\tvar bestTag = (countryTag.id && demonymTag.count < 8 * countryTag.count) ?\n\t\t\t\t\tcountryTag :\n\t\t\t\t\t(demonymTag.id \n\t\t\t\t\t\t? demonymTag\n\t\t\t\t\t\t: {});\n\n\t\t\t\tif (countryTag.tag === \"georgia\" && responseData2.toptags.tag.some(function (t) {\n\t\t\t\t\t\treturn [\"american\", \"us\", \"usa\"].includes(t.name.toLowerCase())\n\t\t\t\t\t})) {\n\t\t\t\t\t// it's not the country...\n\t\t\t\t\tbestTag = demonymTag;\n\n\t\t\t\t\tconsole.info(\"'\" + artist + \"' is tagged with 'georgia', but I'm gonna go ahead and guess they're really from the U.S.\");\n\t\t\t\t}\n\n\t\t\t\tif (theTroubles.includes(bestTag.tag)) {\n\t\t\t\t\tconsole.info(\"Potentially incorrect country for '\" + artist + \"': \" + bestTag.country + \", using the tag '\" + bestTag.tag + \"'\");\n\t\t\t\t}\n\n\t\t\t\tcallback(Object.assign({ \"artist\": artist, }, bestTag));\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Returns a list of country objects for a list of artist names.\n\t\t *\n\t\t * Beware!!! overwrites localstorage.artists when done!!! woaps!!!!!! dododod!!!\n\t\t * @param  {Array}   artists  Array of artist names (String)\n\t\t * @param  {Function} callback Callback function. Argument is a list of country objects,\n\t\t *                             containing only those artists that have a country\n\t\t *                             associated with them. For object structure, see api.getCountry\n\t\t */\n\t\tapi.getCountries = function(artists, callback) {\n\t\t\tvar returnList = [],\n\t\t\t\tcount = 0;\n\t\t\t/**\n\t\t\t * Increases a count and checks if we've tried\n\t\t\t * to get country for all artists\n\t\t\t */\n\t\t\tvar checkCount = function() {\n\t\t\t\tcount++;\n\t\t\t\tsuperCount++;\n\t\t\t\tscript.setLoadingStatus(`Loading artists, please wait... (${superCount} / ${SESSION.total_artists})`);\n\t\t\t\td3.select(\"#loading-text\").html(\"Loading artists...<br>(\" + superCount + \"/\" + SESSION.total_artists + \")<br>You can start exploring,<br>but it might interfere<br>with loading your artists.\");\n\t\t\t\tif (count === artists.length) {\n\t\t\t\t\t// We done, save artists and call back\n\t\t\t\t\tlocalforage.setItem(\"artists\", STORED_ARTISTS, function (err) {\n\t\t\t\t\t\tif (err) { console.error(\"Failed saving artists to storage: \", err); }\n\t\t\t\t\t\tcallback(returnList);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Get countries for all artists\n\t\t\tartists.forEach(function(el, i) {\n\t\t\t\t// first check stored artists to see if we've already checked this artist\n\t\t\t\tif (STORED_ARTISTS[el] && STORED_ARTISTS[el].country) {\n\t\t\t\t\tvar returnObject = STORED_ARTISTS[el].country;\n\t\t\t\t\treturnObject.artist = el;\n\t\t\t\t\treturnList.push(returnObject);\n\t\t\t\t\tcheckCount();\n\t\t\t\t} else {\n\t\t\t\t\tvar start = new Date().getTime();\n\n\t\t\t\t\tapi.getCountry(el, function(data) {\n\t\t\t\t\t\tSTORED_ARTISTS[el] = STORED_ARTISTS[el] || {};\n\t\t\t\t\t\t// console.error(data)\n\n\t\t\t\t\t\t// if (data.name) {\n\t\t\t\t\t\tSTORED_ARTISTS[el].country = {\n\t\t\t\t\t\t\t\"id\": data.id,\n\t\t\t\t\t\t\t\"name\": data.name,\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturnList.push(data);\n\t\t\t\t\t\t// }\n\t\t\t\t\t\t// console.log(\"apicall \" + (new Date().getTime() - start) + \" ms\");\n\n\t\t\t\t\t\t// Update loading div, whoah ugly code yeah whaddayagonnado\n\n\n\t\t\t\t\t\tcheckCount();\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t})\n\t\t}\n\t})\n\n\t/**\n\t * Get all tags for an artist.\n\t * @param  {String}   artist   Artist name\n\t * @param  {Function} callback Callback function. Takes one argument which is an array\n\t *                             of tag objects (see the last.fm api doc for tag object structure)\n\t */\n\tapi.getTags = function(artist, callback) {\n\t\t// Check if artist tags are already saved, if so return them\n\t\tif (STORED_ARTISTS[artist] && STORED_ARTISTS[artist].tags) {\n\t\t\t// console.log(\"Had in store, no api call\");\n\t\t\tcallback(STORED_ARTISTS[artist].tags);\n\t\t} else {\n\t\t\t// Create object in localstorage\n\t\t\tSTORED_ARTISTS[artist] = STORED_ARTISTS[artist] || {};\n\t\t\tSTORED_ARTISTS[artist].tags = [];\n\n\t\t\t// Get from lastfm\n\t\t\tapi.lastfm.send(\"artist.gettoptags\", [[\"artist\", artist]],\n\t\t\t\tfunction(err, responseData2) {\n\t\t\t\t\tSTORED_ARTISTS[artist].tags = responseData2.toptags.tag;\n\t\t\t\t\tlocalforage.setItem(\"artists\", STORED_ARTISTS, function (err) {\n\t\t\t\t\t\tif (err) { console.error(\"Failed saving artists to storage: \", err); }\n\t\t\t\t\t\tcallback(STORED_ARTISTS[artist].tags);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t}\n\t}\n\n\tapi.getArtistInfo = function(artist, callback) {\n\t\tvar artistInfo = [];\n\n\t\tapi.lastfm.send(\"artist.getinfo\", [[\"artist\", artist]], function(err, data1) {\n\t\t\t//Creating a list of tag names\n\t\t\tvar tagnamelist = [];\n\t\t\tif (data1.artist.tags.tag) {\n\t\t\t\tdata1.artist.tags.tag.forEach(function(t, i) {\n\t\t\t\t\ttagnamelist.push(t.name);\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tartistInfo.push({\n\t\t\t\tname: artist,\n\t\t\t\turl: data1.artist.url,\n\t\t\t\timage: data1.artist.image[3][\"#text\"],\n\t\t\t\tdescription: data1.artist.bio.summary,\n\t\t\t\ttags: tagnamelist\n\t\t\t})\n\t\t\tcallback(artistInfo);\n\t\t})\n\n\n\n\t}\n\n\t/**\n\t * Gets a list of artists with tags similar to the user's top tags, sorted in descending order.\n\t * Also included are which tags matched.\n\t *\n\t * Calling this function cancels previous requests initiated by this function.\n\t * @param  {String}   country  Name of country or country alias (sweden, swedish, your choice)\n\t * @param  {Function} callback Callback function. Argument is a list of artists.\n\t */\n\tvar recommendationRequests = [];\n\tapi.cancelRecommendationRequests = function () {\n\t\trecommendationRequests.forEach(function (xhr) {\n\t\t\txhr.abort();\n\t\t});\n\n\t\trecommendationRequests = [];\n\t}\n\tapi.getRecommendations = function (country, callback) {\n\t\tapi.cancelRecommendationRequests();\n\n\t\tvar recommendations = [];\n\n\t\t// get top tags for user\n\t\tvar toptags = USER_TAGS.slice(0, 15);\n\t\t// make tag list to an object (back n forthss)\n\t\tvar userTagObj = d3.nest().key(function(d) {\n\t\t\treturn d.tag;\n\t\t}).rollup(function(d) {\n\t\t\treturn d[0].count;\n\t\t}).map(toptags);\n\n\n\t\t//console.log(\"Got top tags for user!\")\n\n\t\t// Get top artists for tag country\n\t\tvar xhr1 = api.lastfm.send(\"tag.gettopartists\", [[\"tag\", country], [\"limit\", 100]], function(err, data1) {\n\t\t\t// Gotta count matching tags to then sort\n\t\t\tvar tagCounts = {};\n\n\t\t\t// Get the tags for these artists\n\t\t\t//console.log(data1, err)\n\t\t\tif (err || data1.error || !data1.topartists || !data1.topartists.artist) {\n\t\t\t\tcallback([]);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar artists = data1.topartists.artist;\n\n\t\t\tartists.forEach(function(a, num) {\n\t\t\t\ttagCounts[a.name] = [];\n\t\t\t\tvar xhr2 = api.lastfm.send(\"artist.gettoptags\", [[\"artist\", a.name]], function(err, data2) {\n\t\t\t\t\tvar hasTags = !data2.error && (data2.toptags.tag ? true : false);\n\t\t\t\t\td3.select(\"#rec-loading-current\").html(\"(\" + a.name + \")\");\n\t\t\t\t\tif (hasTags) {\n\t\t\t\t\t\t// Compare top 10 tags to user tags\n\t\t\t\t\t\tvar tags = d3.nest().key(function(d) {\n\t\t\t\t\t\t\treturn d.name;\n\t\t\t\t\t\t}).map(data2.toptags.tag);\n\n\t\t\t\t\t\t// Get rid of justin bieber\n\t\t\t\t\t\tif (tags[country]) {\n\t\t\t\t\t\t\tfor (var i = data2.toptags.tag.length - 1; i >= 0; i--) {\n\t\t\t\t\t\t\t\tif (userTagObj[data2.toptags.tag[i].name] && data2.toptags.tag[i].count > 5) {\n\t\t\t\t\t\t\t\t\ttagCounts[a.name].push(data2.toptags.tag[i].name);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (num === artists.length - 1) {\n\t\t\t\t\t\t//console.log(\"We've gotten tag counts for all artists, make a list!\")\n\t\t\t\t\t\td3.keys(tagCounts).forEach(function(d) {\n\t\t\t\t\t\t\trecommendations.push({\n\t\t\t\t\t\t\t\tname: d,\n\t\t\t\t\t\t\t\tcount: tagCounts[d].length,\n\t\t\t\t\t\t\t\ttags: tagCounts[d]\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\trecommendations.sort(function(a, b) {\n\t\t\t\t\t\t\treturn b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t//console.log(recommendations)\n\t\t\t\t\t\tcallback(recommendations);\n\t\t\t\t\t}\n\n\t\t\t\t})\n\n\t\t\t\trecommendationRequests.push(xhr2);\n\t\t\t})\n\t\t})\n\n\t\trecommendationRequests.push(xhr1);\n\t}\n\n\tapi.getFriends = function(callback) {\n\t\tapi.lastfm.send(\"user.getFriends\", [[\"user\", SESSION.name]], callback);\n\t}\n\n})(window, document);\n","const utils = utils || {};\n\n(function () {\n  utils.exportToCSV = function (countryCountObj) {\n    const list = map.countryNames.map((country) => {\n      const countryCount = countryCountObj[country.id];\n      return {\n        countryId: country.id,\n        countryName: country.mainName,\n        artists: (countryCount && countryCount[SESSION.name]) || [],\n      };\n    });\n\n    let csv = json2csv.parse(\n      list.sort(({ countryName: a }, { countryName: b }) =>\n        a.localeCompare(b, \"en\")\n      ),\n      {\n        fields: [\n          { label: \"Country\", value: \"countryName\" },\n          { label: \"Number of artists\", value: (row) => row.artists.length },\n          {\n            label: \"Scrobbles\",\n            value: (row) =>\n              row.artists.reduce((acc, artist) => acc + artist.playcount, 0),\n          },\n        ],\n      }\n    );\n\n    csv = \"data:text/csv;charset=utf-8,\" + csv.replaceAll(`\"`, \"\");\n\n    window.open(encodeURI(csv));\n  };\n\n  utils.getCountryNameFromId = function (countryId) {\n    const match = map.countryNames.find((country) => country.id === countryId);\n    if (match && match.mainName) {\n      return match.mainName;\n    }\n    else return \"\"\n  }\n\n  utils.getNumberOfArtistsForCountry = function (countryId) {\n    // Get the current data\n    let data = script.getCurrentData();\n\n    // Flatten and prepare the data\n    let artists = [].concat(...Object.values(data));\n    artists = artists.reduce((acc, item) => {\n        for (let key in item) {\n            if (item.hasOwnProperty(key)) {\n                acc = acc.concat(item[key]);\n            }\n        }\n        return acc;\n    }, [])\n    const artistList = artists.filter(artist => artist.id === countryId)\n    return artists.filter(artist => artist.id === countryId).length\n  }\n})();\n","var screenshot = {};\n\n(function (window, document) {\n\tscreenshot.render = function (autoDownload = false) {\n\t\tvar titleString,\n\t\t\tsubtitleString = \"Make your own at explr.fm\",\n\t\t\timg;\n\n\t\tvar explrLogo = new Image();\n\n\t\tvar svg = d3.select(\"#map-svg\");\n\t\tvar w = svg.attr(\"width\");\n\t\tvar h = svg.attr(\"height\");\n\n\t\tvar canvas = document.createElement(\"canvas\");\n\t\tvar ctx = canvas.getContext(\"2d\");\n\n\t\t// canvg(canvas, document.getElementById(\"map-svg\").outerHTML);\n\n\t\tvar backgroundColor = window.getComputedStyle(document.body).backgroundColor;\n\t\tvar textColor = window.getComputedStyle(document.body).color;\n\n\t\tvar drawCenteredText = function (obj) {\n\t\t\tctx.font = obj.font;\n\t\t\tctx.fillText(obj.string, w / 2 - ctx.measureText(obj.string).width / 2, obj.y);\n\n\t\t\tif (obj.lineWidth) {\n\t\t\t\tctx.lineWidth = obj.lineWidth;\n\t\t\t\tctx.strokeStyle = obj.strokeStyle;\n\t\t\t\tctx.strokeText(obj.string, w / 2 - ctx.measureText(obj.string).width / 2, obj.y);\n\t\t\t}\n\t\t}\n\n\t\tcanvas.width = w;\n\t\tcanvas.height = h;\n\n\t\t// insert background rect\n\t\tsvg.insert(\"rect\", \"g\")\n\t\t\t.attr({\n\t\t\t\tid: \"background-rect\",\n\t\t\t\twidth: \"100%\",\n\t\t\t\theight: \"100%\",\n\n\t\t\t})\n\t\t\t.style({\n\t\t\t\tfill: backgroundColor,\n\t\t\t});\n\n\t\t// Add color, font to legend text\n\t\td3.selectAll('.legend text, text.legend').style({\n\t\t\t\"font-family\": function () {\n\t\t\t\treturn window.getComputedStyle(this)[\"fontFamily\"];\n\t\t\t},\n\t\t\t\"font-size\": function () {\n\t\t\t\treturn window.getComputedStyle(this)[\"fontSize\"];\n\t\t\t},\n\t\t\t\"fill\": textColor,\n\t\t});\n\t\td3.selectAll(\".legend rect\").style({\n\t\t\tstroke: backgroundColor,\n\t\t})\n\n\t\tcanvg(canvas, new XMLSerializer().serializeToString(svg[0][0]));\n\n\t\texplrLogo.onload = function () {\n\t\t\t/* Add text and shiiet */\n\t\t\t// Add text background box\n\t\t\tctx.save(); // To draw with different opaticy\n\t\t\tctx.globalAlpha = 0.6;\n\t\t\tctx.fillStyle = backgroundColor;\n\t\t\tlet scoreString = SESSION.total_artists + \" artists from \" + countryScore + \" / 210 countries\";\n\t\t\tlet titleString = SESSION.name + \"'s musical world map\";\n\t\t\tctx.font = \"34px Patua One\";\n\t\t\tctx.fillRect(w / 2 - ctx.measureText(titleString).width / 2 - 20, h - 110, ctx.measureText(titleString).width + 40, 100);\n\t\t\tctx.fillStyle = textColor;\n\n\t\t\t// Add text\n\t\t\tctx.fillStyle = textColor;\n\t\t\tdrawCenteredText({\n\t\t\t\tstring: titleString,\n\t\t\t\tfont: \"34px Patua One\",\n\t\t\t\ty: h - 60,\n\t\t\t});\n\t\t\tdrawCenteredText({\n\t\t\t\tstring: scoreString,\n\t\t\t\tfont: \"20px Didact Gothic\",\n\t\t\t\ty: h - 40,\n\t\t\t});\n\n\t\t\t// Add explr.fm logo\n\t\t\tctx.restore();\n\t\t\tctx.drawImage(explrLogo, w - 130, h - 60, 100, 36);\n\n\t\t\td3.select(\"#background-rect\").remove();\n\n\t\t\t//console.log(canvas.toDataURL())\n\t\t\t// img = document.createElement(\"img\").src = canvas.toDataURL();\n\t\t\tdocument.getElementById(\"screenshot-img\").src = canvas.toDataURL(\"image/png\");\n\t\t\t// d3.select(\"body\").append(img);\n\t\t\t//\n\n\t\t\tvar dataurl = canvas.toDataURL(\"image/png\");\n\t\t\t// console.log(\"dataurl:\", dataurl)\n\n\t\t\t// window.open(dataurl, \"_blank\");\n\n\t\t\tconst overlay = document.getElementsByClassName(\"screenshot-overlay\")[0];\n\t\t\toverlay.style = \"\";\n\t\t\toverlay.ariaModal = true\n\n\n\t\t\tif (autoDownload) {\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tscreenshot.download();\n\t\t\t\t\tscreenshot.close();\n\t\t\t\t}, 0);\n\t\t\t}\n\n\t\t}\n\t\texplrLogo.src = \"assets/img/explrlogo.png\";\n\t}\n\n\tscreenshot.close = function () {\n\t\tdocument.getElementsByClassName(\"screenshot-overlay\")[0].style = \"display:none;\";\n\t\tdocument.getElementsByClassName(\"screenshot-overlay\")[0].ariaModal = false;\n\t}\n\n\tscreenshot.download = function () {\n\t\tvar dataurl = document.getElementById(\"screenshot-img\").src;\n\t\n\t\t// Create a new anchor element\n\t\tvar a = document.createElement('a');\n\t\n\t\t// Set the href and download attributes of the anchor\n\t\ta.href = dataurl;\n\t\ta.download = 'screenshot.png'; // or any other filename you want\n\t\n\t\t// Append the anchor to the body (this is necessary for Firefox)\n\t\tdocument.body.appendChild(a);\n\t\n\t\t// Programmatically click the anchor\n\t\ta.click();\n\t\n\t\t// Remove the anchor from the body\n\t\tdocument.body.removeChild(a);\n\t}\n\n})(window, document);\n","/* requires:\naria-announcer.js\nsearch.js\n*/\n\nconst keyboardMode = keyboardMode || {};\n\nconst MIN_ZOOM_LEVEL_FOR_KEYBOARD_MODE = 7;\nconst MAX_COUNTRY_SUGGESTIONS = 20;\nlet KEYBOARD_MODE_ACTIVE = false;\n// Exclude A, L and H because they are used for other purposes\nconst ALPHABET = 'BCDEFGIJKMNOPQRSTUVWXYZ'.split('');\n\nlet visibleCountries = [];\nlet keyBuffer = '';\nlet keyBufferTimer = null;\nlet keyboardModeActive = false;\nlet isKeyboardModeEnabled = false;\nlet currentFocus = null;\n\n// Add a list of country IDs to exclude from keyboard mode\nconst EXCLUDED_COUNTRY_IDS = [\n  831, // Jersey\n  832, // Guernsey\n  833, // Isle of Man\n  136, // Cayman Islands\n  796, // Turks and Caicos Islands\n];\n\n// Add a map to store country-to-letter assignments\nlet countryLetterMap = {};\n\nconst handleLetterKeyPress = (e) => {\n    // Check if user has pressed a letter key from A to Z\n    if (e.key.match(/[a-zA-Z]/) && e.target.tagName !== \"INPUT\") {\n        // Check if it's a single key press with no modifier keys\n        if (e.ctrlKey || e.altKey || e.shiftKey || e.metaKey) {\n            return;\n        }\n        \n        // Convert the key to uppercase\n        const key = e.key.toUpperCase();\n        \n        // Find the country with this letter\n        const targetCountryId = Object.keys(countryLetterMap).find(\n            id => countryLetterMap[id] === key\n        );\n        \n        if (targetCountryId) {\n            // Find the country element\n            const targetCountry = visibleCountries.find(country => country.id === targetCountryId);\n            \n            // Generate a click on the target country\n            if (targetCountry) {\n                targetCountry.dispatchEvent(new Event('click'));\n                // Focus the country name\n                setTimeout(() => {\n                    document.querySelector('#cnameCont h1').setAttribute(\"tabindex\", \"-1\");\n                    document.querySelector('#cnameCont h1').focus();\n                }, 250);\n\n                ga('send', {\n                    hitType: 'event',\n                    eventCategory: 'Keyboard',\n                    eventAction: 'Opened country',\n                    eventLabel: 'test'\n                });\n            }\n        }\n    }\n}\n\nfunction getCurrentlyVisibleCountries() {\n    const userName = window.location.href.split(\"username=\")[1];\n    let data = script.getCurrentData();\n    // return an array consisting of objects with the country name in plain text + the index number of the country\n    let formattedCountries = [];\n    \n    // Add null checks and error handling\n    if (!data || !userName) {\n        console.warn('Data or username not available');\n        return formattedCountries;\n    }\n\n    visibleCountries.forEach((country) => {\n        const countryId = parseInt(country.id.slice(1));\n        \n        // Skip excluded country IDs\n        if (EXCLUDED_COUNTRY_IDS.includes(countryId)) {\n            return;\n        }\n        \n        const letter = countryLetterMap[country.id];\n        \n        // Add null checks for data[countryId] and data[countryId][userName]\n        const artistCount = data[countryId] && data[countryId][userName] ? \n            data[countryId][userName].length : 0;\n            \n        // Only add countries that have a valid name\n        const countryName = utils.getCountryNameFromId(countryId);\n        if (countryName && countryName !== \"undefined\") {\n            formattedCountries.push({\n                name: countryName,\n                number: letter,\n                artistCount: artistCount,\n                id: countryId\n            });\n        }\n    });\n    return formattedCountries;\n}\n\nfunction isInViewport(element) {\n    // Get country ID from the element\n    const countryId = parseInt(element.id.slice(1));\n    \n    // Skip excluded country IDs\n    if (EXCLUDED_COUNTRY_IDS.includes(countryId)) {\n        return false;\n    }\n    \n    // Check if we have an override for this country in map.COUNTRY_BBOX_OVERRIDES\n    if (map.COUNTRY_BBOX_OVERRIDES && map.COUNTRY_BBOX_OVERRIDES[countryId]) {\n        // For countries with multiple boxes (like USA), check if any box is visible\n        const overrides = map.COUNTRY_BBOX_OVERRIDES[countryId];\n        const boxArray = Array.isArray(overrides[0]) ? overrides : [overrides];\n        \n        return boxArray.some(bbox => isBBoxInViewport(bbox));\n    }\n    \n    // Fall back to the current implementation for countries without overrides\n    const rect = element.getBoundingClientRect();\n\n    // Define the dimensions of the rectangle\n    const rectangleWidth = 400;\n    const rectangleHeight = 400;\n\n    // Calculate the position of the rectangle\n    const rectangleLeft = (window.innerWidth - rectangleWidth) / 2;\n    const rectangleRight = rectangleLeft + rectangleWidth;\n    const rectangleTop = (window.innerHeight - rectangleHeight) / 2;\n    const rectangleBottom = rectangleTop + rectangleHeight;\n\n    // Check if the element is partially within the rectangle\n    return (\n        rect.top <= rectangleBottom &&\n        rect.bottom >= rectangleTop &&\n        rect.left <= rectangleRight &&\n        rect.right >= rectangleLeft\n    );\n}\n\n// New helper function to check if a geographic bounding box is in the viewport\nfunction isBBoxInViewport(bbox) {\n    // Convert geographic coordinates to screen coordinates\n    const [west, south, east, north] = bbox;\n    \n    // Create points for the corners of the bounding box\n    const corners = [\n        [west, north], // Northwest\n        [east, north], // Northeast\n        [east, south], // Southeast\n        [west, south]  // Southwest\n    ];\n    \n    // Project each corner to screen coordinates\n    const screenCorners = corners.map(coord => {\n        const projected = map.projection(coord);\n        return {\n            x: projected[0],\n            y: projected[1]\n        };\n    });\n    \n    // Find the bounding box of the projected corners\n    const minX = Math.min(...screenCorners.map(p => p.x));\n    const maxX = Math.max(...screenCorners.map(p => p.x));\n    const minY = Math.min(...screenCorners.map(p => p.y));\n    const maxY = Math.max(...screenCorners.map(p => p.y));\n    \n    // Get the current transform from the zoom behavior\n    const zoom = d3.select(\"#map-svg\").call(map.zoom);\n    const scale = map.zoom.scale();\n    const translate = map.zoom.translate();\n    \n    // Apply the transform to the bounding box\n    const transformedMinX = translate[0] + minX * scale;\n    const transformedMaxX = translate[0] + maxX * scale;\n    const transformedMinY = translate[1] + minY * scale;\n    const transformedMaxY = translate[1] + maxY * scale;\n    \n    // Define the dimensions of the viewport rectangle\n    const rectangleWidth = 400;\n    const rectangleHeight = 400;\n    \n    // Calculate the position of the rectangle\n    const rectangleLeft = (window.innerWidth - rectangleWidth) / 2;\n    const rectangleRight = rectangleLeft + rectangleWidth;\n    const rectangleTop = (window.innerHeight - rectangleHeight) / 2;\n    const rectangleBottom = rectangleTop + rectangleHeight;\n    \n    // Check if the transformed bounding box intersects with the viewport rectangle\n    return !(\n        transformedMaxX < rectangleLeft ||\n        transformedMinX > rectangleRight ||\n        transformedMaxY < rectangleTop ||\n        transformedMinY > rectangleBottom\n    );\n}\n\nfunction displayKeyboardModeMessage() {\n    const message = document.getElementById(\"keyboard-mode-message\");\n    message.classList.remove(\"hidden\");\n    const innerMessage = document.createElement(\"div\");\n    innerMessage.innerHTML = \"<h2>Keyboard mode active! <span class='fa fa-keyboard'></span> </h2><p>Type a <kbd>letter</kbd> to select a country.<p><p>Move around with <kbd>&#8592;</kbd><kbd>&#8594;</kbd><kbd>&#8593;</kbd><kbd>&#8595;</kbd> keys.</p><p>Exit by zooming out with <kbd>-</kbd> key. </p><p>Toggle audio feedback with <kbd>A</kbd> key.</p>\";\n    message.appendChild(innerMessage);\n    \n    // Add the visual indicator for the 400x400 box\n    addViewportBoxIndicator();\n}\n\nfunction hideKeyboardModeMessage() {\n    const message = document.getElementById(\"keyboard-mode-message\");\n    message.classList.add(\"hidden\");\n    message.innerHTML = \"\";\n    \n    // Remove the visual indicator\n    removeViewportBoxIndicator();\n}\n\n// Add a visual indicator for the 400x400 box used to determine visible countries\nfunction addViewportBoxIndicator() {\n    // Remove any existing indicator first\n    removeViewportBoxIndicator();\n    \n    // Create the indicator element\n    const indicator = document.createElement(\"div\");\n    indicator.id = \"viewport-box-indicator\";\n    \n    // Calculate the position and size\n    const rectangleWidth = 400;\n    const rectangleHeight = 400;\n    const rectangleLeft = (window.innerWidth - rectangleWidth) / 2;\n    const rectangleTop = (window.innerHeight - rectangleHeight) / 2;\n    \n    // Set the styles\n    indicator.style.position = \"fixed\";\n    indicator.style.left = rectangleLeft + \"px\";\n    indicator.style.top = rectangleTop + \"px\";\n    indicator.style.width = rectangleWidth + \"px\";\n    indicator.style.height = rectangleHeight + \"px\";\n    indicator.style.border = \"1px solid rgba(255, 255, 255, 0.6)\";\n    indicator.style.pointerEvents = \"none\"; // Make sure it doesn't interfere with clicks\n    indicator.style.zIndex = \"1000\"; // Make sure it's above the map but below other UI\n    indicator.style.boxSizing = \"border-box\";\n    \n    // Add a tooltip/label\n    const label = document.createElement(\"div\");\n    label.textContent = \"Active Area\";\n    label.style.position = \"absolute\";\n    label.style.top = \"-25px\";\n    label.style.left = \"50%\";\n    label.style.transform = \"translateX(-50%)\";\n    label.style.backgroundColor = \"rgba(0, 0, 0, 0.7)\";\n    label.style.color = \"white\";\n    label.style.padding = \"3px 8px\";\n    label.style.borderRadius = \"3px\";\n    label.style.fontSize = \"12px\";\n    \n    indicator.appendChild(label);\n    document.body.appendChild(indicator);\n    \n    // Update position on window resize\n    window.addEventListener('resize', updateViewportBoxPosition);\n}\n\nfunction removeViewportBoxIndicator() {\n    const indicator = document.getElementById(\"viewport-box-indicator\");\n    if (indicator) {\n        indicator.remove();\n    }\n    window.removeEventListener('resize', updateViewportBoxPosition);\n}\n\nfunction updateViewportBoxPosition() {\n    const indicator = document.getElementById(\"viewport-box-indicator\");\n    if (indicator) {\n        const rectangleWidth = 400;\n        const rectangleHeight = 400;\n        const rectangleLeft = (window.innerWidth - rectangleWidth) / 2;\n        const rectangleTop = (window.innerHeight - rectangleHeight) / 2;\n        \n        indicator.style.left = rectangleLeft + \"px\";\n        indicator.style.top = rectangleTop + \"px\";\n    }\n}\n\nfunction getPathCenter(path) {\n    const y = parseFloat(path.getAttribute(\"data-center-y\"));\n    const x = parseFloat(path.getAttribute(\"data-center-x\"));\n    return {\n        x: -x,\n        y: -y\n    };\n    \n  }\n\nlet hasAnnounced = false;\n\nfunction getVisibleCountries() {\n    // Get all country elements in a D3 v3 compatible way\n    const countriesSelection = d3.selectAll(\".country\");\n    const countries = [];\n    \n    // Convert D3 selection to array in v3 compatible way\n    countriesSelection.each(function() {\n        countries.push(this);\n    });\n    \n    // Filter out countries that should be excluded\n    const filteredCountries = countries.filter(country => {\n        const countryId = parseInt(country.id.slice(1));\n        \n        // Skip excluded country IDs\n        if (EXCLUDED_COUNTRY_IDS.includes(countryId)) {\n            return false;\n        }\n        \n        // Skip countries with undefined names\n        const countryName = utils.getCountryNameFromId(countryId);\n        if (!countryName || countryName === \"undefined\") {\n            return false;\n        }\n        \n        // Check if the country is in the viewport\n        return isInViewport(country);\n    });\n    \n    return filteredCountries;\n}\n\n// New function to get a summary of visible countries\nfunction getVisibleCountriesSummary() {\n    const countries = getVisibleCountries();\n    return `${countries.length} ${countries.length === 1 ? 'country' : 'countries'} visible, press L to list`;\n}\n\nfunction updateVisibleCountries(zoom) {\n    keyboardMode.cleanup();\n    \n    // Get filtered visible countries\n    visibleCountries = getVisibleCountries();\n    \n    if (zoom && zoom.scale() >= MIN_ZOOM_LEVEL_FOR_KEYBOARD_MODE) {\n        // Lets start keyboard mode\n        KEYBOARD_MODE_ACTIVE = true;\n        displayKeyboardModeMessage();\n        \n        // TODO: Find a working way to only announce this once\n        if (!hasAnnounced) {\n            announcer.announce(\"Keyboard mode active! Press L to hear the list of countries. Press A to turn on audio feedback.\")\n            hasAnnounced = true;\n        }\n        \n        // Hide controls, footer and legend\n        document.getElementById(\"controls\").classList.add(\"hidden\");\n        document.getElementById(\"legend\").classList.add(\"hidden\");\n        document.getElementById(\"filter-text\").classList.add(\"hidden\");\n        document.getElementById(\"filter\").classList.add(\"hidden\");\n        document.querySelector(\".no-countries\").classList.add(\"hidden\");\n        document.getElementById(\"friends\").classList.add(\"hidden\");\n        \n        // Assign letters to countries if they don't already have one\n        assignLettersToCountries();\n        \n        // display a number on the center of each country\n        visibleCountries.forEach((country) => {\n            window.addEventListener('keydown', handleLetterKeyPress);\n            \n            var center = getPathCenter(country);\n            const countryId = country.id;\n            const letter = countryLetterMap[countryId];\n            \n            // Append a circle\n            d3.select(country.parentElement).append(\"rect\")\n                .attr(\"class\", \"a11y-number-bg\")\n                .attr(\"x\", center.x - 1.5) // position the rectangle\n                .attr(\"y\", center.y - 1.5) // position the rectangle\n                .attr(\"width\", 3) // width of the rectangle\n                .attr(\"height\", 3) // height of the rectangle\n                .attr(\"rx\", 0.5) // horizontal corner radius\n                .attr(\"ry\", 0.5); // vertical corner radius\n            \n            // Append a text for the number\n            d3.select(country.parentElement).append(\"text\")\n                .attr(\"class\", \"a11y-number\")\n                .attr(\"data-country-id\", countryId)\n                .attr(\"text-anchor\", \"middle\")\n                .attr(\"alignment-baseline\", \"middle\")\n                .attr(\"x\", center.x) // position the text\n                .attr(\"y\", center.y + 0.2) // position the text\n                .text(letter);\n            \n            // Append a text for the country name\n            d3.select(country.parentElement).append(\"text\")\n                .attr(\"class\", \"a11y-country-name\")\n                .attr(\"text-anchor\", \"middle\")\n                .attr(\"alignment-baseline\", \"middle\")\n                .attr(\"font-size\", \"0.1rem\")\n                .attr(\"x\", center.x) // position the text\n                .attr(\"y\", center.y + 4) // position the text below the number\n                .text(utils.getCountryNameFromId(parseInt(countryId.slice(1))));\n        });\n    }\n}\n\n// New function to assign letters to countries\nfunction assignLettersToCountries() {\n    // For any new countries that don't have a letter yet, assign them one\n    visibleCountries.forEach((country) => {\n        const countryId = country.id;\n        \n        // If this country doesn't have a letter assigned yet\n        if (!countryLetterMap[countryId]) {\n            // Find the first available letter\n            for (let i = 0; i < ALPHABET.length; i++) {\n                const letter = ALPHABET[i];\n                \n                // Check if this letter is already used\n                const isLetterUsed = Object.values(countryLetterMap).includes(letter);\n                \n                // If letter is not used, assign it to this country\n                if (!isLetterUsed) {\n                    countryLetterMap[countryId] = letter;\n                    break;\n                }\n            }\n        }\n    });\n    \n    // Clean up letters for countries that are no longer visible\n    Object.keys(countryLetterMap).forEach(id => {\n        const isVisible = visibleCountries.some(country => country.id === id);\n        if (!isVisible) {\n            delete countryLetterMap[id];\n        }\n    });\n}\n\n// Update the announcement functions to only include country count when keyboard mode is active\nfunction getAnnouncementText(baseText) {\n    if (KEYBOARD_MODE_ACTIVE) {\n        const audioFeedbackState = window.auditoryFeedback && window.auditoryFeedback.isEnabled() \n            ? \"turn off\" \n            : \"turn on\";\n        return `${baseText}. ${getVisibleCountriesSummary()}. Press A to ${audioFeedbackState} audio feedback.`;\n    }\n    return baseText;\n}\n\n(function () {\n\n    keyboardMode.init = function (zoom, move, width, height, MAX_ZOOM) {\n        // Store the zoom behavior for use in other methods\n        keyboardMode.zoomBehavior = zoom;\n        \n        // Set keyboard listeners for zoom and pan\n        window.addEventListener('keydown', function(e) {\n\n            const param = window.location.href.split(\"username=\")[1];\n\n\n            // Exit if the search is active or there is no user yet\n            if (search.getSearchStatus() || !param ) {\n                return;\n            }\n\n            // Get the current translation and scale\n            var t = zoom.translate();\n            var s = zoom.scale();\n\n            // Define the distance for each pan step\n            var panStep = 100;\n\n            // Define the factor for each zoom step\n            var zoomStep = 1.25;\n\n            // Get the center of the screen\n            var center = [width / 2, height / 2];\n\n            \n\n            // Adjust the translation or scale based on the key pressed\n            switch(e.key) {\n\n                case 'Escape':\n                    if (map.centered !== null) {\n                        map.dismissCenteredCountry();\n                        keyboardMode.cleanup();\n                        // Restore focus to the img\n                        d3.select('#map-svg').node().focus();\n                        return\n                    }\n                    // reset the zoom and translation\n                    // Calculate the new scale\n                    var newScale = 1;\n\n                    // Calculate the new translation to keep the center fixed\n                    t[0] = center[0] + (t[0] - center[0]) * newScale / s;\n                    t[1] = center[1] + (t[1] - center[1]) * newScale / s;\n\n                    // Update the scale\n                    s = newScale;\n                    e.preventDefault();\n                    move(t, s, false, true);\n                    keyboardMode.cleanup();\n                    ga('send', {\n                        hitType: 'event',\n                        eventCategory: 'Keyboard',\n                        eventAction: 'Escape key',\n                        eventLabel: 'test'\n                    });\n                    break;\n                    \n                case 'ArrowUp':\n                    t[1] += panStep;\n                    e.preventDefault();\n                    move(t, s, false, true);\n                    getVisibleCountries();\n                    // Update announcement to include country count only when keyboard mode is active\n                    setTimeout(() => {\n                        const message = getAnnouncementText(\"Panning north\");\n                        announcer.announce(message, \"assertive\", 100);\n                        console.log(message);\n                    }, 100);\n                    ga('send', {\n                        hitType: 'event',\n                        eventCategory: 'Keyboard',\n                        eventAction: 'ArrowUp key',\n                        eventLabel: 'test'\n                    });\n                    break;\n                case 'ArrowDown':\n                    t[1] -= panStep;\n                    e.preventDefault();\n                    move(t, s, false, true);\n                    getVisibleCountries();\n                    // Update announcement to include country count only when keyboard mode is active\n                    setTimeout(() => {\n                        const message = getAnnouncementText(\"Panning south\");\n                        announcer.announce(message, \"assertive\", 100);\n                        console.log(message);\n                    }, 100);\n                    ga('send', {\n                        hitType: 'event',\n                        eventCategory: 'Keyboard',\n                        eventAction: 'ArrowDown key',\n                        eventLabel: 'test'\n                    });\n                    break;\n                case 'ArrowLeft':\n                    t[0] += panStep;\n                    e.preventDefault();\n                    move(t, s, false, true);\n                    getVisibleCountries();\n                    // Update announcement to include country count only when keyboard mode is active\n                    setTimeout(() => {\n                        const message = getAnnouncementText(\"Panning west\");\n                        announcer.announce(message, \"assertive\", 100);\n                        console.log(message);\n                    }, 100);\n                    ga('send', {\n                        hitType: 'event',\n                        eventCategory: 'Keyboard',\n                        eventAction: 'ArrowLeft key',\n                        eventLabel: 'test'\n                    });\n                    break;\n                case 'ArrowRight':\n                    t[0] -= panStep;\n                    e.preventDefault();\n                    move(t, s, false, true);\n                    getVisibleCountries();\n                    // Update announcement to include country count only when keyboard mode is active\n                    setTimeout(() => {\n                        const message = getAnnouncementText(\"Panning east\");\n                        announcer.announce(message, \"assertive\", 100);\n                        console.log(message);\n                    }, 100);\n                    ga('send', {\n                        hitType: 'event',\n                        eventCategory: 'Keyboard',\n                        eventAction: 'ArrowRight key',\n                        eventLabel: 'test'\n                    });\n                    break;\n                case '+':\n                case '-':\n                    // Calculate the new scale\n                    var newScale = e.key === '+' ? s * zoomStep : s / zoomStep;\n\n                    // If the new scale exceeds the maximum scale, clamp\n                    if (newScale > MAX_ZOOM) {\n                    newScale = MAX_ZOOM;\n                    }\n\n                    // Calculate the new translation to keep the center fixed\n                    t[0] = center[0] + (t[0] - center[0]) * newScale / s;\n                    t[1] = center[1] + (t[1] - center[1]) * newScale / s;\n\n                    // Update the scale\n                    s = newScale;\n                    e.preventDefault();\n                    move(t, s, false, true);\n\n                    getVisibleCountries();\n                    // Update announcement to include country count only when keyboard mode is active\n                    setTimeout(() => {\n                        const baseMessage = `Zoom ${e.key === '+' ? \"in\" : \"out\"} level ${parseInt(newScale)}`;\n                        const message = getAnnouncementText(baseMessage);\n                        announcer.announce(message, \"assertive\", 100);\n                        console.log(message);\n                    }, 100);\n                    ga('send', {\n                        hitType: 'event',\n                        eventCategory: 'Keyboard',\n                        eventAction: 'Zoom in/out',\n                        eventLabel: 'test'\n                    });\n                    break;\n                case 'h':\n                    // Help for screen reader users. Read out the contents of #a11y-info-text\n                    announcer.announce(document.getElementById(\"a11y-info-text\").textContent, \"polite\");\n                    console.log(document.getElementById(\"a11y-info-text\").textContent);\n                    ga('send', {\n                        hitType: 'event',\n                        eventCategory: 'Keyboard',\n                        eventAction: 'Help',\n                        eventLabel: 'test'\n                    }); \n                    break;\n                case 'l':\n                    if (!KEYBOARD_MODE_ACTIVE) {\n                        announcer.announce(\"Keyboard mode is not active right now. Zoom in to at least level 7 to activate.\", \"assertive\", 100);\n                        ga('send', {\n                            hitType: 'event',\n                            eventCategory: 'Keyboard',\n                            eventAction: 'List countries (premature)',\n                            eventLabel: 'test'\n                        });\n                        return;\n                    }\n                    // announce the list of countries. Temporarily removing the prefix to improve screen reader ux\n                    // let message = \"Listing countries: \";\n                    let message = \"\";\n                    const countries = getCurrentlyVisibleCountries();\n                    \n                    // Sort countries by their assigned letter\n                    countries.sort((a, b) => a.number.localeCompare(b.number));\n                    \n                    countries.forEach((country) => {\n                        message += `${country.number}: ${country.name} (${country.artistCount} artists), `;\n                    });\n                    announcer.announce(message, \"assertive\", 100);\n                    console.log(message);\n                    ga('send', {\n                        hitType: 'event',\n                        eventCategory: 'Keyboard',\n                        eventAction: 'List countries',\n                        eventLabel: 'test'\n                    });\n                    break;\n                default:\n                    return; // Exit if it's not an arrow key or zoom key\n            }\n\n            if (map.centered !== null) {\n                map.dismissCenteredCountry();\n            }\n\n            // Only handle arrow keys for navigation\n            if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || \n                e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n                \n                // Then trigger the auditory feedback after a small delay\n                // to allow the map to update first\n                setTimeout(function() {\n                    if (window.auditoryFeedback && window.auditoryFeedback.isEnabled()) {\n                        window.auditoryFeedback.updateFeedback();\n                    }\n                }, 100);\n            }\n\n        });\n\n    }\n\n    keyboardMode.cleanup = function () {\n        hideKeyboardModeMessage();\n        KEYBOARD_MODE_ACTIVE = false;\n        // Reset the letter map when exiting keyboard mode completely\n        if (keyboardMode.zoomBehavior && keyboardMode.zoomBehavior.scale() < MIN_ZOOM_LEVEL_FOR_KEYBOARD_MODE) {\n            countryLetterMap = {};\n        }\n        d3.selectAll(\".a11y-number\").remove();\n        d3.selectAll(\".a11y-number-bg\").remove();\n        d3.selectAll(\".a11y-country-name\").remove();\n        // restore controls, footer and legend\n        document.getElementById(\"controls\").classList.remove(\"hidden\");\n        document.getElementById(\"friends\").classList.remove(\"hidden\");\n        document.getElementById(\"legend\").classList.remove(\"hidden\");\n        document.getElementById(\"filter-text\").classList.remove(\"hidden\");\n        document.getElementById(\"filter\").classList.remove(\"hidden\");\n        document.querySelector(\".no-countries\").classList.remove(\"hidden\");\n        // remove keyboard listeners\n        window.removeEventListener('keydown', handleLetterKeyPress);\n        // Remove the visual indicator\n        removeViewportBoxIndicator();\n    }\n\n    keyboardMode.isActive = function() {\n        // Return true if keyboard mode is currently active\n        // Instead of using currentZoomLevel which doesn't exist,\n        // use the stored zoom behavior and check its scale\n        return keyboardMode.zoomBehavior && \n               keyboardMode.zoomBehavior.scale() >= MIN_ZOOM_LEVEL_FOR_KEYBOARD_MODE;\n    }\n\n    keyboardMode.getStatus = function () {\n        return KEYBOARD_MODE_ACTIVE;\n    }\n\n    function enableKeyboardMode() {\n        isKeyboardModeEnabled = true;\n        // Likely adds visual indicators or focus states\n    }\n\n    function disableKeyboardMode() {\n        isKeyboardModeEnabled = false;\n        currentFocus = null;\n        // Removes visual indicators\n    }\n\n    keyboardMode.updateVisibleCountries = function(zoom) {\n        updateVisibleCountries(zoom);\n    };\n\n    // Add this line to expose the getCurrentlyVisibleCountries function\n    keyboardMode.getCurrentlyVisibleCountries = function() {\n        return getCurrentlyVisibleCountries();\n    };\n\n})();\n","const noCountries = noCountries || {};\n\nvar listOfArtistsWithNoCountry = [];\n\nvar saveToStorage = function (key, object, cb) {\n    localforage.setItem(key, object, cb || function () {});\n}\n\nfunction sortArtists(data, method) {\n    if (method === \"scrobbles\")\n        return data.sort((a, b) => b.playcount - a.playcount);\n    else if (method === \"name\")\n        return data.sort((a, b) => a.artist.localeCompare(b.artist));\n}\n\nvar addArtistsWithNoCountry = function (data) {\n    listOfArtistsWithNoCountry = listOfArtistsWithNoCountry.concat(data);\n    saveToStorage(\"no_countries\", listOfArtistsWithNoCountry);\n\n    function handleCheckboxChange() {\n        let artistName = this.id;\n        let checked = this.checked;\n        let artistsState = JSON.parse(localStorage.getItem('noCountryArtistsProgress')) || {};\n        artistsState[artistName] = { artistName, checked };\n        localStorage.setItem('noCountryArtistsProgress', JSON.stringify(artistsState));\n        // If you just checked and the filter is on, remove the artist from the DOM\n        if (checked && document.querySelector(\"#hide-checked\")?.checked) {\n            this.parentNode.style.display = 'none';\n            let nextCheckbox = this.parentNode.nextElementSibling.querySelector('input');\n            if (nextCheckbox) {\n                nextCheckbox.focus();\n            }\n        }\n        // get the label element for the filter checked checkbox\n        let filterCheckedLabel = document.querySelector(\"label[for='hide-checked']\");\n        // Update the label to include the number of checked artists\n        filterCheckedLabel.innerHTML = `Hide checked artists (${document.querySelectorAll(\"dialog[open] ul li input[type='checkbox']:checked\").length})`;\n        ga('send', {\n            hitType: 'event',\n            eventCategory: 'No countries',\n            eventAction: 'Check artist as done',\n            eventLabel: 'test'\n        });\n    }\n\n    \n\n    function updateNoCountriesList() {\n        let artistsState = JSON.parse(localStorage.getItem('noCountryArtistsProgress')) || {};\n        const sortedData = sortArtists(listOfArtistsWithNoCountry, noCountryArtistSortMethod);\n        var noCountriesListEl = d3.select(\".no-countries__content ul\");\n        noCountriesListEl.html(\"\");\n        sortedData.forEach(function (_art) {\n            let artistState = artistsState[_art.artist] || { artistName: _art.artist, checked: false };\n            let listItem = noCountriesListEl.append(\"li\");\n            listItem.append(\"input\")\n                .attr(\"type\", \"checkbox\")\n                .property(\"checked\", artistState.checked)\n                .attr(\"id\", _art.artist)\n                .on(\"change\", handleCheckboxChange);\n            listItem.append(\"label\")\n                .attr(\"for\", _art.artist)\n                .html('<a href=\"' + _art.url + '\" target=\"blank\" class=\"no-countries__link\">' + _art.artist + '</a><span>' + _art.playcount + ' scrobbles</span>');\n            if (document.querySelector(\"#hide-checked\")?.checked && artistState.checked) {\n                listItem.style(\"display\", \"none\");\n            }\n        })\n        d3.select(\".no-countries__info\").html(listOfArtistsWithNoCountry.length + \" artists without a country:\");\n    }\n\n    // Check if the checkbox and label already exist\n    if (!d3.select(\"#hide-checked\").node() && !d3.select(\"label[for='hide-checked']\").node()) {\n        // Add the checkbox next to the filter radios\n        d3.select(\"dialog fieldset\").append(\"input\")\n            .attr(\"type\", \"checkbox\")\n            .attr(\"id\", \"hide-checked\")\n            .on(\"change\", updateNoCountriesList);\n        d3.select(\"dialog fieldset\").append(\"label\")\n            .attr(\"for\", \"hide-checked\")\n            .text(\"Hide checked artists\");\n    }\n\n    // Handle sorting with radios\n    let radios = document.getElementsByName('sort');\n    function sortFunction() {\n        let selectedValue;\n        for (let radio of radios) {\n            if (radio.checked) {\n                selectedValue = radio.value;\n                noCountryArtistSortMethod = selectedValue;\n                updateNoCountriesList();\n                break;\n            }\n        }\n        ga('send', {\n            hitType: 'event',\n            eventCategory: 'No countries',\n            eventAction: 'Sort artists',\n            eventLabel: 'test'\n        });\n    }\n\n    for (let radio of radios) {\n        radio.addEventListener('change', sortFunction);\n    }\n\n    updateNoCountriesList(\"scrobbles\");\n\n    document.querySelector(\".no-countries__title\").addEventListener(\"click\", function () {\n        const dialog = document.querySelector(\".no-countries__content\");\n        dialog.showModal();\n\n        document.querySelector(\"#no-countries__heading\").focus();\n\n        // Update the label to include the number of checked artists\n        let filterCheckedLabel = document.querySelector(\"label[for='hide-checked']\");\n        filterCheckedLabel.innerHTML = `Hide checked artists (${document.querySelectorAll(\"dialog[open] ul li input[type='checkbox']:checked\").length})`;\n\n        document.addEventListener(\"keydown\", function (e) {\n            if (e.keyCode == 27) {\n                const dialog = document.querySelector(\".no-countries__content\");\n                dialog.close();\n                document.querySelector(\".no-countries__title\").focus();\n            }\n        });\n        ga('send', {\n            hitType: 'event',\n            eventCategory: 'No countries',\n            eventAction: 'Open dialog',\n            eventLabel: 'test'\n        });\n    });\n\n    document.querySelector(\".no-countries__content .close\").addEventListener(\"click\", function () {\n        const dialog = document.querySelector(\".no-countries__content\");\n        dialog.close();\n        document.querySelector(\".no-countries__title\").focus();\n    });\n    const dialog = document.querySelector(\".no-countries__content\");\n    dialog.addEventListener(\"click\", function (event) {\n        if (event.target === dialog) {\n            dialog.close();\n            }\n    });\n\n    if (listOfArtistsWithNoCountry.length) {\n        setTimeout(function () {\n            document.querySelector(\".no-countries\").classList.remove(\"hidden\");\n        }, 850);\n    }\n}\n\nnoCountries.addArtistsWithNoCountry = addArtistsWithNoCountry;","/* requires:\napi/api.js\napi/lastfm.js\nutils.js\nsearch.js\naria-announcer.js\nno-countries.js\nkeyboard-mode.js\n*/\n\nvar script = script || {};\nlet loadingReady = false;\nlet loadingStatus = loadingReady ? \"Ready to Explr!\" : \"Loading...\";\nlet announcementIntervalId;\nlet noCountryArtistSortMethod = \"scrobbles\";\n\n\nvar STORED_ARTISTS;\nvar STORED_ARTISTS_PROMISE = localforage.getItem(\"artists\").then(val => \n    STORED_ARTISTS = val || {}\n);\n\nvar CACHED_NO_COUNTRIES;\nvar CACHED_NO_COUNTRIES_PROMISE = localforage.getItem(\"no_countries\").then(val => \n    CACHED_NO_COUNTRIES = val || {}\n);\n\nvar USER_TAGS = []; // JSON.parse(window.localStorage.user_tags || \"[]\");\nvar CACHED_USERS = JSON.parse(window.localStorage.cached_users || \"{}\");\nvar SESSION = {};\n\n\nfunction clearExplrCache() {\n    var theme = window.localStorage.getItem(\"theme\");\n    window.localStorage.clear();\n    window.localStorage.setItem(\"theme\", theme);\n\n    announcer.announce(\"Cleared artist cache, reloading page...\");\n\n    return localforage.clear();\n}\n\nvar countryCountObj = {};\n\n(function () {\n    // user = prompt(\"Input your user name, get top 20 artists\")\n    var user, currPage = 1,\n        maxPage;\n    var count = 0;\n    var tries = 0;\n    var randomcountrylist = [\"Malawi\", \"Malaysia\", \"Peru\", \"Sierra Leone\", \"Trinidad & Tobago\", \"Greece\", \"Laos\", \"Iran\", \"Haiti\", \"Nicaragua\", \"Mongolia\", \"Slovakia\"];\n\n    var getAllArtists = function () {\n        // console.log(\"get artists\")\n\n        loadingReady = false;\n\n        api.lastfm.send(\"library.getartists\", [\n                [\"user\", user],\n                [\"limit\", 50],\n                [\"page\", currPage]\n            ],\n            function (error, responseData) {\n                // Special case for unfortunate users\n                if (responseData === \"\") {\n                    console.error('Got empty string (\"\") as response, skipping page.')\n                    currPage++;\n                    getAllArtists();\n                    return;\n                }\n                if (error || responseData.error) {\n                    console.error(\"Error in getAllArtists, page \" + currPage, error, responseData);\n\n                    // Try again, but not forever\n                    if (tries++ < 5) {\n                        getAllArtists();\n\n                        // TODO: Show erorr message ;)\n                    } else {\n                        var refresh = confirm(\"Last.fm took too long to respond.\\n\\nPress OK to refresh the page and try again, or Cancel to use the page as it is.\");\n                        if (refresh) {\n                            clearExplrCache().then(function () {\n                                saveToStorage(\"artists\", STORED_ARTISTS, function () {\n                                    window.location.reload()\n                                });\n                            })\n                        }\n                    }\n                    return;\n                }\n\n                tries = 0;\n\n                if (currPage === 1) {\n                    SESSION.total_artists = +responseData.artists[\"@attr\"].total;\n                    maxPage = +responseData.artists[\"@attr\"].totalPages;\n\n                    if (SESSION.total_artists === 0) {\n                        d3.select(\".bubblingG\").remove();\n                        d3.select(\"#loading-text\")\n                            .html(\"You haven't listened to any<br> artists yet. Start scrobbling with <br>\\\n                                                        <a href='http://evolver.fm/2012/05/08/how-to-scrobble-to-last-fm-from-itunes-\" +\n                                \"spotify-and-more/'>your favorite music player!</a>\");\n                        d3.select(\".loader\").style(\"pointer-events\", \"all\");\n                        return;\n                    }\n                }\n\n                currPage++;\n                // console.log(\"Artists done, get countries\");\n\n                // Save artist data to localStorage (and create a list of artist names)\n                var artistNames = []\n                responseData.artists.artist.forEach(function (newArtist) {\n                    var a = STORED_ARTISTS[newArtist.name] || {};\n\n                    a.playcount = +newArtist.playcount;\n                    a.url = newArtist.url;\n\n                    STORED_ARTISTS[newArtist.name] = a;\n                    artistNames.push(newArtist.name);\n                })\n                saveToStorage(\"artists\", STORED_ARTISTS);\n                // var n = count++;\n\n                // Get country for all artists\n                api.getCountries(artistNames, function (data) {\n                    //Gör så att man kan slå upp på land-id och få upp en lista på artister.\n                    var newArtistCountries = d3.nest().key((d) => d.id)\n                        // gör så att man får en lista på alla artister för ett land.\n                        .rollup((leaves) => leaves)\n                        // Skickar in en lista med ett objekt för varje artist.\n                        .map(data);\n\n                    d3.keys(newArtistCountries).forEach(function (id) {\n                        countryCountObj[id] = countryCountObj[id] || {};\n                        countryCountObj[id][user] = countryCountObj[id][user] || [];\n\n                        var artistsFromCountry = countryCountObj[id][user];\n\n                        artistsFromCountry = artistsFromCountry.concat(newArtistCountries[id]);\n\n                        artistsFromCountry.forEach(function (el, i) {\n                            //Här lägger vi till ett fält image med artistens bild-url som ett fält till det \"inre\" objektet.\n                            artistsFromCountry[i].url = STORED_ARTISTS[el.artist].url;\n                            artistsFromCountry[i].playcount = STORED_ARTISTS[el.artist].playcount;\n                        });\n                        // countryCountObj är en lista med \"country\"-objekt. \n                        // Varje country-objekt innehåller en lista med \"inre\" objekt med artistnamn, lands-id och landsnamn.\n                        // dataObj är typ samma som countryCountObj, fast är bara för de tillfälligt sparade artisterna (intervallet).\n                        countryCountObj[id][user] = artistsFromCountry;\n                    })\n\n                    noCountries.addArtistsWithNoCountry(data.filter((artist) => !artist.id));\n\n                    map.addArtists(newArtistCountries);\n\n                    if (currPage > maxPage) {\n                        end();\n                        return;\n                    } else {\n                        getAllArtists();\n                    }\n                });\n            });\n    }\n\n    var getRecommendations = function () {\n        var currPage = 1,\n            limit = 50,\n            maxPage = 1000 / limit;\n        var countriesList = JSON.parse(window.localStorage.countries);\n\n        var countriesObj = d3.nest().key(function (d) {\n            return d.name;\n        }).rollup(function (d) {\n            return d[0];\n        }).map(countriesList);\n        // Get \"all\" artists from one country\n        // countriesList.forEach(function(country){\n\n        // });\n        api.lastfm.send(\"tag.gettopartists\", [\n            [\"tag\", \"swedish\"],\n            [\"limit\", limit],\n            [\"page\", currPage]\n        ], function (err, data) {\n            var artists = data.topartists.artist;\n            // For each artist, get their tags\n            artists.forEach(function (a) {\n                api.lastfm.send(\"artist.gettoptags\", [\n                    [\"artist\", a.name]\n                ], function (err, data) {\n                    // console.log(data);\n                })\n            })\n            // Look for user's top tags in artist tags\n            // If a lot of matches, save to recommended artists for that country\n        });\n\n    }\n\n    var getUserTags = function (err, data) {\n        // err = err ||data.error;\n        if (err || data.error) {\n            if (data && data.error === 6) {\n                alert(\"User not found\");\n                window.location.assign(window.location.origin + window.location.pathname);\n            }\n        }\n\n\n        /*if (err || data.error) {\n            console.error(\"Erorr in getUserTags\", err, data);\n            alert(\"Something went wrong when contacting the Last.fm API\\n\\nEither:\\n - The specified user does not exist\\n - Last.fm is down\\n\\nPlease try again.\");\n            window.location.replace(window.location.origin + window.location.pathname);\n        }*/\n\n        var c = 0;\n\n        var tagCount = {};\n\n        //console.log(\"Gotta get tags\")\n\n        var topArtists = data.topartists.artist;\n        var done = function () {\n            // make list of tags to sort\n            USER_TAGS = [];\n            //Remove specific tags from user's top tags\n            let forbidden = [\"american\", \"swedish\", \"british\", \"female vocalists\", \"male vocalists\", \"german\", \"seen live\", \"english\", \"singer-songwriter\", \"spanish\", \"french\"];\n            d3.keys(tagCount).forEach(function (el) {\n                var nogood = false\n                for (let i = 0; i < forbidden.length; i++) {\n                    if (el === forbidden[i]) {\n                        nogood = true;\n                    }\n                }\n                if (!nogood) {\n                    USER_TAGS.push({\n                        tag: el,\n                        count: tagCount[el]\n                    });\n                }\n            })\n            USER_TAGS.sort(function (a, b) {\n                return b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\n            });\n            console.info(\"Done getting tags, saved to localStorage.user_tags\")\n            window.localStorage.user_tags = JSON.stringify(USER_TAGS);\n        }\n\n\n        topArtists.forEach(function (el, i) {\n            // get top ten tags and save to users tag count....\n            setTimeout(function () { // Set timeout to not stop artists from loading...\n                api.lastfm.send(\"artist.gettoptags\", [\n                    [\"artist\", el.name]\n                ], function (err, data) {\n                    let taglist = data.toptags && data.toptags.tag;\n                    if (taglist) {\n                        var lim = Math.min(taglist.length, 10);\n                        for (var i = 0; i < lim; i++) {\n                            if (tagCount[taglist[i].name]) {\n                                tagCount[taglist[i].name]++;\n                            } else {\n                                tagCount[taglist[i].name] = 1;\n                            }\n                        }\n                        // console.log(c, topArtists.length)\n                    }\n\n                    c++;\n                    if (c == topArtists.length - 1) {\n                        done();\n                    }\n                });\n            }, Math.random() * 3000);\n        });\n\n    }\n\n    var begin = function () {\n        //Send analytics event\n        ga('send', 'event', 'splash screen', 'Go!', 'test');\n        document.getElementById(\"map-label\").innerHTML = `${user}'s world map`;\n        // fade out username input box\n        var welcomeOverlay = d3.select(\"#welcome-container\");\n        welcomeOverlay.transition().duration(2000)\n            .style(\"opacity\", 0)\n            .each(\"end\", function () {\n                welcomeOverlay.remove();\n            });\n\n        // Fade in loader\n        d3.select(\".loader\").transition().duration(2000).style(\"opacity\", 1);\n        d3.select(\"#loading-text\").html(\"Getting library...\");\n\n        // Screen reader status update every 30 seconds\n        setTimeout(function () {\n            announcer.announce(document.getElementById(\"loading-text\")?.innerText);\n        }, 6000);\n\n        setTimeout(function () {\n            if (d3.select(\"#loading-text\")?.html() === \"Getting library...\") {\n                d3.select(\"#loading-text\").html(\"Last.fm is taking<br>a long time to<br>respond...\");\n                setTimeout(function () {\n                    if (d3.select(\"#loading-text\").html() === \"Last.fm is taking<br>a long time to<br>respond...\") {\n                        d3.select(\"#loading-text\").html(\"Maybe <a href='http://last.fm' target='_blank'>last.fm</a> has<br>gone offline...\")\n                            .style(\"pointer-events\", \"all\");\n                    }\n                }, 8000);\n            }\n        }, 8000);\n\n        // Show hidden screen reader help text\n        document.getElementById(\"a11y-map-info\").classList.remove(\"hidden\");\n\n        // Fade in legend, progress-bar etc\n        d3.selectAll(\".on-map-view\").style({\n            \"visibility\": \"visible\",\n            //            \"opacity\": 0\n        }) //.transition().duration(1000).style(\"opacity\", 1);\n\n        // Get user tags\n        api.lastfm.send(\"user.gettopartists\", [\n            [\"user\", user],\n            [\"period\", \"12months\"],\n            [\"limit\", \"50\"]\n        ], getUserTags);\n\n        // Get user friends\n        api.getFriends(function (err, data) {\n            try {\n                var friends = data.friends.user;\n                var i = 0;\n                var friendName = d3.select(\"#friend-name\");\n\n                var updateName = function () {\n                    friendName.html(\"\");\n                    friendName.append(\"a\").attr({\n                        href: window.location.origin + window.location.pathname + \"?username=\" + friends[i].name,\n                        target: \"_self\",\n                    }).html(friends[i].name);\n                }\n\n                d3.selectAll(\".arrow\").on(\"click\", function () {\n                    if (d3.select(this).classed(\"left\")) {\n                        // Go left\n                        i = (i === 0 ? friends.length - 1 : i - 1);\n                    } else {\n                        // Go right\n                        i = (i + 1) % friends.length;\n                    }\n\n                    updateName();\n                })\n\n                updateName();\n                d3.select(\"#friends #msg\").html(\"Check out \" + user + \"'s friends\")\n                d3.select(\"#friends\").transition().duration(1000).style(\"opacity\", 1);\n\n            } catch (e) {\n                console.error(\"getFriends()\", e);\n                d3.select(\"#friends\").html(\"&nbsp;Couldn't find any<br>friends on last.fm :(&nbsp;\")\n                d3.select(\"#friends\").transition().duration(1000).style(\"opacity\", 1);\n            }\n        });\n\n        if (CACHED_USERS[user]) {\n            // TODO: use timestamp\n            console.info(\"No new artists on last.fm!\");\n            countryCountObj = JSON.parse(window.localStorage.countryCountObj);\n\n            localforage.getItem(\"no_countries\", function (err, val) {\n                noCountries.addArtistsWithNoCountry(val || []);\n            });\n\n            // Get number of artists for screenshot etc.\n            api.lastfm.send(\"library.getartists\", [\n                    [\"user\", user],\n                    [\"limit\", 1],\n                    [\"page\", 1]\n                ],\n                function (error, responseData) {\n                    SESSION.total_artists = +responseData.artists[\"@attr\"].total;\n                });\n\n            setTimeout(function () {\n                map.addArtists(\n                    Object.keys(countryCountObj).reduce((acc, countryId) => ({\n                        ...acc,\n                        [countryId]: countryCountObj[countryId][SESSION.name]\n                    }), {}));\n                end();\n            }, 1000)\n        } else {\n            // Save theme\n            var theme = window.localStorage.theme;\n            window.localStorage.clear();\n            if (theme) {\n                window.localStorage.theme = theme;\n            }\n            getAllArtists();\n        }\n    }\n\n    var end = function () {\n        loadingReady = true;\n\n        // Screen reader status update\n        clearInterval(announcementIntervalId);\n        announcer.announce(\"All artists have been loaded!\");\n        const map = document.querySelector(\"#map-container svg\")\n        const existingAriaLabelledBy = map.getAttribute(\"aria-labelledby\");\n        map.setAttribute(\"aria-labelledby\", `${existingAriaLabelledBy} progress-text sr-instructions`);\n\n        // We're done, fade out loader\n        var loader = d3.select(\".loader\");\n        loader.transition().duration(2000)\n            .style(\"opacity\", 0)\n            .each(\"end\", function () {\n                loader.remove();\n            });\n        //Also fade out progress bar text (after a short delay)\n        d3.select(\"#progress-text\").transition().delay(5000).duration(1500)\n            .style(\"opacity\", 0);\n\n        CACHED_USERS = {};\n        CACHED_USERS[user] = new Date().getTime();\n        window.localStorage.cached_users = JSON.stringify(CACHED_USERS);\n        window.localStorage.countryCountObj = JSON.stringify(countryCountObj);\n    }\n\n    // // Set theme\n    // map.nextTheme(window.localStorage.theme || \"pink_white\");\n\n    // Try to get username from url\n    var param = window.location.href.split(\"username=\")[1];\n\n    if (param) { // We already have a user\n\n        // Set up search button listener\n        document.addEventListener('DOMContentLoaded', (event) => {\n            document.getElementById('search-button').addEventListener('click', function() {\n                // Set timeout needed to make sure the browser is ready to focus the search box\n                setTimeout(()=> { search.initSearch() }, 0) ;\n            });\n        });\n\n        // set up keyboard shortcuts\n        window.addEventListener(\"keydown\", function (evt) {\n\n            if ((evt.ctrlKey || evt.metaKey) && evt.keyCode === 70 && !evt.shiftKey && !keyboardMode.getStatus()) { \n                console.log(keyboardMode.getStatus());               \n                // Prevent the browser's default \"ctrl + f\" or \"cmd + f\" action (usually \"Find\")\n                evt.preventDefault();\n\n                // Initialize the search box\n                search.initSearch();\n                \n            }\n            // Supress hotkeys if search or keyboard mode is open \n            if (search.getSearchStatus() || keyboardMode.getStatus()) {\n                return;\n            };\n            switch (evt.keyCode) {\n                case 83:\n                    screenshot.render();\n                    //Send google analytics event\n                    ga('send', {\n                        hitType: 'event',\n                        eventCategory: 'Hotkeys',\n                        eventAction: 'Take screenshot',\n                        eventLabel: 'test'\n                    });\n                    break;\n                    // t\n                case 84:\n                    nextTheme();\n                    //Send google analytics event\n                    ga('send', {\n                        hitType: 'event',\n                        eventCategory: 'Hotkeys',\n                        eventAction: 'Cycle theme',\n                        eventLabel: 'test'\n                    });\n                    break;\n                default:\n                    break;\n            }\n        });\n\n        if (param.length > 15) {\n            param = param.substr(0, 15);\n        }\n        user = param;\n        SESSION.name = param;\n        Promise.all([CACHED_NO_COUNTRIES_PROMISE, STORED_ARTISTS_PROMISE]).then(() => begin());\n    } else {\n        d3.select(\"#welcome-container\").style(\"visibility\", \"visible\");\n        d3.select(\"#randomCountry\").html(randomcountrylist[Math.floor(Math.random() * (randomcountrylist.length))] + \"?\")\n    }\n\n    var saveToStorage = function (key, object, cb) {\n        localforage.setItem(key, object, cb || function () {});\n    }\n\n})();\n\nscript.getCurrentData = function () {\n    if (loadingReady) {\n        return JSON.parse(window.localStorage.getItem('countryCountObj'));;\n    } else {\n        return countryCountObj;\n    }\n\n}\n\nscript.getLoadingStatus = function () {\n    return loadingStatus;\n}\nscript.setLoadingStatus = function (status) {\n    loadingStatus = status;\n}","/* requires:\napi/api.js\napi/lastfm.js\nscript.js\naria-announcer.js\nkeyboard-mode.js\n*/\nvar map = {};\n//White theme default:\nvar colorArray = [\"#feebe2\", \"#feebe2\", \"#fcc5c0\", \"#fa9fb5\", \"#f768a1\", \"#dd3497\", \"#ae017e\", \"#7a0177\"];\nvar legend;\nvar countryScore = 0;\nlet currentPage = 1;\nlet itemsPerPage = 5;\nlet artists = []; // Your artists data goes here\nlet currentZoom = 1;\nconst MAX_ZOOM = 25;\n\nconst prefersReducedMotion = window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches;\n\n// Update the COUNTRY_BBOX_OVERRIDES constant\nconst COUNTRY_BBOX_OVERRIDES = {\n  // Format: [west, south, east, north]\n  // US territories as multiple boxes\n  '840': [\n    [-125, 24, -66, 50],  // Continental US\n    [-180, 51, -130, 72], // Alaska\n    [-160, 18, -154, 23], // Hawaii\n  ],\n  // Russia - adjusted boundaries\n  '643': [\n    [27.5, 41.0, 180.0, 82.0],   // Main Russian territory (European + Asian)\n    [-180.0, 60.0, -169.0, 71.0], // Far Eastern part (crosses the date line)\n  ],\n  // Chile - mainland only, excluding Pacific islands\n  '152': [\n    [-75.6, -55.9, -66.0, -17.5],  // Chilean mainland\n    [-109.5, -27.2, -109.2, -27.0], // Easter Island (Rapa Nui)\n    [-80.8, -33.8, -80.0, -33.3]    // Juan Fernández Islands\n  ],\n  // Ecuador - mainland only, excluding Galápagos\n  '218': [\n    [-81.5, -5.0, -75.0, 1.5],   // Ecuadorian mainland\n    [-92.0, -1.4, -89.2, 1.7]     // Galápagos Islands\n  ],\n  // Spain - mainland and islands\n  '724': [\n    [-9.3, 36.0, 3.4, 43.8],     // Iberian Peninsula (mainland Spain)\n    [-18.2, 27.6, -13.3, 29.5],   // Canary Islands\n    [1.2, 38.6, 4.4, 40.1]        // Balearic Islands\n  ],\n  // Portugal\n  '620': [\n    [-9.5, 36.8, -6.2, 42.2],     // Continental Portugal (mainland)\n    [-31.3, 32.6, -16.2, 39.7]     // Atlantic islands (Azores and Madeira)\n  ],\n  // France - mainland and overseas territories\n  '250': [\n    [-5.1, 41.3, 9.6, 51.1],     // Metropolitan France (mainland)\n    [-54.6, 2.1, -51.6, 5.8],     // French Guiana\n    [55.2, -21.4, 55.8, -20.8],   // Réunion\n    [-61.2, 14.4, -60.8, 14.9],   // Martinique\n    [-61.8, 15.8, -61.0, 16.5],   // Guadeloupe\n    [8.5, 41.3, 9.6, 43.0]        // Corsica\n  ],\n  // Netherlands - mainland and Caribbean territories\n  '528': [\n    [3.3, 50.7, 7.2, 53.6],      // Mainland Netherlands\n    [-69.2, 12.0, -68.2, 12.4],   // Aruba\n    [-69.0, 11.9, -68.2, 12.4],   // Curaçao\n    [-63.2, 17.9, -62.9, 18.1]    // Sint Maarten\n  ],\n  // New Zealand - main islands\n  '554': [\n    [166.0, -47.5, 179.0, -34.0],  // Main islands (North and South)\n    [172.5, -43.9, 173.9, -40.5],  // Chatham Islands\n  ],\n  // Fiji - main island group (corrected)\n  '242': [\n    [177.0, -21.0, 180.0, -16.0],  // Western islands (up to the date line)\n    [-180.0, -21.0, -178.0, -16.0], // Eastern islands (from the date line)\n  ],\n  // Kiribati - three island groups spread across the Pacific\n  '296': [\n    [172.0, -3.0, 177.0, 5.0],      // Gilbert Islands (western group)\n    [-175.0, -11.5, -170.0, -5.0],   // Phoenix Islands (central group)\n    [-160.0, -5.0, -150.0, 12.0],    // Line Islands (eastern group)\n  ],\n  // Add other countries as needed\n};\n\nmap.COUNTRY_BBOX_OVERRIDES = COUNTRY_BBOX_OVERRIDES;\n\n(function(window, document) {\n  d3.select(window).on(\"resize\", throttle);\n\n  var doThrottle = false;\n  var filter = \"artists\"; // filter by artists or plays\n\n  var zoom = d3.behavior.zoom()\n    .scaleExtent([1, MAX_ZOOM])\n    .on(\"zoom\", move);\n\n\n  var height, width;\n\n  var topo, projection, path, svg, g, countryNames, rateById, centered, active;\n  let countryCount = {};\n  let countryDivIsOpen = false;\n  let currentNoArtists = 0;\n  let currentCount = 0;\n  let currentCountry = null;\n\n  //Variables needed to update scale and legend\n  var mydomain = [0, 1, 2, 3, 4, 5, 6];\n  var maxartists = 1,\n    maxplaycount = 0;\n\n  //Setting color and range to be used\n  var color;\n\n\n  // Set theme\n  const defaultTheme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"blue_black\" : \"pink_white\";\n  var theme = window.localStorage.theme || defaultTheme;\n\n  map.drawPlays = function() {\n    filter = \"scrobbles\";\n    redraw();\n  };\n\n  let countryPlaylists; \n  // load links to country playlists\n  d3.json(\"assets/data/playlists.json\", (err, list) => {\n    countryPlaylists = list;\n  });  \n\n  /**\n   * Sets width/height, i.e. changes the global variables \"width\" and \"height\"\n   */\n  function updateDimensions() {\n    height = window.innerHeight - 5;\n    width = document.getElementById('map-container').offsetWidth;\n  }\n\n  //Returns total number of plays for country\n  function getCountryPlaycount(c) {\n    if (countryCount[c.id]) {\n      var count = 0;\n      for (let i = 0; i < countryCount[c.id].length; i++) {\n        count += countryCount[c.id][i].playcount;\n      }\n      return count;\n    } else return 0;\n  };\n\n\n  function updateProgressBar() {\n    var progressPro = (countryScore / 210);\n    return progressPro;\n  }\n;\n\n  //Function to format numbers over 1000 with a space\n  function numbersWithSpace(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\n  }\n  /**\n   * Randomize array element order in-place.\n   * Using Fisher-Yates shuffle algorithm.\n   */\n  function shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n  //Function to remove duplicates from arrays\n  function onlyUnique(value, index, self) {\n    return self.indexOf(value) === index;\n  }\n\n  function updateScale() {\n    var max = -1;\n    switch (filter) {\n      case \"artists\":\n        max = maxartists;\n        for (let i = 0; i < 5; i++) {\n          mydomain[i] = Math.pow(Math.E, (Math.log(max) / 6) * (i + 1));\n        }\n        mydomain = [0, 1, mydomain[0], mydomain[1], mydomain[2], mydomain[3], mydomain[4]];\n        break;\n      case \"scrobbles\":\n        max = maxplaycount;\n        for (let i = 0; i < 7; i++) {\n          mydomain[i] = Math.pow(Math.E, (Math.log(max) / 7) * (i + 1))\n        }\n        mydomain = [0, 1, mydomain[1], mydomain[2], mydomain[3], mydomain[4], mydomain[5]];\n        break;\n    };\n\n\n    color = d3.scale.threshold()\n      .domain(mydomain)\n      .range(colorArray);\n  };\n\n  function updateLegend() {\n    //Remove decimals from domain\n    var x = 0;\n    var len = mydomain.length\n    while (x < len) {\n      mydomain[x] = Math.ceil(mydomain[x]);\n      x++;\n    };\n\n    //Array of text\n    var legend_labels = [numbersWithSpace(mydomain[0]) + \"\", mydomain[1] + \"-\" + (mydomain[2] - 1), mydomain[2] + \"-\" + (mydomain[3] - 1), mydomain[3] + \"-\" + (mydomain[4] - 1), mydomain[4] + \"-\" + numbersWithSpace((mydomain[5] - 1)), numbersWithSpace(mydomain[5]) + \"-\" + numbersWithSpace((mydomain[6] - 1)), \"> \" + numbersWithSpace(mydomain[6])];\n\n    //Create Legend\n    svg.select(\"g#legend\").selectAll(\"g.legend\").remove(); // need to remove for theme changing :(\n    legend = svg.select(\"g#legend\").selectAll(\"g.legend\")\n      .data(mydomain);\n\n    //Color box sizes\n    var ls_w = 20,\n      ls_h = 20;\n    var x = width * 0.03;\n    var y = height * 0.03;\n\n    // Add legend filter text\n    var text1 = svg.select(\"#filter-text\")\n      .attr(\"x\", x)\n      .attr(\"y\", height - y - mydomain.length * ls_h - 1.5 * ls_h)\n      .text(\"Number of \");\n    var text2 = svg.select(\"#filter\")\n      .attr(\"x\", x + text1[0][0].getComputedTextLength() + 5)\n      .attr(\"y\", height - y - mydomain.length * ls_h - 1.5 * ls_h)\n      .text(filter);\n    text2.on(\"click\", function() {\n      // Toggle filter method\n      filter = (filter === \"artists\" ? \"scrobbles\" : \"artists\");\n      redraw();\n    });\n\n    var noCountryArtists = d3.select(\".no-countries\")\n      .style(\"bottom\", (y + mydomain.length * ls_h + 1.5 * ls_h + 30) + \"px\"); // <<< magic numbers broo\n\n    var enter = legend.enter()\n      .append(\"g\")\n      .attr(\"class\", \"legend\");\n\n    enter.append(\"rect\")\n      .attr(\"x\", x)\n      .attr(\"y\", function(d, i) {\n        return height - (i * ls_h) - 2 * ls_h - y;\n      })\n      .attr(\"width\", ls_w)\n      .attr(\"height\", ls_h)\n      .style(\"fill\", function(d) {\n        return color(d);\n      });\n    enter.append(\"text\")\n      .attr(\"x\", x + 30)\n      .attr(\"y\", function(d, i) {\n        return height - (i * ls_h) - ls_h - 4 - y;\n      });\n\n    legend.selectAll(\"text\").data(mydomain)\n      .text(function(d, _, i) {\n        return legend_labels[i];\n      });\n  }\n  //Variables for color legend\n\n  var tooltip = d3.select(\"#map-container\").append(\"div\").attr(\"class\",\n    \"tooltip hidden\").attr(\"aria-hidden\", \"true\");\n\n  var infoContainer = d3.select(\"main\").append(\"div\")\n  .attr(\"class\",\"infoContainer hidden\")\n  .attr(\"id\", \"infoContainer\")\n  .attr(\"role\", \"region\")\n  .attr(\"aria-labelledby\", \"music-from cname-heading\")\n\n    var cnameDiv = d3.select(\"#infoContainer\").append(\"div\").attr(\"class\",\n  \"cnameDiv\").attr(\"id\", \"cname\");\n  \n    var artistContainer = d3.select(\"#infoContainer\").append(\"div\").attr(\"class\",\n    \"artistContainer\").attr(\"id\", \"artistContainer\");\n\n\n  var detailsDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\n    \"detailsDiv\").attr(\"id\", \"details\");\n\n  var recoDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\n    \"recoDiv\").attr(\"id\", \"recommendations\");\n\n  var artistSummaryDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\n    \"artistSummaryDiv\").attr(\"id\", \"summary\");\n\n  var closeButton;\n\n  var offsetL;\n  var offsetT;\n\n  //---------------------- Color preferences -------------//\n  var themes = {\n    blue_black: [\"#03020D\", \"#140E1F\", \"#2A075A\", \"#321C78\", \"#362688\", \"#3E3CA7\", \"#4651C5\", \"#5371F4\"],\n    green_black: [\"#03020D\", \"#08120C\", \"#032F30\", \"#064137\", \"#0E6745\", \"#158C54\", \"#1CB162\", \"#28EA78\"],\n    pink_black: [\"#03020D\", \"#1F0310\", \"#4B0627\", \"#5C1138\", \"#7E285C\", \"#A13F80\", \"#C355A4\", \"#F778DA\"],\n    pink_white: [\"#feebe2\", \"#feebe2\", \"#fcc5c0\", \"#fa9fb5\", \"#f768a1\", \"#dd3497\", \"#ae017e\", \"#7a0177\"],\n    green_white: [\"#ece2f0\", \"#F6EBFA\", \"#ccece6\", \"#99d8c9\", \"#66c2a4\", \"#41ae76\", \"#238b45\", \"#006d2c\"],\n    red_white: [\"#F0F0D8\", \"#F0F0D8\", \"#feb24c\", \"#fd8d3c\", \"#fc4e2a\", \"#e31a1c\", \"#bd0026\", \"#800026\"],\n  };\n\n  let nextTheme = window.nextTheme = function(toTheme) {\n    // Go to next theme\n    var themeList = d3.keys(themes);\n    theme = toTheme || themeList[(themeList.indexOf(theme) + 1) % themeList.length];\n    colorArray = themes[theme];\n\n    // Change body class\n    let bodyClass = [\"blue_black\", \"green_black\", \"pink_black\"].includes(theme) ? \"dark\" : \"light\";\n    bodyClass += \" \" + theme;\n    d3.select(document.body).attr(\"class\", bodyClass);\n\n    // Save :)\n    window.localStorage.theme = theme;\n\n    // Redraw map :)\n    if (topo) redraw();\n\n    // Annunce to screen readers\n    announcer.announce(`Theme changed to ${theme}`);\n  }\n  map.nextTheme = nextTheme;\n\n  nextTheme(theme);\n  updateScale();\n  updateDimensions();\n  setup(width, height);\n  keyboardMode.init(zoom, move, width, height, MAX_ZOOM);\n\n  function setup(width, height) {\n    projection = d3.geo.naturalEarth()\n      .translate([(width / 2), (height / 2) + height * 0.08])\n      .scale(width / 1.7 / Math.PI);\n\n    path = d3.geo.path().projection(projection);\n    \n    // Export path and projection for use in keyboard-mode.js\n    map.path = path;\n    map.projection = projection;\n\n    svg = d3.select(\"#map-container\")\n      .attr(\"role\", \"application\")\n      .append(\"svg\")\n      .attr(\"role\", \"img\")\n      .attr(\"tabindex\", \"0\")\n      .attr(\"aria-labelledby\", \"map-label\")\n      // .attr(\"aria-describedby\", \"map-hint\")\n      .attr(\"id\", \"map-svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .style(\"margin-left\", document.getElementById(\"map-container\").offsetWidth / 2 - width / 2)\n      .call(zoom)\n      .on(\"click\", click)\n      .append(\"g\");\n\n    g = svg.append(\"g\");\n    svg.append(\"g\").attr(\"id\", \"legend\")\n    svg.append(\"text\").attr({\n      id: \"filter-text\",\n      class: \"legend\"\n    });\n    svg.append(\"text\").attr({\n      id: \"filter\",\n      class: \"legend\"\n    });\n\n    map.zoom = zoom; // Export the zoom behavior\n  }\n\n  //Load country aliases and names\n  api.getCountriesData().then(countries => (map.countryNames = countryNames = countries));\n  \n  //Load map\n  d3.json(\"assets/data/world-50m.json\", function(error, world) {\n\n    var countries = topojson.feature(world, world.objects.countries).features;\n\n    topo = countries;\n    draw(topo, true);\n\n  });\n\n  function draw(topo, redrawMap) {\n    var country = g.selectAll(\".country\").data(topo);\n\n    var progress = d3.select(\"#progress-bar\").style({\n      \"height\": updateProgressBar() * 100 + \"%\",\n      \"background-color\": colorArray[6]\n    });\n    d3.select(\"#countryCount\").style({\n      \"background-color\": colorArray[1],\n      \"border-color\": colorArray[6]\n    })\n    //Show progressbar text on mouse-over\n    .on(\"mousemove\", function() {\n      d3.select(\"#progress-text\")\n        .transition().duration(prefersReducedMotion ? 0 : 150).style(\"opacity\", 0.9);\n    })\n      .on(\"mouseout\", function() {\n        d3.select(\"#progress-text\").transition().duration(prefersReducedMotion ? 0 : 150).style(\"opacity\", 0);\n      });\n    d3.select(\"#progress-text\").html(\"Scrobbled from \" + countryScore + \"/210 countries\").attr(\"aria-hidden\", \"true\");\n\n    //Draw countries\n    if (redrawMap) {\n      country.enter().insert(\"path\")\n        .attr(\"class\", \"country\")\n        .attr(\"d\", path)\n        .attr(\"id\", function(d, i) {\n          return `c${d.id}`;\n        })\n        .attr(\"title\", function(d, i) {\n          return d.properties.name;\n        })\n        .attr(\"data-center-x\", function(d, i) {\n          return getCountryCenter(d).x;\n        })\n        .attr(\"data-center-y\", function(d, i) {\n          return getCountryCenter(d).y;\n        })\n        .style(\"fill\", function() {\n          return color(0);\n        })\n        .style(\"transform-origin\", function (d) {\n          const center = getCountryCenter(d);\n          return `${-center.x}px ${-center.y}px`;\n        });\n    }\n    //Color countries\n    country.transition().style(\"fill\", function(d) {\n      switch (filter) {\n        case \"artists\":\n          return countryCount[d.id] ? color(countryCount[d.id].length) :\n            color(0);\n          //break;\n        case \"scrobbles\":\n          return color(getCountryPlaycount(d));\n      }\n    })\n\n    //offsets for tooltips\n    offsetL = document.getElementById('map-container').offsetLeft;\n    offsetT = document.getElementById('map-container').offsetTop;\n\n    //tooltips\n    country\n      .on(\"mousemove\", function(d, i) {\n        var name;\n        var tag;\n        countryNames.forEach(function(e, i) {\n          if (e.id === d.id) {\n            name = e.name;\n            tag = e.tag;\n          };\n        })\n        var mouse = d3.mouse(svg.node()).map(function(d) {\n          return parseInt(d);\n        });\n\n        tooltip.classed(\"hidden\", false)\n          .attr(\"style\", \"left:\" + (mouse[0] + offsetL + 20) + \"px;top:\" + (\n            mouse[1] +\n            offsetT + 10) + \"px\")\n          .html(name + (countryCount[d.id] ? \"<br>\" + countryCount[d.id].length + \" artists, \" + numbersWithSpace(getCountryPlaycount(d)) + \" scrobbles\" : \"\"));\n      })\n      .on(\"mouseout\", function(d, i) {\n        tooltip.classed(\"hidden\", true);\n      })\n      //Show div with top 10 artists for country when clicked\n      .on(\"click\", function(d, i) {\n        var name;\n        var tag;\n        var id;\n\n        clicked(d);\n\n        countryNames.forEach(function(e, i) {\n          if (e.id === d.id) {\n            name = e.name;\n            tag = e.tag;\n            id = d.id;\n          };\n        })\n        var mouse = d3.mouse(svg.node()).map(function(d) {\n          return parseInt(d);\n        });\n\n        closeButton\n          .on(\"click\", function(d, i) {\n            removeArtistDiv();\n            // zoom out map, fulhack\n            clicked(centered);\n            // Restore focus to the img\n            d3.select('#map-svg').node().focus();\n          }) //\"stäng\" onclick slutar\n      }) // on click slutar\n\n  }\n\n  /*-------redraw----*/\n  //den kallas varje gång datan uppdateras. redrawMap är en boolean\n  function redraw(redrawMap) {\n    updateDimensions();\n\n    if (redrawMap) {\n      d3.select('#map-svg').remove();\n      setup(width, height);\n    }\n\n    maxartists = d3.max(d3.keys(countryCount), function(cname) {\n      return countryCount[cname].length;\n    });\n    maxplaycount = d3.max(d3.keys(countryCount), function(cname) {\n      return getCountryPlaycount({\n        id: cname\n      });\n    })\n    updateScale();\n    updateLegend();\n\n    draw(topo, redrawMap);\n  }\n\n\n  /**\n   * Moves the map to the specified location or based on the current zoom event\n   * @param  {Array} tr      Optional: Translation tuple [x, y]\n   * @param  {Number} sc      Optional: Scale factor\n   * @param  {Boolean} animate Optional: Decides whether to animate the map movement\n   * @param  {Boolean} withKeyboard If the move was initiated by the keyboard\n   */\n  function move(tr, sc, animate, withKeyboard) {\n    // Check if we should activate keyboard mode\n    if (sc >= MIN_ZOOM_LEVEL_FOR_KEYBOARD_MODE) {\n      // Pass the zoom object to updateVisibleCountries\n      keyboardMode.updateVisibleCountries(zoom);\n    } else {\n      keyboardMode.cleanup();\n    }\n    \n    var t = tr || (d3.event ? d3.event.translate : false) || zoom.translate();\n    var s = sc || (d3.event ? d3.event.scale : false) || zoom.scale();\n\n    // If move was not initiated by clicking on a country, deselect the selected country\n    if (!tr && !sc && centered) {\n      highlightCountry(false);\n      removeArtistDiv();\n      centered = null;\n    }\n\n    var zscale = s;\n    var h = height / 4;\n\n    t[0] = Math.min(\n      (width / height) * (s - 1),\n      Math.max((width * 1.2) * (1 - s), t[0])\n    );\n\n    t[1] = Math.min(\n      h * (s - 1) + h * s,\n      Math.max(height * (1 - s) - h * s, t[1])\n    );\n\n    zoom.translate(t);\n    zoom.scale(s);\n\n    if (animate) {\n      g.transition().duration(prefersReducedMotion ? 0 : 950).attr(\"transform\", \"translate(\" + t + \")scale(\" + s + \")\");\n\n    } else {\n      g.attr(\"transform\", \"translate(\" + t + \")scale(\" + s + \")\");\n    }\n\n    //adjust the country hover stroke width based on zoom level\n    d3.selectAll(\".country\").style(\"stroke-width\", 1.5 / s);\n\n    window.triggerAuditoryFeedback();\n  }\n  map.move = move;\n\n  var throttleTimer;\n\n  function throttle() {\n    window.clearTimeout(throttleTimer);\n    throttleTimer = window.setTimeout(function() {\n      redraw(true);\n      move([0, 0], 1); // Reset position\n    }, 200);\n  }\n\n\n  //geo translation on mouse click in map\n  function click() {\n    var latlon = projection.invert(d3.mouse(this));\n    // console.log(latlon);\n    //console.log(countryCount);\n  }\n\n  function showArtists(pageNumber, itemsPerPage) {\n    const start = (pageNumber - 1) * itemsPerPage;\n    const end = start + itemsPerPage;\n    const pageItems = artists.slice(start, end);\n\n    // Clear the details section\n    d3.selectAll(\".artist-li\").remove();\n\n    // Append the artists to the details section\n    pageItems.forEach(artist => {\n      var artistDiv = d3.select(\"#top-artist-list\")\n      .append(\"li\")\n        .attr(\"class\", \"artist-li\")\n      .append(\"button\")\n        .attr({\n          \"class\": `scrobbled artist-div lowlight`,\n          \"data-artist\": artist.artist\n        })\n        .on(\"click\", function() {\n          // Lowlight not selected artists\n          d3.selectAll(\".artist-div\").classed({\n            \"lowlight\": true,\n            \"highlight\": false\n          });\n          // Highlight selected artist\n          d3.select(this).classed({\n            \"highlight\": true,\n            \"lowlight\": false\n          });\n          d3.selectAll(\".artist-div\").attr(\"aria-pressed\", \"false\");\n          d3.select(this).attr(\"aria-pressed\", \"true\");\n\n          makeSummaryDiv(d3.select(this).attr(\"data-artist\"), []);\n        });\n      \n      var artistLink = artistDiv.append(\"div\").style(\"display\", \"block\")\n      artistLink.append(\"div\")\n        .attr(\"class\", \"artist-image image-div\");\n\n      var playCountDiv = artistDiv.append(\"div\").attr(\"class\", \"play-count-div\");\n\n      playCountDiv.append(\"p\")\n        .html(\"<strong>\" + artist.artist + \"</strong><br>\" + artist.playcount + \" scrobbles\")\n        .attr(\"class\", \"details-p\");\n    });\n\n    // Update the state of the navigation buttons\n    d3.select(\".artist-control.left\").attr(\"disabled\", currentPage === 1 ? \"disabled\" : null);\n    d3.select(\".artist-control.right\").attr(\"disabled\", currentPage === Math.ceil(artists.length / itemsPerPage) ? \"disabled\" : null);\n}\n\n  function showNextFive() {\n      if (currentPage < artists.length / itemsPerPage) {\n          currentPage++;\n          showArtists(currentPage, itemsPerPage);\n          // Give feedback to screen readers\n          announcer.announce(\"Showing next five artists\", \"polite\");\n          //Send event to google analytics\n          ga('send', {\n            hitType: 'event',\n            eventCategory: 'Artist viewer',\n            eventAction: 'Next five',\n            eventLabel: 'test'\n          });\n      }\n  }\n\n  function showPreviousFive() {\n      if (currentPage > 1) {\n          currentPage--;\n          showArtists(currentPage, itemsPerPage);\n          // Give feedback to screen readers\n          announcer.announce(\"Showing previous five artists\", \"polite\");\n          //Trigger GA event\n          ga('send', {\n            hitType: 'event',\n            eventCategory: 'Artist viewer',\n            eventAction: 'Previous five',\n            eventLabel: 'test'\n          });\n      }\n  }\n\n  function searchArtist(name) {\n    const index = artists.findIndex(artist => artist.artist.toLowerCase() === name.toLowerCase());\n\n    if (index !== -1) {\n        currentPage = Math.floor(index / itemsPerPage) + 1;\n        showArtists(currentPage, itemsPerPage);\n        setTimeout(() => {\n          const artist = document.querySelector(`[data-artist=\"${name}\"]`);\n          artist?.click();\n          setTimeout(() => {\n            artist?.focus();\n          }, 50); \n        }, 250);\n    }\n  }\n\n  /*----------------------------makeArtistDiv------------------------------------------------*/\n  //Skapar \"details-on-demand\"-divarna.\n  // d är det land vi klickat på\n  // artistName är ett artistnamn vi vill zooma in på\n  function makeArtistDiv(d) {\n\n    countryDivIsOpen = true;\n    currentCountry = d;\n\n    //lägga till namn till detailseDiv\n    var name;\n    var tag;\n    var nameTags;\n    var tagTags;\n    var recoms;\n    //var id;\n    countryNames.forEach(function(e, i) {\n      if (e.id === d.id) {\n        name = e.name;\n        tag = e.tag;\n\n        nameTags = (e.names || [e.name]).map(n => \"<span class=\\\"demonym\\\">\" + n + \"</span>\").join(\", \");\n        tagTags = (e.tags || [e.tag]).map(t => \"<span class=\\\"demonym\\\">\" + t + \"</span>\").join(\", \");\n      };\n    })\n    d3.select(\"#recommendations\").html(\"\");\n    //Show country name and info div on left hand side\n    infoContainer\n      .classed(\"hidden\", false)\n      .transition()\n      .style(\"opacity\", 1)\n      .duration(prefersReducedMotion ? 0 : 750);\n\n    //Hide progressbar when showing\n    d3.selectAll(\"#countryCount, .on-map-view\")\n      .classed(\"hidden\", true);\n\n    closeButton = d3.select('#infoContainer').append(\"button\").attr(\"type\", \"button\").attr(\"aria-label\", `Close ${name}`).attr(\"class\", \"close-button fa fa-xmark\");\n\n    //Populate country information div\n    cnameDiv\n      .append(\"div\").attr(\"class\", \"cnameContainer\").attr(\"id\", \"cnameCont\")\n      .append(\"h1\").html(name)\n      .attr(\"id\", \"cname-heading\");\n    d3.select(\"#cnameCont\").append(\"strong\")\n      .html(function() {\n        if (countryCount[d.id])\n          return numbersWithSpace(countryCount[d.id].length) + \" artists, \" + numbersWithSpace(getCountryPlaycount(d)) + \" scrobbles\"\n        else return \"No artists yet - Find new here<span aria-hidden> -></span>\"\n      })\n\n    let pl = countryPlaylists.find(c => c.name === name);\n    let linkdiv = d3.select(\"#cnameCont\")\n      .append(\"div\").attr(\"class\", \"playlist-link\")\n\n   let lastFmLink =  linkdiv.append(\"a\").attr(\"href\", \"https://last.fm/tag/\" + name)\n   lastFmLink.append(\"img\").attr(\"alt\", \"Last.fm tag\").attr(\"class\", \"playlist-link__img\").attr(\"src\", \"https://www.shareicon.net/data/32x32/2016/05/24/769923_logo_512x512.png\").attr(\"style\",\"background:none\");\n   lastFmLink.append(\"span\").html(\"#\"+name);\n\n    if (pl) {\n\n      linkdiv.append(\"span\").attr(\"class\",\"divider\").html(\"/\").attr(\"aria-hidden\", \"true\");\n\n      let a = linkdiv.append(\"a\").attr(\"href\", pl.uri).attr(\"target\", \"_self\");\n\n      a.append(\"img\")\n        .attr(\"alt\", \"Spotify playlist\")\n        .attr(\"class\", \"playlist-link__img\")\n        .attr(\"src\", \"https://upload.wikimedia.org/wikipedia/commons/1/19/Spotify_logo_without_text.svg\");\n\n      a.append(\"span\").html(pl.playlistName);\n\n    }\n\n    if (countryCount[d.id]) { //Om landet vi klickat på har lyssnade artister.\n\n      d3.select(\"#details\").append(\"h2\")\n        .html(\"<span>Your top artists tagged with </span>\" + nameTags + \"<span> or </span>\" + tagTags + \"<span>: </span>\")\n        .attr(\"class\", \"topartists-desc\").attr(\"id\", \"top-artist-list-heading\");\n      \n        currentPage = 1;\n        itemsPerPage = 5;\n        artists = countryCount[d.id]; // Your artists data goes here\n        d3.select(\"#details\").append(\"div\").attr(\"id\", \"top-artist-list-container\");\n\n        d3.select(\"#top-artist-list-container\").append(\"ol\").attr(\"id\", \"top-artist-list\").attr(\"aria-labelledby\", \"top-artist-list-heading\");\n      \n        d3.select(\"#top-artist-list-container\").append(\"button\").attr(\"class\", \"fa artist-control left fa-angle-left\").attr(\"aria-label\", \"Previous five artists\");\n        d3.select(\"#top-artist-list-container\").append(\"button\").attr(\"class\", \"fa artist-control right fa-angle-right\").attr(\"aria-label\", \"Next five artists\");\n        \n        // Event listeners for the navigation buttons\n        d3.select(\".artist-control.left\").on(\"click\", showPreviousFive);\n        d3.select(\".artist-control.right\").on(\"click\", showNextFive);\n        \n        \n        // Initial display of artists\n        showArtists(currentPage, itemsPerPage);\n\n\n    } else { //Om landet vi klickat på inte har några lyssnade artister...\n      // console.log(\"landet har inga lyssnade artister\");\n    }\n    //\"Recommended\"-heading\n    d3.select(\"#recommendations\")\n    .append(\"h2\")\n      .html(\"You may like: \")\n      .attr(\"id\", \"recom-heading\")\n      .attr(\"class\", \"topartists-desc\");\n    d3.select(\"#recommendations\")\n      .append(\"ul\")\n        .attr(\"id\", \"recom-list\")\n        .attr(\"aria-labelledby\", \"recom-heading\")\n        .classed(\"hidden\", false);\n\n    // show loading message\n    var recLoadingDiv = d3.select(\"#recommendations\").append(\"div\").attr(\"class\", \"recLoadingDiv\");\n    var recLoadingMessage = recLoadingDiv.append(\"span\")\n      .attr(\"id\", \"rec-loading\")\n      .html(\"Looking for artists tagged #\" + tag);\n    recLoadingDiv.append(\"img\")\n      .attr({\n        id: \"rec-loading-img\",\n        src: \"assets/img/loader_horizontal.gif\",\n        alt: \"Loading...\"\n      })\n      .style({\n        display: \"inline-block\",\n        margin: \"0 5px\"\n      })\n    recLoadingDiv.append(\"span\").attr(\"id\", \"rec-loading-current\");\n\n\n\n    //Get list of recommendations for country based on tags!\n    api.getRecommendations(tag, function(taglist) {\n      // Return if this callback is from an old (not active) country\n      if (!centered || centered.id !== d.id) {\n        return;\n      }\n      // Show loading message\n      recLoadingMessage.html(\"Looking for artists tagged #\" + name)\n\n      //Get list of recommendations for country based on country name!\n      api.getRecommendations(name, function(namelist) {\n        // Return if this callback is from an old (not active) country\n        if (!centered || centered.id !== d.id) {\n          return;\n        }\n        //Show loading message\n        recLoadingMessage.html(\"Loading images for recommended artists\");\n\n        //Join the two lists\n        var list = taglist.concat(namelist);\n\n        //Removing duplicates from the list!\n        var arr = {};\n        for (let i = 0; i < list.length; i++)\n          arr[list[i]['name']] = list[i];\n\n        list = new Array();\n        for (let key in arr)\n          list.push(arr[key]);\n\n        list.sort(function(a, b) {\n          return b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\n        });\n        //Get the first 20 artists\n        list = list.slice(0, 20);\n        //Randomize list\n        list = shuffleArray(list);\n\n        if (list.length === 0) { // Found no recommendations\n          recLoadingDiv.remove();\n          d3.select(\"#recommendations\").append(\"p\")\n            .html(\"We couldn't find any good \" + tag + \" recommendations for you :-( \");\n          d3.select(\"#recommendations\").append(\"a\").attr({\n            href: \"https://www.last.fm/tag/\" + name,\n            target: \"_blank\",\n          }).html(\"Try searching last.fm yourself!\");\n        }\n\n        for (let i = 0; i < Math.min(list.length, 5); i++) {\n          // Return if this callback is from an old (not active) country\n          if (centered.id !== d.id) {\n            return;\n          }\n\n          var artisturl, artistimg, artistname;\n\n          //Get url and images for recommended artists!\n          api.getArtistInfo(list[i].name, function(art) {\n            recLoadingDiv.remove();\n            var artisturl = art[0].url;\n            var artistimg = art[0].image;\n            var artistname = art[0].name;\n\n\n            var recoArtistDiv = d3.select(\"#recom-list\")\n              .append(\"li\")\n              .insert(\"button\", \"#summaryText\")\n              .attr(\"type\", \"button\")\n              .attr(\"class\", \"artist-div lowlight\");\n            var recoArtistLink = recoArtistDiv.append(\"div\").style(\"display\", \"block\")\n              //.attr(\"href\", artisturl)\n              //.attr(\"target\", \"_blank\");\n            recoArtistLink.append(\"div\")\n              .attr(\"class\", \"image-div\")\n              .style(\"background-image\", \"url(\" + \"'\" + artistimg + \"'\" + \")\")\n\n            var recoArtistInfoDiv = recoArtistDiv.append(\"div\").attr(\"class\", \"recoArtistInfoDiv\");\n\n            recoArtistInfoDiv.append(\"p\")\n              .html(artistname)\n              .attr(\"class\", \"details-p\");\n\n            recoArtistDiv.on(\"click\", function() {\n              d3.selectAll(\".artist-div\").classed({ // Lowlight not selected artists\n                \"lowlight\": true,\n                \"highlight\": false\n              });\n\n              d3.select(this).classed({ // Highlight selected artist\n                \"highlight\": true,\n                \"lowlight\": false\n              });\n              makeSummaryDiv(artistname);\n            });\n\n          })\n        }\n\n\n      })\n    });\n\n  }\n\n  function removeArtistDiv() {\n    countryDivIsOpen = false;\n    currentCountry = null;\n    api.cancelRecommendationRequests();\n\n    infoContainer.transition().style(\"opacity\", 0).duration(prefersReducedMotion ? 0 : 1000);\n\n    infoContainer.classed(\"hidden\", true);\n\n    // Restore toolbar\n    d3.selectAll(\"#countryCount, .on-map-view\")\n      .classed(\"hidden\", false);\n\n    d3.select(\"#details\").html(\"\");\n    d3.select(\"#recommendations\").html(\"\");\n    d3.select(\"#cname\").html(\"\");\n    d3.selectAll(\".artist-control\").remove();\n    d3.select(\".close-button\").remove();\n    d3.selectAll(\"#top-artist-list\").remove();\n  }\n\n  function makeSummaryDiv(artistname) {\n    var usertaglist = [];\n    var artisttaglist = [];\n\n    d3.select(\"#summaryText\").remove();\n    var summaryText = d3.select(\"#recommendations\").append(\"div\").attr(\"class\", \"summaryText\").attr(\"id\", \"summaryText\");\n    d3.select(\"#summaryText\").append(\"span\").html(\"Loading description of \" + artistname);\n    d3.select(\"#summaryText\").append(\"img\")\n      .attr({\n        id: \"sum-loading-img\",\n        src: \"assets/img/loader_horizontal.gif\"\n      })\n      .style({\n        display: \"inline-block\",\n        margin: \"0 5px\"\n      });\n\n    //Get artist info from Lastfm\n    api.getArtistInfo(artistname, function(art) {\n      var paragraphs = art[0].description.split(/(\\n)+/g);\n      //var text = text.substring(6);\n      //Get artist's top tags\n      artisttaglist = art[0].tags;\n      //Create list of user tags\n\n      //Make list of artist tags which are also user's top tags:\n      for (let y = 0; y < 15; y++) {\n        for (let z = 0; z < artisttaglist.length; z++) {\n          if (artisttaglist[z] === USER_TAGS[y].tag) {\n            usertaglist.push(USER_TAGS[y].tag)\n          }\n        }\n      }\n\n      //Create combined tag list and remove duplicates\n      var taglist = usertaglist.concat(artisttaglist);\n      taglist = taglist.filter(function(elem, pos) {\n        return taglist.indexOf(elem) == pos;\n      })\n      // Remove loading text\n      d3.select(\"#summaryText\").html(\"\");\n      //Create containing div\n      // Calculate height of infotextbox (so the scrollbar is inside the box and not on body)\n      var h = window.innerHeight * 0.90 - document.getElementById(\"artistContainer\").offsetHeight;\n      summaryText.style(\"max-height\", h + \"px\");\n\n      summaryText.append(\"h2\").html(artistname).attr(\"id\", \"artistname\");\n\n      const tags = summaryText.append(\"ul\").attr(\"class\", \"taglist\").attr(\"aria-labelledby\", \"tags-for artistname\");\n\n      //Show top 7 tags\n      for (let i = 0; i < Math.min(taglist.length, 6); i++) {\n        var tagdiv = tags.append(\"li\").attr(\"class\", \"tagdiv\").html(taglist[i]);\n        //Mark all user tags\n        for (let p = 0; p < usertaglist.length; p++) {\n          if (taglist[i] === usertaglist[p])\n            tagdiv.classed(\"usertag\", true);\n        }\n      }\n      //Display artist summary\n      paragraphs.forEach(function(paragraph) {\n        summaryText.append(\"p\").html(paragraph || \"No description available - <a href='https://last.fm/music/\" + artistname + \"' target='_blank'>check out last.fm.</a>\");\n      });\n\n    })\n\n  }\n\n  /**\n   * Toggles highlight of a specified country\n   * @param  {Boolean} highlight      Specifies whether to highlight or \"dehighlight\"\n   * @param  {Object} countryElement The country element to highlight (needs to have an \"id\" property)\n   */\n  function highlightCountry(highlight, countryElement) {\n    d3.selectAll(\".country\").classed(\"highlighted\", false);\n\n    if (highlight) {\n      // Fade out all other countries\n      d3.selectAll(\".country\").transition()\n        .style(\"opacity\", function() {\n          return (this.id === `c${countryElement.id}` ? 1.0 : 0.3);\n        })\n\n      var ce = d3.select(document.getElementById(`c${countryElement.id}`));\n      ce.classed(\"highlighted\", true);\n    } else {\n      // Fade in all countries\n      d3.selectAll(\".country\").transition()\n        .style(\"opacity\", 1.0)\n    }\n}\n\n\n  function clicked(d) { //d är det en har klickat på\n\n    keyboardMode.cleanup();\n\n    var x, y, k;\n    //bounding box for clicked country\n    var b = path.bounds(d);\n\n    getCountryPlaycount(d);\n\n    //Set scale\n    var modscaleX = (b[1][0] - b[0][0]);\n    var modscaleY = (b[1][1] - b[0][1]);\n\n    //Dom't zoom too far with small countries!\n    if (modscaleX < 80)\n      modscaleX = 80;\n\n    //Landet är inte centrerat redan\n    if (d && centered !== d) {\n      centered = d;\n      removeArtistDiv();\n      makeArtistDiv(d);\n      highlightCountry(true, d);\n\n      announcer.announce(`Opened ${countryNames.find(c => c.id === d.id).name}`, \"assertive\");\n\n      //Special rules for special countries:\n      switch (d.id) {\n        case 840: //US\n          k = 3;\n          x = -(b[1][0] + b[0][0]) / 3;\n          y = -(b[1][1] + b[0][1]) / 1.7;\n          break;\n        case 250: //France\n          k = 7.012;\n          x = -(b[1][0] + b[0][0]) / 1.85;\n          y = -(b[1][1] + b[0][1]) / 3;\n          break;\n        case 528: //Netherlands\n          k = 12.0124;\n          x = -(b[1][0] + b[0][0]) / 1.56;\n          y = -(b[1][1] + b[0][1]) / 2.7;\n          break;\n        case 643: //Russia\n          k = 1.9;\n          x = -(b[1][0] + b[0][0]) / 1.25;\n          y = -(b[1][1] + b[0][1]) / 2;\n          break;\n        case 554: //New Zeeland\n          k = 4;\n          x = -(b[1][0] + b[0][0]) / 0.90;\n          y = -(b[1][1] + b[0][1]) / 1.8;\n          break;\n        case 36: //Australia\n          k = 3.3;\n          x = -(b[1][0] + b[0][0]) / 1.8;\n          y = -(b[1][1] + b[0][1]) / 2.1;\n          break;\n\n        default: //Everybody else\n          k = .55 / Math.max(modscaleX / width, modscaleY / height);\n          x = -(b[1][0] + b[0][0]) / 2 - (width / k) / 4;\n          y = -(b[1][1] + b[0][1]) / 2;\n          break;\n      }\n\n      //Landet är redan centrerat\n    } else {\n      announcer.announce(`Left ${countryNames.find(c => c.id === d.id).name}`, \"assertive\");\n      x = -width / 2;\n      y = -height / 2 - height * 0.08;\n      k = 1\n      removeArtistDiv();\n      highlightCountry(false);\n      centered = null;\n      // Refocus the map svg (mainly for screen readers)\n      document.getElementById(\"map-svg\").focus( { \n        preventScroll: true\n       } );\n\n    }\n\n    var pt = projection.translate();\n    // Tell map to move with animation\n    // Basically does the same as before: translate to middle,\n    // then to x and y with respect to scale\n    move([pt[0] + x * k, pt[1] + y * k], k, !prefersReducedMotion);\n\n  }\n\nfunction dismissCenteredCountry() {\n  removeArtistDiv();\n  highlightCountry(false);\n  centered = null;\n}\n\n// Add this helper function\nfunction getBBoxCenter(bbox) {\n  const [west, south, east, north] = bbox;\n  // For countries that cross the date line, handle the longitude calculation specially\n  const centerLon = west > east ? (west + east + 360) / 2 % 360 : (west + east) / 2;\n  const centerLat = (north + south) / 2;\n  return [centerLon, centerLat];\n}\n\n// Modify the getCountryCenter function\nfunction getCountryCenter(countryTopoData) {\n  // Check if we have a custom bounding box for this country\n  const countryId = countryTopoData.id;\n  if (COUNTRY_BBOX_OVERRIDES && COUNTRY_BBOX_OVERRIDES[countryId]) {\n    // Use the first bounding box for the center (usually the main territory)\n    const overrides = COUNTRY_BBOX_OVERRIDES[countryId];\n    const mainBBox = Array.isArray(overrides[0]) ? overrides[0] : overrides;\n    \n    // Calculate the center of the bounding box\n    const center = getBBoxCenter(mainBBox);\n    \n    // Project the center to screen coordinates\n    const projected = projection(center);\n    return {\n      x: -projected[0],\n      y: -projected[1]\n    };\n  }\n  \n  // Fall back to the existing logic for countries without overrides\n  let x, y;\n  let b = path.bounds(countryTopoData);\n\n  //Special rules for special countries:\n  switch (countryTopoData.id) {\n    case 840: //US\n      x = -(b[1][0] + b[0][0]) / 4;\n      y = -(b[1][1] + b[0][1]) / 1.9;\n      break;\n    case 250: //France\n      x = -(b[1][0] + b[0][0]) / 1.94;\n      y = -(b[1][1] + b[0][1]) / 2.81;\n      break;\n    case 528: //Netherlands\n      x = -(b[1][0] + b[0][0]) / 1.605;\n      y = -(b[1][1] + b[0][1]) / 2.54;\n      break;\n    case 643: //Russia\n      x = -(b[1][0] + b[0][0]) / 1.40;\n      y = -(b[1][1] + b[0][1]) / 2;\n      break;\n    case 554: //New Zeeland\n      x = -(b[1][0] + b[0][0]) / 1.03;\n      y = -(b[1][1] + b[0][1]) / 1.87;\n      break;\n    case 36: //Australia\n      x = -(b[1][0] + b[0][0]) / 2;\n      y = -(b[1][1] + b[0][1]) / 2.1;\n      break;\n\n    default: //Everybody else\n      x = -(b[1][0] + b[0][0]) / 2;\n      y = -(b[1][1] + b[0][1]) / 2;\n      break;\n  }\n\n  return { x, y };\n}\n\n  // Close the country div on escape\n  window.addEventListener('keydown', function(evt) {\n    if ((evt.key === 'Escape' || evt.keyCode === 27) && countryDivIsOpen) {\n      console.log(\"Escape pressed\");\n      removeArtistDiv();\n      // zoom out map, fulhack\n      clicked(centered);\n    }\n  });\n\n  //function to add points and text to the map (used in plotting capitals)\n  function addpoint(lat, lon, text) {\n\n    var gpoint = g.append(\"g\").attr(\"class\", \"gpoint\");\n    var x = projection([lat, lon])[0];\n    var y = projection([lat, lon])[1];\n\n    gpoint.append(\"svg:circle\")\n      .attr(\"cx\", x)\n      .attr(\"cy\", y)\n      .attr(\"class\", \"point\")\n      .attr(\"r\", 1.5);\n\n    //conditional in case a point has no associated text\n    if (text.length > 0) {\n\n      gpoint.append(\"text\")\n        .attr(\"x\", x + 2)\n        .attr(\"y\", y + 2)\n        .attr(\"class\", \"text\")\n        .text(text);\n    }\n\n  }\n\n  function animateCountries(countryDict) {\n    const userPrefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n    var countries = g.selectAll(\".country\").filter(c => !!countryDict[c.id]);\n\n    setTimeout(() => {\n      // bounce - didn't look too good but might be fun to try again\n      // later\n      \n      // countries.transition()\n      // .duration(200)\n      // .style(\"transform\", \"scale(1.1)\")\n      // .delay((_, i) => i * 100)\n      // .transition().duration(150)\n      // .style(\"transform\", \"scale(1)\");\n\n      // fade\n      // Only do the bing bong thing if the user doesn't prefer reduced motion\n      if (!userPrefersReducedMotion) {\n        countries.transition()\n        .duration(200)\n        .style(\"opacity\", \"0.8\")\n        .delay((_, i) => i * 100)\n        .transition().duration(150)\n        .style(\"opacity\", \"1\");\n      }\n      \n    })\n  }\n\n  function putCountryCount(newArtists) {\n    Object.entries(newArtists).forEach(([key, value]) => {\n      countryCount[key] = (countryCount[key] || []).concat(value);\n    });\n\n    countryScore = 0;\n\n    d3.keys(countryCount).forEach(function (id) {\n      countryScore = countryScore + 1;\n    })\n\n    if (topo) redraw();\n\n    window.countryScore = countryScore;\n  }\n\n  /** \"PUBLUC\" FUNCTIONS **/\n  \n  map.addArtists = function (newArtistsByCountry) {\n    putCountryCount(newArtistsByCountry);\n    animateCountries(newArtistsByCountry);\n  }\n\n  map.getCountryCenter = getCountryCenter;\n\n  map.makeSummaryDiv = makeSummaryDiv;\n\n  map.showArtists = showArtists;\n\n  map.searchArtist = searchArtist;\n\n  map.centered = centered;\n\n  map.dismissCenteredCountry = dismissCenteredCountry;\n\n  map.toggleFilter = function() {\n    filter = filter === \"artists\" ? \"scrobbles\" : \"artists\";\n    updateLegend();\n    redraw();\n  }\n\n  // Find the function that handles the zoom/fit behavior, likely something like:\n  function fitToCountry(countryFeature) {\n    if (countryFeature.id && COUNTRY_BBOX_OVERRIDES[countryFeature.id]) {\n      const overrides = COUNTRY_BBOX_OVERRIDES[countryFeature.id];\n      const boxArray = Array.isArray(overrides[0]) ? overrides : [overrides];\n      \n      // Find the overall bounding box that encompasses all boxes\n      const allBounds = boxArray.reduce((acc, bbox) => {\n        const [west, south, east, north] = bbox;\n        return {\n          west: Math.min(acc.west, west),\n          south: Math.min(acc.south, south),\n          east: Math.max(acc.east, east),\n          north: Math.max(acc.north, north)\n        };\n      }, {west: 180, south: 90, east: -180, north: -90});\n      \n      const bounds = [[allBounds.west, allBounds.south], [allBounds.east, allBounds.north]];\n      \n      // Use your existing zoom/fit logic with these bounds\n      const [[x0, y0], [x1, y1]] = bounds;\n      const dx = x1 - x0;\n      const dy = y1 - y0;\n      const x = (x0 + x1) / 2;\n      const y = (y0 + y1) / 2;\n      const scale = Math.max(1, Math.min(8, 0.9 / Math.max(dx / width, dy / height)));\n      \n      // Apply the transform\n      svg.transition()\n        .duration(750)\n        .call(zoom.transform, d3.zoomIdentity\n          .translate(width / 2, height / 2)\n          .scale(scale)\n          .translate(-projection([x, y])[0], -projection([x, y])[1]));\n        \n      return; // Skip the regular bounds calculation\n    }\n    \n    // ... rest of existing fitToCountry code ...\n  }\n\n  function handleKeyboardNavigation(event) {\n    if (!isKeyboardModeEnabled) return;\n    \n    switch(event.key) {\n        case 'ArrowRight':\n        case 'ArrowLeft':\n            // Move focus to next/previous country\n            const countries = getVisibleCountries();\n            const currentIndex = countries.indexOf(currentFocus);\n            const nextIndex = event.key === 'ArrowRight' ? \n                (currentIndex + 1) % countries.length :\n                (currentIndex - 1 + countries.length) % countries.length;\n            setFocus(countries[nextIndex]);\n            break;\n            \n        case 'Enter':\n        case ' ': // Space\n            // Select currently focused country\n            selectCountry(currentFocus);\n            break;\n    }\n  }\n\n  // Update the setupAuditoryFeedbackForMap function to only trigger on keyboard navigation\n  function setupAuditoryFeedbackForMap() {\n    // Remove the automatic triggers on zoom/pan\n    \n    // Only trigger feedback when new data is loaded\n    document.addEventListener(\"artistsLoaded\", function() {\n      if (window.auditoryFeedback) {\n        window.auditoryFeedback.updateFeedback();\n      }\n    });\n    \n    // Create a custom event dispatcher to trigger feedback manually if needed\n    window.triggerAuditoryFeedback = function() {\n      if (window.auditoryFeedback) {\n        window.auditoryFeedback.updateFeedback();\n      }\n    };\n    \n    // Remove the automatic trigger in the move function\n  }\n\n  // Call this after your map is initialized\n  setupAuditoryFeedbackForMap();\n\n  // Add this to the public API section at the bottom of the file\n  map.getColorDomain = function() {\n    return mydomain; // This is the array that defines the color thresholds\n  };\n\n})(window, document)\n"]}