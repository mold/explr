{"version":3,"sources":["aria-announcer.js","auditory-feedback.js","country-list.js","api/lastfm.js","search.js","api/api.js","utils.js","screenshot.js","keyboard-mode.js","no-countries.js","script.js","map.js"],"names":["announcer","LIVEREGION_TIMEOUT_DELAY","liveAnnouncer","debounce","func","wait","timeout","_len","arguments","length","args","Array","_key2","clearTimeout","setTimeout","apply","announce","message","assertiveness","undefined","LiveAnnouncer","clearAnnouncer","clear","destroyAnnouncer","destroy","_classCallCheck","this","node","document","createElement","dataset","Object","assign","style","border","clip","clipPath","height","margin","overflow","padding","position","width","whiteSpace","assertiveLog","createLog","appendChild","politeLog","body","prepend","ariaLive","setAttribute","removeChild","textContent","remove","innerHTML","auditoryFeedback","audioContext","oscillator","gainNode","audioFeedbackEnabled","keyboardNavigationOnly","isPlaying","toneTimeout","toneDuration","lastInteractionWasKeyboard","scheduleToneStop","gain","exponentialRampToValueAtTime","currentTime","stop","toggleAudioFeedback","window","updateFeedback","updateTone","density","frequency","Math","pow","e","createOscillator","createGain","type","value","connect","destination","start","keyboardMode","isActive","totalArtists","data","userName","maxDomain","countries","getCurrentlyVisibleCountries","console","warn","isArray","_typeof","reduce","sum","country","artistCount","script","getCurrentData","location","href","split","forEach","countryId","avgDensity","map","getColorDomain","colorDomain","min","addEventListener","init","initAudioContext","AudioContext","webkitAudioContext","log","removeEventListener","once","key","toLowerCase","repeat","target","tagName","error","isEnabled","setKeyboardOnly","setToneDuration","duration","button","getElementById","dialog","closeBtn","querySelector","continentsDiv","CONTINENTS","getCountryScrobbles","id","countryCountObj","total","values","artistArr","a","playcount","getCountryArtistCount","flat","groupByContinent","result","c","cont","continent","push","currentSort","lastFocusedTabIndex","tabRefs","panelRefs","tablistRef","renderTabs","grouped","selectedIdx","focusTabIndex","className","i","tab","concat","activateTab","handleTabKeydown","idx","newIdx","focus","preventDefault","panel","headingRow","sortContainer","countryList","countriesToShow","onChange","select","hidden","heading","sortLabel","label","opt","option","selected","slice","sort","b","name","localeCompare","nArtists","li","btn","nameSpan","countSpan","nScrobbles","toLocaleString","onclick","close","el","dispatchEvent","Event","scrollDirection","countryNames","showModal","api","lastfm","url","setKeyInfo","success","keyInfo","fails","keyI","keys","k","send","method","options","callback","retries","xhr","gotResponse","aborted","tryGet","tries","cb","avgErrors","avg","arr","bestKeys","_url","_key","filter","d3","json","replace","d","JSON","parse","response","errInfo","errorCode","try","_JSON$parse","bind","abort","typingTimeout","superCount","utils","getCountriesData","promise","Promise","res","rej","csv","err","names","tags","mainName","tag","all","then","_ref","_ref2","_slicedToArray","countryData","hardcodedCountries","splits","_objectSpread","splice","alias","nest","cname","getCountry","artist","hardcodedTagName","responseData2","demonymTag","countryTag","bestTag","toptags","theTroubles","count","some","t","tname","includes","info","getCountries","artists","checkCount","setLoadingStatus","SESSION","total_artists","html","localforage","setItem","STORED_ARTISTS","returnList","returnObject","Date","getTime","getTags","getArtistInfo","artistInfo","data1","tagnamelist","image","description","bio","summary","recommendationRequests","cancelRecommendationRequests","getRecommendations","recommendations","USER_TAGS","userTagObj","rollup","xhr1","tagCounts","topartists","num","xhr2","data2","hasTags","getFriends","screenshot","exportToCSV","list","countryCount","countryName","json2csv","_ref3","_ref4","fields","row","acc","replaceAll","open","encodeURI","getCountryNameFromId","match","find","getNumberOfArtistsForCountry","_ref5","_toConsumableArray","item","hasOwnProperty","search","render","drawCenteredText","obj","ctx","font","fillText","string","w","measureText","y","lineWidth","strokeStyle","strokeText","autoDownload","explrLogo","Image","svg","attr","h","canvas","getContext","backgroundColor","getComputedStyle","textColor","color","insert","fill","selectAll","font-family","font-size","stroke","canvg","XMLSerializer","serializeToString","onload","save","globalAlpha","fillStyle","scoreString","countryScore","titleString","overlay","fillRect","restore","drawImage","src","toDataURL","getElementsByClassName","ariaModal","download","dataurl","click","SEARCH_IS_OPEN","searchButton","filteredCountries","filteredArtists","filteredCountryArtists","noCountryArtists","filteredShortcuts","getAnnouncement","artistText","announcementParts","input","totalArtistLength","shortcutText","countryText","join","initSearch","FOCUSED_RESULT","countriesList","shortcuts","ariaExpanded","onClick","clearExplrCache","reload","nextTheme","toggleFilter","_ref6","searchContainer","searchInputWrapper","classList","add","resultsDiv","placeholder","role","shortcutsWrapper","shortcutsHeading","countriesWrapper","artistsWrapper","shortcutsWithoutStatus","shortcut","ariaLabelledby","searchResultWrapper","shortcutSpan","highlightedName","regex","RegExp","getLoadingStatus","countriesHeading","countrySpan","countryArtistsSpan","stopSearch","artistsHeading","artistWrapper","artistCountryWrapper","srOnlyFrom","artistPlaycount","artistCountryNameSpan","addTagsSpan","searchArtist","artistNameSpan","evt","currentActiveDescendant","currentActiveElement","inputElement","keyCode","removeAttribute","scrollTop","nextResult","nextElementSibling","nextGroup","parentElement","scrollIntoView","behavior","block","previousResult","previousElementSibling","contains","previousGroup","resultsInGroup","querySelectorAll","lastGroup","allGroups","getAttribute","firstVisibleOption","closest","searchButtonClose","preventScroll","getSearchStatus","setSearchStatus","status","MIN_ZOOM_LEVEL_FOR_KEYBOARD_MODE","MAX_COUNTRY_SUGGESTIONS","KEYBOARD_MODE_ACTIVE","NUMBER_POOL","from","_","toString","visibleCountries","keyBuffer","keyBufferTimer","keyboardModeActive","isKeyboardModeEnabled","currentFocus","EXCLUDED_COUNTRY_IDS","countryNumberMap","numberBuffer","numberBufferTimer","NUMBER_BUFFER_TIMEOUT","handleNumberKeyPress","ctrlKey","altKey","shiftKey","metaKey","targetCountryId","targetCountry","svgCountry","cleanup","ga","hitType","eventCategory","eventAction","eventLabel","startsWith","formattedCountries","parseInt","number","isInViewport","element","COUNTRY_BBOX_OVERRIDES","overrides","bbox","isBBoxInViewport","rect","getBoundingClientRect","rectangleLeft","innerWidth","rectangleTop","innerHeight","top","bottom","left","right","_bbox","west","south","east","north","screenCorners","coord","projected","projection","x","minX","p","maxX","max","minY","maxY","scale","call","zoom","translate","transformedMinX","transformedMaxX","transformedMinY","transformedMaxY","displayKeyboardModeMessage","innerMessage","addViewportBoxIndicator","hideKeyboardModeMessage","removeViewportBoxIndicator","indicator","rectangleWidth","rectangleHeight","pointerEvents","zIndex","boxSizing","updateViewportBoxPosition","getPathCenter","path","parseFloat","hasAnnounced","getVisibleCountries","countriesSelection","each","getVisibleCountriesSummary","updateVisibleCountries","assignNumbersToCountries","center","append","text","usedNumbers","Set","has","getAnnouncementText","baseText","audioFeedbackIsEnabled","move","MAX_ZOOM","zoomBehavior","param","s","centered","dismissCenteredCountry","newScale","getStatus","noCountries","listOfArtistsWithNoCountry","saveToStorage","object","sortArtists","announcementIntervalId","CACHED_NO_COUNTRIES","addArtistsWithNoCountry","handleCheckboxChange","_document$querySelect","artistName","checked","artistsState","localStorage","getItem","stringify","parentNode","display","nextCheckbox","updateNoCountriesList","sortedData","noCountryArtistSortMethod","noCountriesListEl","_art","artistState","listItem","property","on","_document$querySelect2","radios","getElementsByName","sortFunction","selectedValue","_step","_iterator","_createForOfIteratorHelper","n","done","radio","f","_step2","_iterator2","event","loadingReady","loadingStatus","STORED_ARTISTS_PROMISE","val","CACHED_NO_COUNTRIES_PROMISE","CACHED_USERS","cached_users","theme","legend","getAllArtists","user","currPage","responseData","confirm","maxPage","totalPages","artistNames","newArtist","newArtistCountries","leaves","artistsFromCountry","addArtists","end","getUserTags","alert","origin","pathname","tagCount","topArtists","forbidden","taglist","lim","nogood","user_tags","random","randomcountrylist","clearInterval","existingAriaLabelledBy","loader","transition","delay","substr","welcomeOverlay","_document$getElementB","innerText","_d3$select","visibility","friends","friendName","updateName","classed","_defineProperty","floor","colorArray","currentPage","itemsPerPage","currentZoom","prefersReducedMotion","matchMedia","matches","840","643","152","218","724","620","250","528","554","242","296","lastInputWasKeyboard","throttleTimer","redraw","topo","g","countryPlaylists","scaleExtent","countryDivIsOpen","mydomain","maxartists","maxplaycount","defaultTheme","updateDimensions","offsetWidth","getCountryPlaycount","numbersWithSpace","updateScale","E","threshold","domain","range","updateLegend","len","ceil","legend_labels","text1","enter","getComputedTextLength","drawPlays","closeButton","offsetL","offsetT","tooltip","infoContainer","cnameDiv","themes","blue_black","green_black","pink_black","pink_white","green_white","red_white","toTheme","themeList","bodyClass","indexOf","setup","geo","naturalEarth","PI","class","draw","redrawMap","background-color","border-color","properties","getCountryCenter","offsetLeft","offsetTop","mouse","clicked","removeArtistDiv","tr","sc","animate","withKeyboard","highlightCountry","triggerAuditoryFeedback","invert","showArtists","pageNumber","pageItems","artistDiv","data-artist","lowlight","highlight","makeSummaryDiv","showNextFive","showPreviousFive","makeArtistDiv","nameTags","tagTags","pl","linkdiv","lastFmLink","recLoadingDiv","uri","playlistName","recLoadingMessage","alt","namelist","array","j","temp","shuffleArray","art","artistimg","artistname","recoArtistDiv","artisttaglist","usertaglist","summaryText","paragraphs","z","elem","pos","offsetHeight","tagdiv","paragraph","countryElement","bounds","modscaleX","modscaleY","pt","countryTopoData","mainBBox","_bbox2","world","topojson","feature","objects","features","newArtistsByCountry","countryDict","userPrefersReducedMotion","entries","_ref7","_ref8","index","findIndex"],"mappings":"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","file":"../all.min.js","sourcesContent":["var announcer = {};\n\n/* Inspired by https://github.com/AlmeroSteyn/react-aria-live */\nconst LIVEREGION_TIMEOUT_DELAY = 7000;\n\nlet liveAnnouncer = null;\n\nfunction debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            clearTimeout(timeout);\n            func(...args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n};\n\n/**\n * Announces the message using screen reader technology.\n */\nfunction announce(message, assertiveness = 'assertive', timeout = LIVEREGION_TIMEOUT_DELAY) {\n  if (!liveAnnouncer) {\n    liveAnnouncer = new LiveAnnouncer();\n  }\n\n  liveAnnouncer.announce(message, assertiveness, timeout);\n}\n\n/**\n * Stops all queued announcements.\n */\nfunction clearAnnouncer(assertiveness) {\n  if (liveAnnouncer) {\n    liveAnnouncer.clear(assertiveness);\n  }\n}\n\n/**\n * Removes the announcer from the DOM.\n */\nfunction destroyAnnouncer() {\n  if (liveAnnouncer) {\n    liveAnnouncer.destroy();\n    liveAnnouncer = null;\n  }\n}\n\nclass LiveAnnouncer {\n  constructor() {\n    this.node = document.createElement('div');\n    this.node.dataset.liveAnnouncer = 'true';\n    // copied from VisuallyHidden\n    Object.assign(this.node.style, {\n      border: 0,\n      clip: 'rect(0 0 0 0)',\n      clipPath: 'inset(50%)',\n      height: '1px',\n      margin: '-1px',\n      overflow: 'hidden',\n      padding: 0,\n      position: 'absolute',\n      width: '1px',\n      whiteSpace: 'nowrap'\n    });\n\n    this.assertiveLog = this.createLog('assertive');\n    this.node.appendChild(this.assertiveLog);\n\n    this.politeLog = this.createLog('polite');\n    this.node.appendChild(this.politeLog);\n\n    document.body.prepend(this.node);\n  }\n\n  createLog(ariaLive) {\n    let node = document.createElement('div');\n    node.setAttribute('role', 'log');\n    node.setAttribute('aria-live', ariaLive);\n    node.setAttribute('aria-relevant', 'additions');\n    return node;\n  }\n\n  destroy() {\n    if (!this.node) {\n      return;\n    }\n\n    document.body.removeChild(this.node);\n    this.node = null;\n  }\n\n  announce(message, assertiveness = 'assertive', timeout = LIVEREGION_TIMEOUT_DELAY) {\n    if (!this.node) {\n      return;\n    }\n\n    let node = document.createElement('div');\n    node.textContent = message;\n\n    if (assertiveness === 'assertive') {\n      this.assertiveLog.appendChild(node);\n    } else {\n      this.politeLog.appendChild(node);\n    }\n\n    if (message !== '') {\n      setTimeout(() => {\n        node.remove();\n      }, timeout);\n    }\n  }\n\n  clear(assertiveness) {\n    if (!this.node) {\n      return;\n    }\n\n    if (!assertiveness || assertiveness === 'assertive') {\n      this.assertiveLog.innerHTML = '';\n    }\n\n    if (!assertiveness || assertiveness === 'polite') {\n      this.politeLog.innerHTML = '';\n    }\n  }\n}\n\nannouncer.announce = announce;\nannouncer.clearAnnouncer = clearAnnouncer;\nannouncer.destroyAnnouncer = destroyAnnouncer;\nannouncer.debounce = debounce;","/* \n * Audio Feedback Module\n * Provides audio visualization of artist density on the music map\n * for improved accessibility for blind users\n */\n\nconst auditoryFeedback = (function() {\n  // Private variables\n  let audioContext = null;\n  let oscillator = null;\n  let gainNode = null;\n  let audioFeedbackEnabled = false;\n  let keyboardNavigationOnly = true; // Only trigger on keyboard navigation\n  let continuousTone = true; // Whether to use a continuous tone that modulates\n  let isPlaying = false; // Track if the tone is currently playing\n  let toneTimeout = null; // Timeout for stopping the tone\n  let toneDuration = 750; // Duration in ms that the tone plays\n  let lastInteractionWasKeyboard = false; // Track if the last interaction was keyboard\n  \n  // Initialize Web Audio API\n  function init() {\n    try {\n      // Create audio context with user interaction to avoid autoplay restrictions\n      document.addEventListener('click', function initAudioContext() {\n        if (!audioContext) {\n          audioContext = new (window.AudioContext || window.webkitAudioContext)();\n          console.log(\"Audio context initialized on user interaction\");\n        }\n        lastInteractionWasKeyboard = false; // Mouse click, not keyboard\n        document.removeEventListener('click', initAudioContext);\n      }, { once: true });\n      \n      // Add keyboard shortcut for toggling audio feedback\n      document.addEventListener('keydown', function(e) {\n        // Toggle audio feedback with 'A' key\n        if (e.key.toLowerCase() === 'a' && !e.repeat) {\n          // Don't trigger if we're in an input field or if keyboard mode is not active\n          if (e.target.tagName === \"INPUT\" || !window.keyboardMode || !window.keyboardMode.isActive()) {\n            return;\n          }\n          toggleAudioFeedback();\n        }\n        \n        // Set flag for keyboard interaction\n        if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || \n            e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n          lastInteractionWasKeyboard = true;\n          \n          // Play feedback on arrow key navigation\n          if (keyboardNavigationOnly && audioFeedbackEnabled) {\n            // Small delay to allow the map to update first\n            setTimeout(updateFeedback, 100);\n          }\n        }\n      });\n      \n      // Track mouse interactions\n      document.addEventListener('mousemove', function() {\n        lastInteractionWasKeyboard = false;\n      });\n      \n      document.addEventListener('mousedown', function() {\n        lastInteractionWasKeyboard = false;\n      });\n      \n      document.addEventListener('wheel', function() {\n        lastInteractionWasKeyboard = false;\n      });\n      \n      console.log(\"Auditory feedback module initialized\");\n      \n      // Try to initialize audio context immediately if possible\n      try {\n        audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      } catch (e) {\n        console.log(\"Audio context will be initialized on first user interaction\");\n      }\n    } catch (e) {\n      console.error(\"Web Audio API is not supported in this browser\", e);\n    }\n  }\n  \n  // Set up the tone audio nodes\n  function setupTone() {\n    if (!audioContext) return;\n    \n    // Clean up any existing oscillator\n    if (oscillator) {\n      try {\n        oscillator.stop();\n      } catch (e) {\n        // Ignore errors if oscillator was already stopped\n      }\n      oscillator = null;\n    }\n    \n    // Create oscillator and gain nodes\n    oscillator = audioContext.createOscillator();\n    gainNode = audioContext.createGain();\n    \n    // Configure oscillator\n    oscillator.type = 'sine'; // Sine wave is less harsh\n    oscillator.frequency.value = 0; // Start at 0 Hz (silent)\n    \n    // Configure gain (volume)\n    gainNode.gain.value = 0; // Start silent\n    \n    // Connect nodes\n    oscillator.connect(gainNode);\n    gainNode.connect(audioContext.destination);\n    \n    // Start the oscillator\n    oscillator.start();\n    isPlaying = true;\n    \n    // Schedule the tone to stop after the duration\n    scheduleToneStop();\n  }\n  \n  // Schedule the tone to stop after the duration\n  function scheduleToneStop() {\n    // Clear any existing timeout\n    if (toneTimeout) {\n      clearTimeout(toneTimeout);\n    }\n    \n    // Set a new timeout to fade out and stop the tone\n    toneTimeout = setTimeout(() => {\n      if (gainNode) {\n        // Fade out\n        gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.5);\n        \n        // Stop oscillator after fade out\n        setTimeout(() => {\n          if (oscillator) {\n            oscillator.stop();\n            oscillator = null;\n            isPlaying = false;\n          }\n        }, 600);\n      }\n    }, toneDuration);\n  }\n  \n  // Toggle audio feedback on/off\n  function toggleAudioFeedback() {\n    audioFeedbackEnabled = !audioFeedbackEnabled;\n    \n    // Announce status change to screen readers\n    if (window.announcer) {\n      window.announcer.announce(\n        audioFeedbackEnabled ? \n        \"Audio feedback enabled. Use arrow keys to navigate and hear artist density for the currently visible countries.\" : \n        \"Audio feedback disabled.\"\n      );\n    }\n    \n    if (audioFeedbackEnabled) {\n      // Play initial tone based on current view\n      lastInteractionWasKeyboard = true; // Force keyboard mode for initial tone\n      updateFeedback();\n    } else if (gainNode) {\n      // Fade out the tone\n      gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.5);\n      \n      // Clear any scheduled stop\n      if (toneTimeout) {\n        clearTimeout(toneTimeout);\n        toneTimeout = null;\n      }\n    }\n  }\n  \n  // Update the tone based on artist density\n  function updateTone(density) {\n    if (!audioContext || !audioFeedbackEnabled) return;\n    \n    // Skip if keyboard only and last interaction was not keyboard\n    if (keyboardNavigationOnly && !lastInteractionWasKeyboard) return;\n    \n    // Map density to frequency (pitch)\n    // Low density: 220Hz (low A), High density: 880Hz (high A)\n    const minFreq = 220;\n    const maxFreq = 880;\n    \n    // Apply a slight curve to give better distinction at lower values\n    // while preserving the overall scale\n    // This power value (0.8) is closer to linear (1.0) but still provides\n    // some enhancement for lower values\n    const curvedDensity = Math.pow(density, 0.8);\n    \n    const frequency = minFreq + (curvedDensity * (maxFreq - minFreq));\n    \n    // Create or restart the tone if it's not playing\n    if (!isPlaying) {\n      setupTone();\n    } else {\n      // Extend the duration by rescheduling the stop\n      scheduleToneStop();\n    }\n    \n    // Smoothly change frequency\n    oscillator.frequency.exponentialRampToValueAtTime(\n      frequency, \n      audioContext.currentTime + 0.2\n    );\n    \n    // Fade in if needed\n    if (gainNode.gain.value < 0.1) {\n      gainNode.gain.exponentialRampToValueAtTime(0.1, audioContext.currentTime + 0.1);\n    }\n  }\n  \n  // Update auditory feedback based on current map view\n  function updateFeedback() {\n    // Check if feedback is enabled\n    if (!audioFeedbackEnabled) return;\n    \n    // Skip if keyboard only and last interaction was not keyboard\n    if (keyboardNavigationOnly && !lastInteractionWasKeyboard) return;\n    \n    // Check if keyboard mode is active (only when zoomed in far enough)\n    if (window.keyboardMode && typeof window.keyboardMode.isActive === 'function') {\n      if (!window.keyboardMode.isActive()) {\n        // Keyboard mode is not active, so don't play audio feedback\n        if (isPlaying && oscillator) {\n          // Fade out any currently playing tone\n          if (gainNode) {\n            gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.5);\n          }\n          return;\n        }\n        return;\n      }\n    }\n    \n    // Get the current data from the keyboard mode\n    const countries = getCurrentlyVisibleCountries();\n    if (!countries || countries.length === 0) return;\n    \n    let totalArtists = 0;\n    \n    // Handle different data formats\n    if (Array.isArray(countries) && typeof countries[0] === 'object' && 'artistCount' in countries[0]) {\n      // Format: [{name: \"Country\", artistCount: 5}, ...]\n      totalArtists = countries.reduce((sum, country) => sum + country.artistCount, 0);\n    } else if (Array.isArray(countries) && typeof countries[0] === 'object' && 'number' in countries[0]) {\n      // Format: [{name: \"Country\", number: \"A\", artistCount: 5}, ...]\n      totalArtists = countries.reduce((sum, country) => sum + country.artistCount, 0);\n    } else {\n      // Try to get artist counts from the script data\n      const data = window.script && window.script.getCurrentData ? window.script.getCurrentData() : {};\n      const userName = window.location.href.split(\"username=\")[1];\n      \n      countries.forEach(countryId => {\n        if (data[countryId] && data[countryId][userName]) {\n          totalArtists += data[countryId][userName].length;\n        }\n      });\n    }\n    \n    // If there are no artists in any of the visible countries, remain silent\n    if (totalArtists === 0) {\n      // Fade out any currently playing tone\n      if (isPlaying && oscillator && gainNode) {\n        gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.5);\n        \n        // Clear any scheduled stop\n        if (toneTimeout) {\n          clearTimeout(toneTimeout);\n          toneTimeout = null;\n        }\n        \n        // Stop oscillator after fade out\n        setTimeout(() => {\n          if (oscillator) {\n            oscillator.stop();\n            oscillator = null;\n            isPlaying = false;\n          }\n        }, 600);\n      }\n      return;\n    }\n    \n    const avgDensity = countries.length > 0 ? totalArtists / countries.length : 0;\n    \n    // Get the color domain from the map\n    let normalizedDensity = 0;\n    \n    if (window.map && window.map.getColorDomain) {\n      const colorDomain = window.map.getColorDomain();\n      if (colorDomain && colorDomain.length > 0) {\n        // Find where our density falls in the color domain\n        const maxDomain = colorDomain[colorDomain.length - 1];\n        normalizedDensity = Math.min(avgDensity / maxDomain, 1);\n      } else {\n        // Fallback to old method if color domain isn't available\n        const maxPossibleAvg = 100;\n        normalizedDensity = Math.min(avgDensity / maxPossibleAvg, 1);\n      }\n    } else {\n      // Fallback to old method if map or getColorDomain isn't available\n      const maxPossibleAvg = 100;\n      normalizedDensity = Math.min(avgDensity / maxPossibleAvg, 1);\n    }\n    \n    // Update the tone\n    updateTone(normalizedDensity);\n  }\n  \n  // Use the existing function from keyboard-mode.js to get visible countries\n  function getCurrentlyVisibleCountries() {\n    // Try to access it through the keyboardMode object\n    if (window.keyboardMode && typeof window.keyboardMode.getCurrentlyVisibleCountries === 'function') {\n      return window.keyboardMode.getCurrentlyVisibleCountries();\n    }\n    \n    // If we can't find the function, return an empty array\n    console.warn('Could not find getCurrentlyVisibleCountries function');\n    return [];\n  }\n  \n  // Clean up resources when the page is unloaded\n  window.addEventListener('beforeunload', function() {\n    if (oscillator) {\n      oscillator.stop();\n      oscillator = null;\n    }\n    \n    if (toneTimeout) {\n      clearTimeout(toneTimeout);\n      toneTimeout = null;\n    }\n  });\n  \n  // Public API\n  return {\n    init: init,\n    updateFeedback: updateFeedback,\n    toggleAudioFeedback: toggleAudioFeedback,\n    isEnabled: function() { return audioFeedbackEnabled; },\n    setKeyboardOnly: function(value) { \n      keyboardNavigationOnly = value; \n    },\n    setToneDuration: function(duration) { \n      toneDuration = duration; \n    }\n  };\n})();\n\n// Initialize when the DOM is ready\ndocument.addEventListener('DOMContentLoaded', function() {\n  auditoryFeedback.init();\n}); ","// Country List Dialog Logic with Accessible Tabs\n(function() {\n  const button = document.getElementById('country-list-button');\n  const dialog = document.getElementById('country-list-dialog');\n  const closeBtn = dialog.querySelector('.close');\n  const continentsDiv = dialog.querySelector('.country-list__continents');\n\n  const CONTINENTS = ['All','Europe','North America','South America','Asia','Africa','Oceania','Antarctica','Other'];\n\n  // Helper: get scrobbles for a country\n  function getCountryScrobbles(country) {\n    if (!country || !country.id) return 0;\n    if (!window.countryCountObj || !window.countryCountObj[country.id]) return 0;\n    let total = 0;\n    Object.values(window.countryCountObj[country.id]).forEach(artistArr => {\n      artistArr.forEach(a => { total += a.playcount || 0; });\n    });\n    return total;\n  }\n\n  // Helper: get number of artists for a country\n  function getCountryArtistCount(country) {\n    if (!country || !country.id) return 0;\n    if (!window.countryCountObj || !window.countryCountObj[country.id]) return 0;\n    return Object.values(window.countryCountObj[country.id]).flat().length;\n  }\n\n  // Helper: group countries by continent\n  function groupByContinent(countries) {\n    const result = {};\n    countries.forEach(c => {\n      const cont = c.continent || 'Other';\n      if (!result[cont]) result[cont] = [];\n      result[cont].push(c);\n    });\n    return result;\n  }\n\n  // Helper: sort countries by number of artists\n  function sortCountriesByArtists(countries) {\n    return countries.slice().sort((a, b) => getCountryArtistCount(b) - getCountryArtistCount(a));\n  }\n\n  // Helper: sort countries alphabetically\n  function sortCountriesAlpha(countries) {\n    return countries.slice().sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  // Helper: sort countries by number of scrobbles (existing)\n  function sortCountriesByScrobbles(countries) {\n    return countries.slice().sort((a, b) => getCountryScrobbles(b) - getCountryScrobbles(a));\n  }\n\n  // Store sort order (persist while dialog is open)\n  let currentSort = 'artists'; // 'artists', 'scrobbles', 'alpha'\n  let lastFocusedTabIndex = 0;\n  let tabRefs = [];\n  let panelRefs = [];\n  let tablistRef = null;\n\n  // Create sort select element\n  function createSortSelect(onChange) {\n    const select = document.createElement('select');\n    select.className = 'country-sort-select';\n    select.setAttribute('aria-label', 'Sort countries');\n    [\n      { value: 'artists', label: 'Most artists' },\n      { value: 'scrobbles', label: 'Most scrobbles' },\n      { value: 'alpha', label: 'A–Z' }\n    ].forEach(opt => {\n      const option = document.createElement('option');\n      option.value = opt.value;\n      option.textContent = opt.label;\n      if (opt.value === currentSort) option.selected = true;\n      select.appendChild(option);\n    });\n    select.addEventListener('change', e => {\n      currentSort = select.value;\n      onChange();\n    });\n    return select;\n  }\n\n  // Main renderTabs logic\n  function renderTabs(grouped, selectedIdx = 0, focusTabIndex = null, scrollDirection = 'center') {\n    // Only render tablist and panels once\n    if (!tablistRef) {\n      tablistRef = document.createElement('div');\n      tablistRef.setAttribute('role', 'tablist');\n      tablistRef.setAttribute('aria-label', 'Continents');\n      tablistRef.className = 'country-tabs';\n      tabRefs = [];\n      CONTINENTS.forEach((cont, i) => {\n        if (cont !== 'All' && !grouped[cont]) return;\n        const tab = document.createElement('button');\n        tab.setAttribute('role', 'tab');\n        tab.setAttribute('id', `tab-${cont}`);\n        tab.setAttribute('aria-controls', `tabpanel-${cont}`);\n        tab.className = 'country-tab';\n        tab.textContent = cont === 'All' ? 'All' : cont;\n        tab.addEventListener('click', () => activateTab(i));\n        tab.addEventListener('keydown', e => handleTabKeydown(e, i));\n        tabRefs.push(tab);\n        tablistRef.appendChild(tab);\n      });\n      continentsDiv.appendChild(tablistRef);\n      // Panels\n      panelRefs = [];\n      CONTINENTS.forEach((cont, i) => {\n        if (cont !== 'All' && !grouped[cont]) return;\n        const panel = document.createElement('div');\n        panel.setAttribute('role', 'tabpanel');\n        panel.setAttribute('id', `tabpanel-${cont}`);\n        panel.setAttribute('aria-labelledby', `tab-${cont}`);\n        panel.className = 'country-tabpanel';\n        panelRefs.push(panel);\n        continentsDiv.appendChild(panel);\n      });\n    }\n    // Update tabs and panels\n    tabRefs.forEach((tab, i) => {\n      tab.setAttribute('aria-selected', i === selectedIdx ? 'true' : 'false');\n      tab.setAttribute('tabindex', i === selectedIdx ? '0' : '-1');\n      if (i === selectedIdx && focusTabIndex !== null) {\n        setTimeout(() => {\n          tab.focus();\n        }, 0);\n      }\n    });\n    panelRefs.forEach((panel, i) => {\n      panel.hidden = i !== selectedIdx;\n      if (i === selectedIdx) {\n        // Render panel content\n        panel.innerHTML = '';\n        const cont = CONTINENTS[i];\n        // Heading row: h2 and sort select\n        const headingRow = document.createElement('div');\n        headingRow.className = 'country-tabpanel-heading-row';\n        const heading = document.createElement('h2');\n        heading.className = 'country-tabpanel-heading';\n        heading.textContent = cont === 'All' ? 'All countries' : cont;\n        headingRow.appendChild(heading);\n        // Sort select\n        const sortContainer = document.createElement('div');\n        sortContainer.className = 'country-sort-container';\n        const sortLabel = document.createElement('span');\n        sortLabel.className = 'country-sort-label';\n        sortLabel.textContent = 'Sort';\n        sortContainer.appendChild(sortLabel);\n        const sortSelect = createSortSelect(() => {\n          renderTabs(grouped, i, i, 'center');\n        });\n        sortContainer.appendChild(sortSelect);\n        headingRow.appendChild(sortContainer);\n        panel.appendChild(headingRow);\n        // Country list\n        const countryList = document.createElement('ul');\n        countryList.className = 'country-list';\n        let countriesToShow;\n        if (cont === 'All') {\n          countriesToShow = Object.values(grouped).flat();\n        } else {\n          countriesToShow = grouped[cont];\n        }\n        if (currentSort === 'artists') {\n          countriesToShow = sortCountriesByArtists(countriesToShow);\n        } else if (currentSort === 'scrobbles') {\n          countriesToShow = sortCountriesByScrobbles(countriesToShow);\n        } else {\n          countriesToShow = sortCountriesAlpha(countriesToShow);\n        }\n        countriesToShow.forEach(country => {\n          const li = document.createElement('li');\n          li.className = 'country-list__country';\n          const btn = document.createElement('button');\n          btn.type = 'button';\n          btn.className = 'country-list__country-btn';\n          // Country name\n          const nameSpan = document.createElement('span');\n          nameSpan.className = 'country-list__country-name';\n          nameSpan.textContent = country.name;\n          // Secondary text: artist count or scrobbles\n          const countSpan = document.createElement('span');\n          countSpan.className = 'country-list__country-count';\n          if (currentSort === 'scrobbles') {\n            const nScrobbles = getCountryScrobbles(country);\n            countSpan.textContent = nScrobbles.toLocaleString() + ' scrobbles';\n          } else {\n            const nArtists = getCountryArtistCount(country);\n            countSpan.textContent = nArtists + ' artists';\n          }\n          btn.appendChild(nameSpan);\n          btn.appendChild(countSpan);\n          btn.onclick = function() {\n            dialog.close();\n            setTimeout(() => {\n              const el = document.getElementById('c'+country.id);\n              if (el) el.dispatchEvent(new Event('click'));\n            }, 100);\n          };\n          li.appendChild(btn);\n          countryList.appendChild(li);\n        });\n        panel.appendChild(countryList);\n      } else {\n        panel.innerHTML = '';\n      }\n    });\n  }\n\n  // Tab activation logic\n  function activateTab(idx) {\n    let scrollDirection = 'center';\n    if (typeof lastFocusedTabIndex === 'number') {\n      if (idx > lastFocusedTabIndex) scrollDirection = 'end';\n      else if (idx < lastFocusedTabIndex) scrollDirection = 'start';\n    }\n    renderTabs(window.map && window.map.countryNames ? groupByContinent(window.map.countryNames) : {}, idx, idx, scrollDirection);\n    lastFocusedTabIndex = idx;\n  }\n\n  // Keyboard navigation for tabs\n  function handleTabKeydown(e, idx) {\n    let newIdx = idx;\n    if (e.key === 'ArrowRight') {\n      do { newIdx = (newIdx + 1) % tabRefs.length; } while (!tabRefs[newIdx]);\n      tabRefs[newIdx].focus();\n      e.preventDefault();\n    } else if (e.key === 'ArrowLeft') {\n      do { newIdx = (newIdx - 1 + tabRefs.length) % tabRefs.length; } while (!tabRefs[newIdx]);\n      tabRefs[newIdx].focus();\n      e.preventDefault();\n    } else if (e.key === 'Home') {\n      tabRefs[0].focus();\n      e.preventDefault();\n    } else if (e.key === 'End') {\n      tabRefs[tabRefs.length - 1].focus();\n      e.preventDefault();\n    } else if (e.key === 'Enter' || e.key === ' ') {\n      activateTab(idx);\n      e.preventDefault();\n    }\n  }\n\n  // Open dialog\n  button.addEventListener('click', function() {\n    if (!window.map || !window.map.countryNames) return;\n    const grouped = groupByContinent(window.map.countryNames);\n    lastFocusedTabIndex = 0;\n    tabRefs = [];\n    panelRefs = [];\n    tablistRef = null;\n    continentsDiv.innerHTML = '';\n    renderTabs(grouped, 0, 0, 'center');\n    dialog.showModal();\n    setTimeout(() => dialog.querySelector('h1').focus(), 100);\n  });\n  // Close dialog\n  closeBtn.addEventListener('click', function() {\n    dialog.close();\n    button.focus();\n    currentSort = 'artists';\n  });\n  // ESC closes dialog\n  dialog.addEventListener('keydown', function(e) {\n    if (e.key === 'Escape') {\n      dialog.close();\n      button.focus();\n      currentSort = 'artists';\n    }\n  });\n})(); ","var api = api || {};\n\napi.lastfm = {};\napi.lastfm.key = \"865b1653dbe200905a5b75d9d839467a\";\napi.lastfm.url = \"https://ws.audioscrobbler.com/2.0/\";\n\n(function (api) {\n\tlet keyI = 0;\n\tlet keys = [\n\t\t// https://gitlab.gnome.org/World/lollypop/blob/master/lollypop/lastfm.py\n\t\t\"7a9619a850ccf7377c46cf233c51e3c6\",\n\t\t\n\t\t// https://github.com/ampache/ampache/issues/1694\n\t\t\"13893ba930c63b1b2cbe21441dc7f550\",\n\n\t\t// https://www.reddit.com/r/lastfm/comments/3okkij/cant_create_lastfm_api_key/\n\t\t\"4cb074e4b8ec4ee9ad3eb37d6f7eb240\",\n\n\t\t// https://www.w3resource.com/API/last.fm/tutorial.php\n\t\t\"4a9f5581a9cdf20a699f540ac52a95c9\",\n\n\t\t// https://www.reddit.com/r/lastfm/comments/3l3cae/cant_get_a_lastfm_api_key/\n\t\t\"57ee3318536b23ee81d6b27e36997cde\",\n\n\t\t// original explr api key\n\t\t\"865b1653dbe200905a5b75d9d839467a\",\n\n\t\t// https://www.w3resource.com/API/last.fm/example.html\n\t\t\"68b2125fd8f8fbadeb2195e551f32bc4\",\n\n\t\t// https://rstudio-pubs-static.s3.amazonaws.com/236264_81312ba4d795474c8641dd0e2af83cba.html\n\t\t\"1ba315d4d1673bbf88aed473f1917306\"\n\t];\n\tlet keyInfo = window.keyInfo = {};\n\tkeys.forEach(k => keyInfo[k] = { success: 0, fails: 0, total: 0 });\n\n\tlet rotateKey = function () {\n\t\tlet avgErrors = keys.reduce((avg, k, i, arr) => avg + keyInfo[k].fails / arr.length, 0);\n\t\tlet bestKeys = keys.filter(k => keyInfo[k].fails <= avgErrors);\n\t\tbestKeys = bestKeys.length ? bestKeys : keys;\n\t\tlet key = bestKeys[++keyI % bestKeys.length];\n\n\t\t// console.log({ key, avgErrors, bestKeys });\n\n\t\treturn key;\n\t}\n\n\tlet setKeyInfo = function (key, success) {\n\t\tkeyInfo[key].total++;\n\t\tkeyInfo[key].success += success ? 1 : 0;\n\t\tkeyInfo[key].fails += success ? 0 : 1;\n\t}\n\n\t/**\n\t* Send an API call to last.fm\n\t* @param {String} method    The method name (e.g. \"library.getartists\")\n\t* @param {Array} options    An array of tuples (arrays with two elements)\n\t                            with options for the request: [\"key\", \"value\"]\n\t* @param {Function} callback    The callback function to call with the data\n\t                                returned from the request. Takes two arguments,\n\t                                error and data (callback(error, data))\n\t*/\n\tapi.lastfm.send = function (method, options, callback, retries) {\n\t\tlet getUrl = (apiKey) => {\n\t\t\tlet _url = api.lastfm.url + \"?\" + \"method=\" + method + \"&api_key=\" +\n\t\t\t\tapiKey + \"&format=json\";\n\n\t\t\toptions.forEach(function (el) {\n\t\t\t\t_url += \"&\" + el[0] + \"=\" +\n\t\t\t\t\t(el[1] + \"\")\n\t\t\t\t\t.replace(\"&\", \"%26\")\n\t\t\t\t\t.replace(\"/\", \"%2F\")\n\t\t\t\t\t.replace(\"+\", \"%2B\")\n\t\t\t\t\t.replace(\"\\\\\", \"%5C\");\n\t\t\t});\n\n\t\t\treturn _url;\n\t\t};\n\n\t\tretries = undefined === retries ? 10 : retries\n\t\tlet xhr, gotResponse, aborted = false;\n\n\t\tfunction tryGet(tries, cb) {\n\t\t\tlet _key = rotateKey();\n\t\t\txhr = d3.json(getUrl(_key), function (e, d) {\n\t\t\t\tif (aborted) {\n\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (e) { // we got an actual server error: 4xx, 5xx\n\t\t\t\t\td = JSON.parse(e.response);\n\t\t\t\t\t// now e and d are the same\n\t\t\t\t} else if (d.error) {\n\t\t\t\t\t// we got 200 BUT it's an error\n\t\t\t\t\te = d;\n\t\t\t\t}\n\n\t\t\t\tif (e) {\n\t\t\t\t\tsetKeyInfo(_key, false);\n\n\t\t\t\t\tlet errInfo = {\n\t\t\t\t\t\tmethod: method,\n\t\t\t\t\t\terrorCode: e && e.error,\n\t\t\t\t\t\ttry: tries,\n\t\t\t\t\t\toptions: options,\n\t\t\t\t\t\tkey: _key,\n\t\t\t\t\t\tmessage: e.message || JSON.parse(e.response)?.message,\n\t\t\t\t\t};\n\t\t\t\t\t// alert(\"ERROR\");\n\t\t\t\t\tif (tries < retries) {\n\t\t\t\t\t\tconsole.warn(\"Retry request: \", errInfo);\n\t\t\t\t\t\tsetTimeout(tryGet.bind(null, tries + 1, cb), tries * 3000);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tries >= retries) {\n\t\t\t\t\t\tconsole.warn(\"Retry failed after \" + retries + \" attempts, will stop trying.\", errInfo);\n\t\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\t\taborted = true;\n\t\t\t\t\t\te = \"ERROR\";\n\t\t\t\t\t\td = {\n\t\t\t\t\t\t\terror: \"Took to long to respond\"\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tsetKeyInfo(_key, true);\n\t\t\t\t}\n\n\t\t\t\tgotResponse = true;\n\t\t\t\tcb(e, d);\n\t\t\t});\n\t\t}\n\n\t\ttryGet(0, callback);\n\n\t\t// Abort if the request takes too long - it sometimes ballar ur and fails after a minute :(\n\t\tlet timeout = setTimeout(function () {\n\t\t\tif (!gotResponse) {\n\t\t\t\t//console.log(\"GET \" + url + \" took to long, aborting\");\n\t\t\t\txhr.abort();\n\t\t\t\tcallback(\"ERROR\", {\n\t\t\t\t\terror: \"Took to long to respond\"\n\t\t\t\t});\n\t\t\t}\n\t\t}, 20000);\n\n\t\treturn {\n\t\t\tabort: function () {\n\t\t\t\taborted = true;\n\t\t\t\txhr.abort();\n\t\t\t}\n\t\t};\n\t}\n\n})(api);","/* requires:\napi/api.js\nutils.js\nscreenshot.js\naria-announcer.js\n*/\n\nconst search = search || {};\n\nlet typingTimeout;\n\nlet SEARCH_IS_OPEN = false;\n\nlet searchButton = null;\n\nlet filteredCountries = [];\nlet filteredArtists = [];\nlet filteredCountryArtists = [];\nlet noCountryArtists = [];\nlet filteredShortcuts = [];\n\n(function () {\n\n    // Function to generate screen reader feedback text for current search results\n    search.getAnnouncement = function () {\n        let announcementParts = [];\n\n        const input = document.querySelector('input.search');\n        \n        const totalArtistLength = filteredArtists.slice(0, 100).length + filteredCountryArtists.slice(0, 100).length + noCountryArtists.slice(0, 100).length;\n    \n        if (filteredShortcuts.length > 0 && input.value.length > 3) {\n            let shortcutText = filteredShortcuts.length === 1 ? 'shortcut' : 'shortcuts';\n            announcementParts.push(`${filteredShortcuts.length} ${shortcutText}`);\n        }\n    \n        if (filteredCountries.slice(0, 5).length > 0 && input.value.length > 1) {\n            let countryText = filteredCountries.length === 1 ? 'country' : 'countries';\n            announcementParts.push(`${filteredCountries.length} ${countryText}`);\n        }\n    \n        if (totalArtistLength && input.value.length > 1) {\n            let artistText = totalArtistLength === 1 ? 'artist' : 'artists';\n            announcementParts.push(`${totalArtistLength} ${artistText}`);\n        }\n        \n    \n        let announcement = '';\n        if (announcementParts.length > 0) {\n            announcement = 'Showing ' + announcementParts.slice(0, -1).join(', ') + (announcementParts.length > 1 ? ' and ' : '') + announcementParts.slice(-1) + ', press down arrow to go to results';\n        } else {\n            announcement = 'No results found';\n        }\n        return announcement;\n      }\n\n    search.initSearch = function () {  \n\n    SEARCH_IS_OPEN = true;\n\n    let FOCUSED_RESULT = null;\n\n    let countriesList = null;\n\n    const searchButton = document.querySelector('#search-button');\n    if (searchButton) searchButton.ariaExpanded = true;\n\n    api.getCountriesData().then(countries => {\n        // countries is the array of country data\n        // You can process the countries data here\n        countriesList = countries;\n      }).catch(error => {\n        // Handle any errors here\n        console.error(error);\n      });\n\n    // List of shortcuts that you can match against\n    const shortcuts = [\n        { name: \"Status\", onClick: () => { } },\n        { name: \"Clear cached users\", onClick: () => { clearExplrCache().then(()=>window.location.reload()) } },\n        { name: \"Change user\", onClick: () => { window.location = \"./\" } },\n        { name: \"Change theme\", onClick: () => {map.nextTheme()} },\n        { name: \"Download screenshot of map\", onClick: () => {screenshot.render(true)} },\n        { name: \"Export data\", onClick: () => {utils.exportToCSV(script.getCurrentData())} },\n        { name: \"Map: Toggle between artists or scrobbles\", onClick: () => { map.toggleFilter() } },\n        { name: \"Support Explr on BuyMeACoffee\", onClick: () => { window.open('https://www.buymeacoffee.com/explrfm', '_blank'); } },\n        { name: \"View Explr on GitHub\", onClick: () => { window.open('https://github.com/mold/explr', '_blank'); } },\n    ];\n    \n    // Get the current data\n    let data = script.getCurrentData();\n\n    // Flatten and prepare the data\n    let artists = [].concat(...Object.values(data));\n    artists = artists.reduce((acc, item) => {\n        for (let key in item) {\n            if (item.hasOwnProperty(key)) {\n                acc = acc.concat(item[key]);\n            }\n        }\n        return acc;\n    }, [])\n\n    // Sort the artists by playcount\n    artists = artists.sort((a, b) => b.playcount - a.playcount);\n\n    // Create a div to hold the search field\n    let searchContainer = document.getElementById('search-container');\n    searchContainer.classList.add(\"search-container\")\n    const searchInputWrapper = document.createElement('div');\n    searchInputWrapper.classList.add(\"search-input-wrapper\")\n    let input = document.createElement('input');\n    input.type = 'text';\n    input.classList.add(\"search\")\n    input.placeholder = 'Search for an artist or a country';\n    input.setAttribute('aria-label', 'Search for an artist or a country');\n    input.setAttribute('aria-autocomplete', 'list');\n    input.setAttribute('aria-controls', 'search-results');\n    input.setAttribute('aria-expanded', 'false');\n    input.role = 'combobox';\n    searchInputWrapper.appendChild(input);\n    searchContainer.appendChild(searchInputWrapper);\n    setTimeout(() => {\n        input.focus();\n    }, 50);\n\n    // Create a div to display the results\n    let resultsDiv = document.createElement('div');\n    resultsDiv.classList.add(\"search-results\")\n    resultsDiv.id = 'search-results';\n    resultsDiv.setAttribute('role', 'listbox');\n    resultsDiv.setAttribute('aria-label', 'Search results');\n    searchContainer.appendChild(resultsDiv);\n    \n    // Add an event listener to the input field\n    input.addEventListener('input', function() {\n        // Clear the previous results\n        resultsDiv.innerHTML = '';\n\n        input.setAttribute('aria-expanded', 'true');\n\n        const shortcutsWithoutStatus = shortcuts.filter(shortcut => shortcut.name !== \"Status\");\n\n        // Filter the shortcuts based on the user's input\n            filteredShortcuts = shortcutsWithoutStatus.filter(shortcut => \n                input.value.toLowerCase() === \"shortcuts\" || \n                shortcut.name.toLowerCase().includes(input.value.toLowerCase())\n            );\n            if (filteredShortcuts.length > 0 && input.value.length > 3) {\n            const shortcutsWrapper = document.createElement('ul');\n            let shortcutsHeading = document.createElement('li');\n            shortcutsHeading.textContent = 'Explr.fm shortcuts';\n            shortcutsHeading.id = 'shortcuts-heading';\n            shortcutsHeading.role = \"presentation\"\n            shortcutsHeading.classList.add('search-result-heading');\n            shortcutsWrapper.appendChild(shortcutsHeading);\n            shortcutsWrapper.setAttribute('role', 'group');\n            shortcutsWrapper.classList.add('search-result-group');\n            shortcutsWrapper.ariaLabelledby = 'shortcuts-heading';\n            resultsDiv.appendChild(shortcutsWrapper);\n        \n            filteredShortcuts.forEach(c => {\n                if (input.value.length > 3) {\n                    if (c.name === \"Status\") {\n                        shortcutsHeading.textContent = 'Explr.fm status';\n                    }\n                    let searchResultWrapper = document.createElement('div');\n                    searchResultWrapper.classList.add('result-wrapper');\n                    searchResultWrapper.role = 'option';\n                    searchResultWrapper.id = `shortcut-${c.name.replace(/\\s+/g, '-').toLowerCase()}`;\n                    searchResultWrapper.addEventListener('click', function() {\n                        c.onClick();\n                    });\n                    const shortcutSpan = document.createElement('span');\n                    shortcutSpan.classList.add('shortcut-name');\n        \n                    // Highlight the matching letters\n                    let regex = new RegExp(input.value, 'gi');\n                    const shortcutName = c.name === \"Status\" ? script.getLoadingStatus() : c.name\n                    let highlightedName = shortcutName.replace(regex, match => `<span class=\"highlight\">${match}</span>`);\n                    shortcutSpan.innerHTML = highlightedName;\n        \n                    searchResultWrapper.appendChild(shortcutSpan);\n                    shortcutsWrapper.appendChild(searchResultWrapper);\n                }\n            });\n        }\n\n        // Filter the countries based on the user's input\n        filteredCountries = countriesList.filter(country => \n            country.names.some(name => name.toLowerCase().includes(input.value.toLowerCase()))\n        );\n\n        // Display the filtered countries\n        if (filteredCountries.length > 0 && input.value.length > 1) {\n            const countriesWrapper = document.createElement('ul');\n            let countriesHeading = document.createElement('li');\n            countriesHeading.textContent = 'Countries';\n            countriesHeading.classList.add('search-result-heading');\n            countriesHeading.id = 'countries-heading';\n            countriesHeading.role = \"presentation\"\n            countriesWrapper.appendChild(countriesHeading);\n            countriesWrapper.setAttribute('role', 'group');\n            countriesWrapper.classList.add('search-result-group');\n            countriesWrapper.setAttribute(\"aria-labelledby\", \"countries-heading\");\n            resultsDiv.appendChild(countriesWrapper);\n\n            filteredCountries.slice(0, 5).forEach(c => {\n                if (input.value.length > 1) {\n                    let searchResultWrapper = document.createElement('div');\n                    searchResultWrapper.classList.add('result-wrapper', 'country');                    searchResultWrapper.role = 'option';\n                    searchResultWrapper.id = `country-${c.name.replace(/\\s+/g, '-').toLowerCase()}`;                    // Zoom into the country on click\n                    searchResultWrapper.addEventListener('click', function() {\n                        search.stopSearch();\n                        const country = document.querySelector(`.country#c${c.id}`);\n                        if (country) {\n                            country.dispatchEvent(new Event('click'));\n                            setTimeout(() => {\n                                document.querySelector('#cnameCont h1').setAttribute(\"tabindex\", \"-1\");\n                                document.querySelector('#cnameCont h1').focus();\n                            }, 250);\n                        }\n                    });\n                    const countrySpan = document.createElement('span');\n\n                    countrySpan.classList.add('country-name');\n                    const countryArtistsSpan = document.createElement('span');\n                    countryArtistsSpan.classList.add('country-artist-count');\n                    countryArtistsSpan.textContent = `${utils.getNumberOfArtistsForCountry(c.id)} artists`;\n\n                    // Highlight the matching letters\n                    let regex = new RegExp(input.value, 'gi');\n                    let highlightedName = c.name.replace(regex, match => `<span class=\"highlight\">${match}</span>`);\n                    countrySpan.innerHTML = highlightedName;\n\n                    searchResultWrapper.appendChild(countrySpan);\n                    searchResultWrapper.appendChild(countryArtistsSpan);\n                    countriesWrapper.appendChild(searchResultWrapper);\n                }\n            });\n        }\n\n        // Filter the artists based on the user's input\n        filteredArtists = artists.filter(country => country.artist.toLowerCase().includes(input.value.toLowerCase()));\n\n        if (filteredArtists.length > 0 && input.value.length > 1) {\n            const artistsWrapper = document.createElement('ul');\n            artistsWrapper.classList.add('search-result-group');\n            let artistsHeading = document.createElement('li');\n            artistsHeading.textContent = 'Artists';\n            artistsHeading.role = \"presentation\"\n            artistsHeading.classList.add('search-result-heading');\n            artistsHeading.id = 'artists-heading';\n            artistsWrapper.appendChild(artistsHeading);\n            artistsWrapper.setAttribute('role', 'group');\n            artistsWrapper.setAttribute(\"aria-labelledby\", \"artists-heading\");\n            resultsDiv.appendChild(artistsWrapper);\n        \n            filteredArtists.slice(0, 100).forEach(artist => {\n                if (input.value.length > 1) {\n                    let searchResultWrapper = document.createElement('div');\n                    searchResultWrapper.classList.add('result-wrapper');\n                    searchResultWrapper.role = 'option';\n                    searchResultWrapper.id = `artist-${artist.artist.replace(/\\s+/g, '-').toLowerCase()}`;\n            \n                    // Navigate to the artist's last.fm link on click\n                    searchResultWrapper.addEventListener('click', function() {\n                        search.stopSearch();\n                        if (!utils.getCountryNameFromId(artist.id)) {\n                            window.open(artist.url, '_blank');\n                        }\n                        const country = document.querySelector(`.country#c${artist.id}`);\n                        if (country) {\n                            country.dispatchEvent(new Event('click'));\n                            setTimeout(() => {\n                                map.searchArtist(artist.artist);\n                            }, 250);\n                        }\n                    });\n            \n                    let artistWrapper = document.createElement('span');\n                    artistWrapper.classList.add('artist-wrapper');\n                    let artistCountryWrapper = document.createElement('span');\n                    artistCountryWrapper.classList.add('country-wrapper');\n                    const srOnlyFrom = document.createElement('span');\n                    srOnlyFrom.classList.add('visually-hidden');\n                    srOnlyFrom.textContent = ', from ';\n                    let artistPlaycount = document.createElement('span');\n                    artistPlaycount.classList.add('playcount');\n                    artistPlaycount.textContent = `${artist.playcount} scrobbles`\n                    const artistNameSpan = document.createElement('span');\n                    artistNameSpan.classList.add('artist-name');\n            \n                    // Highlight the matching letters\n                    let regex = new RegExp(input.value, 'gi');\n                    let highlightedName = artist.artist.replace(regex, match => `<span class=\"highlight\">${match}</span>`);\n                    artistNameSpan.innerHTML = highlightedName;\n            \n                    artistWrapper.appendChild(artistNameSpan);\n                    artistWrapper.appendChild(artistPlaycount);\n                    const artistCountryNameSpan = document.createElement('span');\n                    artistCountryNameSpan.classList.add('country-name');\n                    artistCountryNameSpan.textContent = utils.getCountryNameFromId(artist.id) ? utils.getCountryNameFromId(artist.id) : 'Unknown country :-(';\n                    artistCountryWrapper.appendChild(artistCountryNameSpan);\n                    artistCountryWrapper.prepend(srOnlyFrom);\n                    // Check if the country is known\n                    let countryName = utils.getCountryNameFromId(artist.id);\n                    if (!countryName) {\n                        countryName = 'Unknown country';\n                        let addTagsSpan = document.createElement('span');\n                        addTagsSpan.classList.add('add-tags');\n                        addTagsSpan.textContent = 'Go add some tags on Last.fm!';\n                        artistCountryWrapper.appendChild(addTagsSpan);\n                    }\n                    searchResultWrapper.appendChild(artistWrapper);\n                    searchResultWrapper.appendChild(artistCountryWrapper);\n                    artistsWrapper.appendChild(searchResultWrapper);\n                    artistsWrapper.classList.add('artists-wrapper');\n                }\n            });\n        }\n\n        // Filter the artists for the currently shown country\n        filteredCountryArtists = artists.filter((artist) => filteredCountries.length === 1 && filteredCountries[0].id === artist.id);\n        if (filteredCountryArtists.length > 0 && input.value.length > 1) {\n            const artistsWrapper = document.createElement('ul');\n            artistsWrapper.classList.add('search-result-group');\n            let artistsHeading = document.createElement('li');\n            artistsHeading.textContent = 'Artists from ' + filteredCountries[0].name;\n            artistsHeading.role = \"presentation\"\n            artistsHeading.classList.add('search-result-heading');\n            artistsHeading.id = 'artists-country-heading';\n            artistsWrapper.appendChild(artistsHeading);\n            artistsWrapper.setAttribute('role', 'group');\n            artistsWrapper.setAttribute(\"aria-labelledby\", \"artists-country-heading\");\n            resultsDiv.appendChild(artistsWrapper);\n        \n            filteredCountryArtists.slice(0, 100).forEach(artist => {\n                if (input.value.length > 1) {\n                    let searchResultWrapper = document.createElement('div');\n                    searchResultWrapper.classList.add('result-wrapper');\n                    searchResultWrapper.role = 'option';\n                    searchResultWrapper.id = `${filteredCountries[0].name}-artist-${artist.artist.replace(/\\s+/g, '-').toLowerCase()}`;                    \n                    searchResultWrapper.addEventListener('click', function() {\n                        search.stopSearch();\n                        const country = document.querySelector(`.country#c${artist.id}`);\n                        if (country) {\n                            country.dispatchEvent(new Event('click'));\n                            setTimeout(() => {\n                                map.searchArtist(artist.artist);\n                            }, 250);\n                        }\n                        \n                    });\n                    let artistWrapper = document.createElement('span');\n                    artistWrapper.classList.add('artist-wrapper');\n                    let artistCountryWrapper = document.createElement('span');\n                    artistCountryWrapper.classList.add('country-wrapper');\n                    const srOnlyFrom = document.createElement('span');\n                    srOnlyFrom.classList.add('visually-hidden');\n                    srOnlyFrom.textContent = ', from ';\n                    let artistPlaycount = document.createElement('span');\n                    artistPlaycount.classList.add('playcount');\n                    artistPlaycount.textContent = `${artist.playcount} scrobbles`\n                    const artistNameSpan = document.createElement('span');\n                    artistNameSpan.classList.add('artist-name');\n        \n                    // Highlight the matching letters\n                    let regex = new RegExp(input.value, 'gi');\n                    let highlightedName = artist.artist.replace(regex, match => `<span class=\"highlight\">${match}</span>`);\n                    artistNameSpan.innerHTML = highlightedName;\n        \n                    artistWrapper.appendChild(artistNameSpan);\n                    artistWrapper.appendChild(artistPlaycount);\n                    artistCountryWrapper.textContent = utils.getCountryNameFromId(artist.id);\n                    artistCountryWrapper.prepend(srOnlyFrom);\n                    searchResultWrapper.appendChild(artistWrapper);\n                    searchResultWrapper.appendChild(artistCountryWrapper);\n                    artistsWrapper.appendChild(searchResultWrapper);\n                    artistsWrapper.classList.add('artists-wrapper');\n                }\n            });\n        }\n\n        // Show artists without country when the user types \"unknown\"\n        noCountryArtists = artists.filter((artist) => \n            input.value.toLowerCase() === \"unknown\" && \n            !artist.id\n        );\n\n        if (noCountryArtists.length > 0 && input.value.length > 1) {\n            const artistsWrapper = document.createElement('ul');\n            artistsWrapper.classList.add('search-result-group');\n            let artistsHeading = document.createElement('li');\n            artistsHeading.textContent = 'Artists without a country (first 100)';\n            artistsHeading.role = \"presentation\"\n            artistsHeading.classList.add('search-result-heading');\n            artistsHeading.id = 'unknown-artists-heading';\n            artistsWrapper.appendChild(artistsHeading);\n            artistsWrapper.setAttribute('role', 'group');\n            artistsWrapper.setAttribute(\"aria-labelledby\", \"unknown-artists-heading\");\n            resultsDiv.appendChild(artistsWrapper);\n        \n            noCountryArtists.slice(0, 100).forEach(artist => {\n                if (input.value.length > 1) {\n                    let searchResultWrapper = document.createElement('div');\n                    searchResultWrapper.classList.add('result-wrapper');\n                    searchResultWrapper.role = 'option';\n                    searchResultWrapper.id = `artist-${artist.artist.replace(/\\s+/g, '-').toLowerCase()}`;\n            \n                    // Navigate to the artist's last.fm link on click\n                    searchResultWrapper.addEventListener('click', function() {\n                        search.stopSearch();\n                        if (!utils.getCountryNameFromId(artist.id)) {\n                            window.open(artist.url, '_blank');\n                        }\n                        const country = document.querySelector(`.country#c${artist.id}`);\n                        if (country) {\n                            country.dispatchEvent(new Event('click'));\n                            setTimeout(() => {\n                                map.searchArtist(artist.artist);\n                            }, 250);\n                        }\n                    });\n            \n                    let artistWrapper = document.createElement('span');\n                    artistWrapper.classList.add('artist-wrapper');\n                    let artistCountryWrapper = document.createElement('span');\n                    artistCountryWrapper.classList.add('country-wrapper');\n                    const srOnlyFrom = document.createElement('span');\n                    srOnlyFrom.classList.add('visually-hidden');\n                    srOnlyFrom.textContent = ', from ';\n                    let artistPlaycount = document.createElement('span');\n                    artistPlaycount.classList.add('playcount');\n                    artistPlaycount.textContent = `${artist.playcount} scrobbles`\n                    const artistNameSpan = document.createElement('span');\n                    artistNameSpan.classList.add('artist-name');\n            \n                    // Highlight the matching letters\n                    let regex = new RegExp(input.value, 'gi');\n                    let highlightedName = artist.artist.replace(regex, match => `<span class=\"highlight\">${match}</span>`);\n                    artistNameSpan.innerHTML = highlightedName;\n            \n                    artistWrapper.appendChild(artistNameSpan);\n                    artistWrapper.appendChild(artistPlaycount);\n                    const artistCountryNameSpan = document.createElement('span');\n                    artistCountryNameSpan.classList.add('country-name');\n                    artistCountryNameSpan.textContent = utils.getCountryNameFromId(artist.id) ? utils.getCountryNameFromId(artist.id) : 'Unknown country :-(';\n                    artistCountryWrapper.appendChild(artistCountryNameSpan);\n                    artistCountryWrapper.prepend(srOnlyFrom);\n                    // Check if the country is known\n                    let countryName = utils.getCountryNameFromId(artist.id);\n                    if (!countryName) {\n                        countryName = 'Unknown country';\n                        let addTagsSpan = document.createElement('span');\n                        addTagsSpan.classList.add('add-tags');\n                        addTagsSpan.textContent = 'Go add some tags on Last.fm!';\n                        artistCountryWrapper.appendChild(addTagsSpan);\n                    }\n                    searchResultWrapper.appendChild(artistWrapper);\n                    searchResultWrapper.appendChild(artistCountryWrapper);\n                    artistsWrapper.appendChild(searchResultWrapper);\n                    artistsWrapper.classList.add('artists-wrapper');\n                }\n            });\n        }\n\n        // Announce the number of results to screen readers\n        clearTimeout(typingTimeout);\n        typingTimeout = setTimeout(() => {\n            announcer.announce(search.getAnnouncement(), 'polite');\n        }, 750);\n    });\n\n    window.addEventListener(\"keydown\", function (evt) {\n        const inputElement = document.querySelector('.search');\n\n        // if backspace or letter key, we clear the focused result\n        if (FOCUSED_RESULT && (evt.keyCode === 8 || (evt.keyCode >= 65 && evt.keyCode <= 90))) {\n            FOCUSED_RESULT.removeAttribute(\"aria-selected\")\n            FOCUSED_RESULT.classList.remove('focused');\n            inputElement.removeAttribute('aria-activedescendant');\n            FOCUSED_RESULT = null;\n            // scroll result list to top\n            resultsDiv.scrollTop = 0;\n        }\n\n        // If arrow down, we set aria-activedescentant to the next result\n        if (evt.keyCode === 40 && SEARCH_IS_OPEN) {\n            evt.preventDefault();\n            if (FOCUSED_RESULT) {\n                FOCUSED_RESULT.removeAttribute(\"aria-selected\")\n                FOCUSED_RESULT.classList.remove('focused');\n                inputElement.removeAttribute('aria-activedescendant');\n                let nextResult = FOCUSED_RESULT.nextElementSibling;\n                if (!nextResult) {\n                    // If there's no next sibling, find the next group and select the first result in it\n                    let nextGroup = FOCUSED_RESULT.parentElement.nextElementSibling;\n                    if (nextGroup) {\n                        nextResult = nextGroup.querySelector('.result-wrapper');\n                    }\n                }\n                FOCUSED_RESULT = nextResult;\n                if (FOCUSED_RESULT) {\n                    FOCUSED_RESULT.classList.add('focused');\n                    FOCUSED_RESULT.setAttribute(\"aria-selected\", \"true\")\n                    inputElement.setAttribute('aria-activedescendant', FOCUSED_RESULT.id);\n                    FOCUSED_RESULT.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n                }\n            } else {\n                FOCUSED_RESULT = document.querySelector('.result-wrapper');\n                FOCUSED_RESULT.classList.add('focused');\n                FOCUSED_RESULT.setAttribute(\"aria-selected\", \"true\")\n                inputElement.setAttribute('aria-activedescendant', FOCUSED_RESULT.id);\n                FOCUSED_RESULT.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n            }\n        }\n\n        // If arrow up, we set aria-activedescentant to the previous result\n        if (evt.keyCode === 38 && SEARCH_IS_OPEN) {\n            evt.preventDefault();\n            if (FOCUSED_RESULT) {\n                FOCUSED_RESULT.classList.remove('focused');\n                FOCUSED_RESULT.removeAttribute(\"aria-selected\")\n                inputElement.removeAttribute('aria-activedescendant');\n                let previousResult = FOCUSED_RESULT.previousElementSibling.classList.contains('search-result-heading') ? null : FOCUSED_RESULT.previousElementSibling;\n                if (!previousResult) {\n                    // If there's no previous sibling, find the previous group and select the last result in it\n                    let previousGroup = FOCUSED_RESULT.parentElement.previousElementSibling;\n                    if (previousGroup) {\n                        let resultsInGroup = previousGroup.querySelectorAll('.result-wrapper');\n                        previousResult = resultsInGroup[resultsInGroup.length - 1];\n                    } else {\n                        // If there's no previous group, find the last group and select the last result in it\n                        let allGroups = document.querySelectorAll('.search-result-group');\n                        let lastGroup = allGroups[allGroups.length - 1];\n                        if (lastGroup) {\n                            let resultsInGroup = lastGroup.querySelectorAll('.result-wrapper');\n                            previousResult = resultsInGroup[resultsInGroup.length - 1];\n                        }\n                        \n                    }\n                }\n                FOCUSED_RESULT = previousResult;\n                if (FOCUSED_RESULT) {\n                    FOCUSED_RESULT.classList.add('focused');\n                    FOCUSED_RESULT.setAttribute(\"aria-selected\", \"true\")\n                    inputElement.setAttribute('aria-activedescendant', FOCUSED_RESULT.id);\n                    FOCUSED_RESULT.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n                }\n            }\n        }\n\n        // If enter, activate the focused result\n        if (evt.keyCode === 13 && SEARCH_IS_OPEN) {\n            evt.preventDefault();\n            const currentActiveDescendant = inputElement.getAttribute('aria-activedescendant');\n            // If the user has selected a result\n            if (currentActiveDescendant) {\n                const currentActiveElement = document.getElementById(currentActiveDescendant);\n                if (currentActiveElement) {\n                    currentActiveElement.dispatchEvent(new Event('click'));\n                }\n            }\n            else {\n                console.log('no active descendant');\n                // Select the first visible option\n                const firstVisibleOption = document.querySelector('.result-wrapper');\n                // If the first visible option exists\n                if (firstVisibleOption) {\n                    // Trigger a click event on the first visible option\n                    firstVisibleOption.dispatchEvent(new Event('click'));\n                }\n            }\n        }\n        \n        // If escape, close the search\n        if (evt.keyCode === 27 && SEARCH_IS_OPEN) {\n            search.stopSearch();\n        }\n\n    });\n\n    // Set up click outside listener for search\n    window.addEventListener(\"click\", function (evt) {\n        if (SEARCH_IS_OPEN && !evt.target.closest('.search-container')) {\n            search.stopSearch();\n        }\n    });\n\n  }\n\n\n\n  search.stopSearch = function () {\n    const searchButtonClose = document.querySelector('#search-button');\n    const inputElement = document.querySelector('.search');\n    if (inputElement !== undefined) {\n        inputElement.removeAttribute('aria-activedescendant');\n        inputElement.setAttribute('aria-expanded', 'false');\n    }\n    const searchContainer = document.querySelector('.search-container');\n    if (searchContainer) searchContainer.innerHTML = '';\n    if (searchButtonClose){\n        searchButtonClose.focus( {preventScroll: true} ); \n        searchButtonClose.ariaExpanded = false;\n    };\n    SEARCH_IS_OPEN = false;\n  }\n  search.getSearchStatus = function () {\n    return SEARCH_IS_OPEN;\n  }\n\n  search.setSearchStatus = function (status) {\n    SEARCH_IS_OPEN = status;\n  }\n\n  window.initSearch = search.initSearch;\n\n})();","/*requires:\napi/lastfm.js\n*/\n\nvar api = api || {};\nvar superCount = 0;\n\n(function (window, document) {\n\tlet getHardcodedCountries = () => new Promise((res, rej) =>\n\t\td3.json(\"assets/data/artist-countries.json\", (err, data) =>\n\t\t\terr ? rej(err) : res(data)\n\t\t));\n\n\tapi.getCountriesData = (() => {\n\t\tconsole.log(\"Loading countries data...\")\n\t\tlet promise;\n\n\t\treturn () => {\n\t\t\tif (promise) { return promise; }\n\n\t\t\treturn promise = new Promise((res, rej) => {\n\t\t\t\td3.csv(\"assets/data/countries.csv\", function (err, data) {\n\t\t\t\t\tdata.forEach(d => {\n\t\t\t\t\t\td.id = +d.id;\n\t\t\t\t\t\td.names = d.names ? d.names.split(\"|\") : [];\n\t\t\t\t\t\td.tags = d.tags ? d.tags.split(\"|\") : [];\n\t\t\t\t\t\td.mainName = d.names[0];\n\t\t\t\t\t\td.tag = d.tags[0];\n\t\t\t\t\t\td.name = d.mainName;\n\t\t\t\t\t\td.continent = d.continent || '';\n\t\t\t\t\t});\n\n\t\t\t\t\tres(data);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t})();\n\t\n\tPromise.all([api.getCountriesData(), getHardcodedCountries()]).then(([countryData, hardcodedCountries]) => {\n\t\tcountryData = countryData.map(d => {\n\t\t\tlet splits = [];\n\n\t\t\tif (d.names.length === 1 && d.tags.length === 0) {\n\t\t\t\tsplits = [d];\n\t\t\t}\n\t\t\tif (d.names.length > 1) {\n\t\t\t\tsplits = splits.concat(d.names.map(name => ({ ...d, name })));\n\t\t\t}\n\t\t\tif (d.tags.length > 0) {\n\t\t\t\tsplits = splits.concat(d.tags.map(tag => ({ ...d, tag }))); \n\t\t\t}\n\n\t\t\tif(d.names.length > 1 &&d.tags.length > 0){ splits.splice(0,1); }\n\t\t\t\n\t\t\treturn splits;\n\t\t}).flat();\n\n\t\tlet alias = d3.nest()\n\t\t\t.key(function(d) {\n\t\t\t\tif (d && d.tag) {\n\t\t\t\t\treturn d.tag.toLowerCase();\n\t\t\t\t} else {\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\t\t\t})\n\t\t\t.map(countryData);\n\n\t\tlet cname = d3.nest()\n\t\t\t.key(function(d) {\n\t\t\t\treturn d.name.toLowerCase();\n\t\t\t})\n\t\t\t.map(countryData);\n\n\t\t/**\n\t\t * Tries to find out the country for a specified artist.\n\t\t * @param  {String}   artist   Name of the artist to get country for\n\t\t * @param  {Function} callback Callback function, called when the search is over (whether a country's been found or not)\n\t\t *                             The callback function takes one argument, this object:\n\t\t *\n\t\t * \t\t\t\t\t\t\t\t```\n\t\t *                             {\n\t\t *                             \t\"artist\": \"\", // <artist name>,\n\t\t *                             \t\"country\": \"\", // <country name>,\n\t\t *                             \t\"id\": \"\", // <country id>,\n\t\t *                             \t\"tag\": \"\", // <the tag that decided the country (e.g. Swedish for Sweden)>\n\t\t *                             }\n\t\t * \t\t\t\t\t\t\t\t```\n\t\t *\n\t\t * \t\t\t\t\t\t\t\tIf no country could be found, \"country\", \"tag\" and \"id\" are undefined.\n\t\t *\n\t\t */\n\t\tapi.getCountry = function(artist, callback) {\n\t\t\tif (hardcodedCountries[artist]) {\n\t\t\t\tlet hardcodedTagName = hardcodedCountries[artist].toLowerCase();\n\t\t\t\t\n\t\t\t\tconsole.log(`Using hardcoded country tag \"${hardcodedTagName}\" for artist \"${artist}\"`)\n\t\t\t\t\n\t\t\t\tcallback({\n\t\t\t\t\tartist,\n\t\t\t\t\ttag: hardcodedTagName,\n\t\t\t\t\tid: cname[hardcodedTagName][0].id,\n\t\t\t\t\tcountry: cname[hardcodedTagName][0].mainName\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// Get artists country code here, from last.fm or whatever\n\t\t\tapi.lastfm.send(\"artist.gettoptags\", [[\"artist\", artist]], function(err, responseData2) {\n\t\t\t\t// Return if something failed\n\t\t\t\tif (err || !responseData2.toptags || !responseData2.toptags.tag || !\n\t\t\t\t\tresponseData2.toptags.tag.length) {\n\t\t\t\t\tcallback({\n\t\t\t\t\t\t\"artist\": artist\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Lista med taggar vi vill dubbelkolla\n\t\t\t\tvar troubleCountries = [\"georgia\", \"ireland\"];\n\t\t\t\tvar troubleLanguages = [\"spanish\", \"french\", \"english\", \"portuguese\", \"russian\", \"italian\", \"japanese\", \"korean\", \"indian\", \"swedish\", \"irish\"];\n\t\t\t\tvar theTroubles = [].concat(troubleCountries, troubleLanguages);\n\n\t\t\t\t// check for country-tags in the artist's tags\n\t\t\t\tlet demonymTag = { tag: \"\", id: null, country: \"\", count: 0 };\n\t\t\t\tlet countryTag = demonymTag;\n\n\t\t\t\tresponseData2.toptags.tag.some(function (t, i) {\n\t\t\t\t\tvar tname = t.name.toLowerCase();\n\n\t\t\t\t\t// no need to search anymore since we only care\n\t\t\t\t\t// about the créme de la creme i.e. the tag with the\n\t\t\t\t\t// highest count\n\t\t\t\t\tif (countryTag.id && demonymTag.id) { return true; }\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// sweden->sweden\n\t\t\t\t\t\tif (!countryTag.id && cname[tname] && cname[tname][0].id) {\n\t\t\t\t\t\t\tcountryTag = { tag: tname, id: cname[tname][0].id, country: cname[tname][0].mainName, count: t.count };\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// swedish -> sweden\n\t\t\t\t\t\tif (!demonymTag.id && alias[tname] && alias[tname][0].id) {\n\t\t\t\t\t\t\tdemonymTag = { tag: tname, id: alias[tname][0].id, country: alias[tname][0].name, count: t.count };\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {}\n\t\t\t\t});\n\n\t\t\t\t// country is best, demonym second\n\t\t\t\tvar bestTag = (countryTag.id && demonymTag.count < 8 * countryTag.count) ?\n\t\t\t\t\tcountryTag :\n\t\t\t\t\t(demonymTag.id \n\t\t\t\t\t\t? demonymTag\n\t\t\t\t\t\t: {});\n\n\t\t\t\tif (countryTag.tag === \"georgia\" && responseData2.toptags.tag.some(function (t) {\n\t\t\t\t\t\treturn [\"american\", \"us\", \"usa\"].includes(t.name.toLowerCase())\n\t\t\t\t\t})) {\n\t\t\t\t\t// it's not the country...\n\t\t\t\t\tbestTag = demonymTag;\n\n\t\t\t\t\tconsole.info(\"'\" + artist + \"' is tagged with 'georgia', but I'm gonna go ahead and guess they're really from the U.S.\");\n\t\t\t\t}\n\n\t\t\t\tif (theTroubles.includes(bestTag.tag)) {\n\t\t\t\t\tconsole.info(\"Potentially incorrect country for '\" + artist + \"': \" + bestTag.country + \", using the tag '\" + bestTag.tag + \"'\");\n\t\t\t\t}\n\n\t\t\t\tcallback(Object.assign({ \"artist\": artist, }, bestTag));\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Returns a list of country objects for a list of artist names.\n\t\t *\n\t\t * Beware!!! overwrites localstorage.artists when done!!! woaps!!!!!! dododod!!!\n\t\t * @param  {Array}   artists  Array of artist names (String)\n\t\t * @param  {Function} callback Callback function. Argument is a list of country objects,\n\t\t *                             containing only those artists that have a country\n\t\t *                             associated with them. For object structure, see api.getCountry\n\t\t */\n\t\tapi.getCountries = function(artists, callback) {\n\t\t\tvar returnList = [],\n\t\t\t\tcount = 0;\n\t\t\t/**\n\t\t\t * Increases a count and checks if we've tried\n\t\t\t * to get country for all artists\n\t\t\t */\n\t\t\tvar checkCount = function() {\n\t\t\t\tcount++;\n\t\t\t\tsuperCount++;\n\t\t\t\tscript.setLoadingStatus(`Loading artists, please wait... (${superCount} / ${SESSION.total_artists})`);\n\t\t\t\td3.select(\"#loading-text\").html(\"Loading artists...<br>(\" + superCount + \"/\" + SESSION.total_artists + \")<br>You can start exploring,<br>but it might interfere<br>with loading your artists.\");\n\t\t\t\tif (count === artists.length) {\n\t\t\t\t\t// We done, save artists and call back\n\t\t\t\t\tlocalforage.setItem(\"artists\", STORED_ARTISTS, function (err) {\n\t\t\t\t\t\tif (err) { console.error(\"Failed saving artists to storage: \", err); }\n\t\t\t\t\t\tcallback(returnList);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Get countries for all artists\n\t\t\tartists.forEach(function(el, i) {\n\t\t\t\t// first check stored artists to see if we've already checked this artist\n\t\t\t\tif (STORED_ARTISTS[el] && STORED_ARTISTS[el].country) {\n\t\t\t\t\tvar returnObject = STORED_ARTISTS[el].country;\n\t\t\t\t\treturnObject.artist = el;\n\t\t\t\t\treturnList.push(returnObject);\n\t\t\t\t\tcheckCount();\n\t\t\t\t} else {\n\t\t\t\t\tvar start = new Date().getTime();\n\n\t\t\t\t\tapi.getCountry(el, function(data) {\n\t\t\t\t\t\tSTORED_ARTISTS[el] = STORED_ARTISTS[el] || {};\n\t\t\t\t\t\t// console.error(data)\n\n\t\t\t\t\t\t// if (data.name) {\n\t\t\t\t\t\tSTORED_ARTISTS[el].country = {\n\t\t\t\t\t\t\t\"id\": data.id,\n\t\t\t\t\t\t\t\"name\": data.name,\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturnList.push(data);\n\t\t\t\t\t\t// }\n\t\t\t\t\t\t// console.log(\"apicall \" + (new Date().getTime() - start) + \" ms\");\n\n\t\t\t\t\t\t// Update loading div, whoah ugly code yeah whaddayagonnado\n\n\n\t\t\t\t\t\tcheckCount();\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t})\n\t\t}\n\t})\n\n\t/**\n\t * Get all tags for an artist.\n\t * @param  {String}   artist   Artist name\n\t * @param  {Function} callback Callback function. Takes one argument which is an array\n\t *                             of tag objects (see the last.fm api doc for tag object structure)\n\t */\n\tapi.getTags = function(artist, callback) {\n\t\t// Check if artist tags are already saved, if so return them\n\t\tif (STORED_ARTISTS[artist] && STORED_ARTISTS[artist].tags) {\n\t\t\t// console.log(\"Had in store, no api call\");\n\t\t\tcallback(STORED_ARTISTS[artist].tags);\n\t\t} else {\n\t\t\t// Create object in localstorage\n\t\t\tSTORED_ARTISTS[artist] = STORED_ARTISTS[artist] || {};\n\t\t\tSTORED_ARTISTS[artist].tags = [];\n\n\t\t\t// Get from lastfm\n\t\t\tapi.lastfm.send(\"artist.gettoptags\", [[\"artist\", artist]],\n\t\t\t\tfunction(err, responseData2) {\n\t\t\t\t\tSTORED_ARTISTS[artist].tags = responseData2.toptags.tag;\n\t\t\t\t\tlocalforage.setItem(\"artists\", STORED_ARTISTS, function (err) {\n\t\t\t\t\t\tif (err) { console.error(\"Failed saving artists to storage: \", err); }\n\t\t\t\t\t\tcallback(STORED_ARTISTS[artist].tags);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t}\n\t}\n\n\tapi.getArtistInfo = function(artist, callback) {\n\t\tvar artistInfo = [];\n\n\t\tapi.lastfm.send(\"artist.getinfo\", [[\"artist\", artist]], function(err, data1) {\n\t\t\t//Creating a list of tag names\n\t\t\tvar tagnamelist = [];\n\t\t\tif (data1.artist.tags.tag) {\n\t\t\t\tdata1.artist.tags.tag.forEach(function(t, i) {\n\t\t\t\t\ttagnamelist.push(t.name);\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tartistInfo.push({\n\t\t\t\tname: artist,\n\t\t\t\turl: data1.artist.url,\n\t\t\t\timage: data1.artist.image[3][\"#text\"],\n\t\t\t\tdescription: data1.artist.bio.summary,\n\t\t\t\ttags: tagnamelist\n\t\t\t})\n\t\t\tcallback(artistInfo);\n\t\t})\n\n\n\n\t}\n\n\t/**\n\t * Gets a list of artists with tags similar to the user's top tags, sorted in descending order.\n\t * Also included are which tags matched.\n\t *\n\t * Calling this function cancels previous requests initiated by this function.\n\t * @param  {String}   country  Name of country or country alias (sweden, swedish, your choice)\n\t * @param  {Function} callback Callback function. Argument is a list of artists.\n\t */\n\tvar recommendationRequests = [];\n\tapi.cancelRecommendationRequests = function () {\n\t\trecommendationRequests.forEach(function (xhr) {\n\t\t\txhr.abort();\n\t\t});\n\n\t\trecommendationRequests = [];\n\t}\n\tapi.getRecommendations = function (country, callback) {\n\t\tapi.cancelRecommendationRequests();\n\n\t\tvar recommendations = [];\n\n\t\t// get top tags for user\n\t\tvar toptags = USER_TAGS.slice(0, 15);\n\t\t// make tag list to an object (back n forthss)\n\t\tvar userTagObj = d3.nest().key(function(d) {\n\t\t\treturn d.tag;\n\t\t}).rollup(function(d) {\n\t\t\treturn d[0].count;\n\t\t}).map(toptags);\n\n\n\t\t//console.log(\"Got top tags for user!\")\n\n\t\t// Get top artists for tag country\n\t\tvar xhr1 = api.lastfm.send(\"tag.gettopartists\", [[\"tag\", country], [\"limit\", 100]], function(err, data1) {\n\t\t\t// Gotta count matching tags to then sort\n\t\t\tvar tagCounts = {};\n\n\t\t\t// Get the tags for these artists\n\t\t\t//console.log(data1, err)\n\t\t\tif (err || data1.error || !data1.topartists || !data1.topartists.artist) {\n\t\t\t\tcallback([]);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar artists = data1.topartists.artist;\n\n\t\t\tartists.forEach(function(a, num) {\n\t\t\t\ttagCounts[a.name] = [];\n\t\t\t\tvar xhr2 = api.lastfm.send(\"artist.gettoptags\", [[\"artist\", a.name]], function(err, data2) {\n\t\t\t\t\tvar hasTags = !data2.error && (data2.toptags.tag ? true : false);\n\t\t\t\t\td3.select(\"#rec-loading-current\").html(\"(\" + a.name + \")\");\n\t\t\t\t\tif (hasTags) {\n\t\t\t\t\t\t// Compare top 10 tags to user tags\n\t\t\t\t\t\tvar tags = d3.nest().key(function(d) {\n\t\t\t\t\t\t\treturn d.name;\n\t\t\t\t\t\t}).map(data2.toptags.tag);\n\n\t\t\t\t\t\t// Get rid of justin bieber\n\t\t\t\t\t\tif (tags[country]) {\n\t\t\t\t\t\t\tfor (var i = data2.toptags.tag.length - 1; i >= 0; i--) {\n\t\t\t\t\t\t\t\tif (userTagObj[data2.toptags.tag[i].name] && data2.toptags.tag[i].count > 5) {\n\t\t\t\t\t\t\t\t\ttagCounts[a.name].push(data2.toptags.tag[i].name);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (num === artists.length - 1) {\n\t\t\t\t\t\t//console.log(\"We've gotten tag counts for all artists, make a list!\")\n\t\t\t\t\t\td3.keys(tagCounts).forEach(function(d) {\n\t\t\t\t\t\t\trecommendations.push({\n\t\t\t\t\t\t\t\tname: d,\n\t\t\t\t\t\t\t\tcount: tagCounts[d].length,\n\t\t\t\t\t\t\t\ttags: tagCounts[d]\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\trecommendations.sort(function(a, b) {\n\t\t\t\t\t\t\treturn b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t//console.log(recommendations)\n\t\t\t\t\t\tcallback(recommendations);\n\t\t\t\t\t}\n\n\t\t\t\t})\n\n\t\t\t\trecommendationRequests.push(xhr2);\n\t\t\t})\n\t\t})\n\n\t\trecommendationRequests.push(xhr1);\n\t}\n\n\tapi.getFriends = function(callback) {\n\t\tapi.lastfm.send(\"user.getFriends\", [[\"user\", SESSION.name]], callback);\n\t}\n\n})(window, document);\n","const utils = utils || {};\n\n(function () {\n  utils.exportToCSV = function (countryCountObj) {\n    const list = map.countryNames.map((country) => {\n      const countryCount = countryCountObj[country.id];\n      return {\n        countryId: country.id,\n        countryName: country.mainName,\n        artists: (countryCount && countryCount[SESSION.name]) || [],\n      };\n    });\n\n    let csv = json2csv.parse(\n      list.sort(({ countryName: a }, { countryName: b }) =>\n        a.localeCompare(b, \"en\")\n      ),\n      {\n        fields: [\n          { label: \"Country\", value: \"countryName\" },\n          { label: \"Number of artists\", value: (row) => row.artists.length },\n          {\n            label: \"Scrobbles\",\n            value: (row) =>\n              row.artists.reduce((acc, artist) => acc + artist.playcount, 0),\n          },\n        ],\n      }\n    );\n\n    csv = \"data:text/csv;charset=utf-8,\" + csv.replaceAll(`\"`, \"\");\n\n    window.open(encodeURI(csv));\n  };\n\n  utils.getCountryNameFromId = function (countryId) {\n    const match = map.countryNames.find((country) => country.id === countryId);\n    if (match && match.mainName) {\n      return match.mainName;\n    }\n    else return \"\"\n  }\n\n  utils.getNumberOfArtistsForCountry = function (countryId) {\n    // Get the current data\n    let data = script.getCurrentData();\n\n    // Flatten and prepare the data\n    let artists = [].concat(...Object.values(data));\n    artists = artists.reduce((acc, item) => {\n        for (let key in item) {\n            if (item.hasOwnProperty(key)) {\n                acc = acc.concat(item[key]);\n            }\n        }\n        return acc;\n    }, [])\n    const artistList = artists.filter(artist => artist.id === countryId)\n    return artists.filter(artist => artist.id === countryId).length\n  }\n})();\n","var screenshot = {};\n\n(function (window, document) {\n\tscreenshot.render = function (autoDownload = false) {\n\t\tvar titleString,\n\t\t\tsubtitleString = \"Make your own at explr.fm\",\n\t\t\timg;\n\n\t\tvar explrLogo = new Image();\n\n\t\tvar svg = d3.select(\"#map-svg\");\n\t\tvar w = svg.attr(\"width\");\n\t\tvar h = svg.attr(\"height\");\n\n\t\tvar canvas = document.createElement(\"canvas\");\n\t\tvar ctx = canvas.getContext(\"2d\");\n\n\t\t// canvg(canvas, document.getElementById(\"map-svg\").outerHTML);\n\n\t\tvar backgroundColor = window.getComputedStyle(document.body).backgroundColor;\n\t\tvar textColor = window.getComputedStyle(document.body).color;\n\n\t\tvar drawCenteredText = function (obj) {\n\t\t\tctx.font = obj.font;\n\t\t\tctx.fillText(obj.string, w / 2 - ctx.measureText(obj.string).width / 2, obj.y);\n\n\t\t\tif (obj.lineWidth) {\n\t\t\t\tctx.lineWidth = obj.lineWidth;\n\t\t\t\tctx.strokeStyle = obj.strokeStyle;\n\t\t\t\tctx.strokeText(obj.string, w / 2 - ctx.measureText(obj.string).width / 2, obj.y);\n\t\t\t}\n\t\t}\n\n\t\tcanvas.width = w;\n\t\tcanvas.height = h;\n\n\t\t// insert background rect\n\t\tsvg.insert(\"rect\", \"g\")\n\t\t\t.attr({\n\t\t\t\tid: \"background-rect\",\n\t\t\t\twidth: \"100%\",\n\t\t\t\theight: \"100%\",\n\n\t\t\t})\n\t\t\t.style({\n\t\t\t\tfill: backgroundColor,\n\t\t\t});\n\n\t\t// Add color, font to legend text\n\t\td3.selectAll('.legend text, text.legend').style({\n\t\t\t\"font-family\": function () {\n\t\t\t\treturn window.getComputedStyle(this)[\"fontFamily\"];\n\t\t\t},\n\t\t\t\"font-size\": function () {\n\t\t\t\treturn window.getComputedStyle(this)[\"fontSize\"];\n\t\t\t},\n\t\t\t\"fill\": textColor,\n\t\t});\n\t\td3.selectAll(\".legend rect\").style({\n\t\t\tstroke: backgroundColor,\n\t\t})\n\n\t\tcanvg(canvas, new XMLSerializer().serializeToString(svg[0][0]));\n\n\t\texplrLogo.onload = function () {\n\t\t\t/* Add text and shiiet */\n\t\t\t// Add text background box\n\t\t\tctx.save(); // To draw with different opaticy\n\t\t\tctx.globalAlpha = 0.6;\n\t\t\tctx.fillStyle = backgroundColor;\n\t\t\tlet scoreString = SESSION.total_artists + \" artists from \" + countryScore + \" / 210 countries\";\n\t\t\tlet titleString = SESSION.name + \"'s musical world map\";\n\t\t\tctx.font = \"34px Patua One\";\n\t\t\tctx.fillRect(w / 2 - ctx.measureText(titleString).width / 2 - 20, h - 110, ctx.measureText(titleString).width + 40, 100);\n\t\t\tctx.fillStyle = textColor;\n\n\t\t\t// Add text\n\t\t\tctx.fillStyle = textColor;\n\t\t\tdrawCenteredText({\n\t\t\t\tstring: titleString,\n\t\t\t\tfont: \"34px Patua One\",\n\t\t\t\ty: h - 60,\n\t\t\t});\n\t\t\tdrawCenteredText({\n\t\t\t\tstring: scoreString,\n\t\t\t\tfont: \"20px Didact Gothic\",\n\t\t\t\ty: h - 40,\n\t\t\t});\n\n\t\t\t// Add explr.fm logo\n\t\t\tctx.restore();\n\t\t\tctx.drawImage(explrLogo, w - 130, h - 60, 100, 36);\n\n\t\t\td3.select(\"#background-rect\").remove();\n\n\t\t\t//console.log(canvas.toDataURL())\n\t\t\t// img = document.createElement(\"img\").src = canvas.toDataURL();\n\t\t\tdocument.getElementById(\"screenshot-img\").src = canvas.toDataURL(\"image/png\");\n\t\t\t// d3.select(\"body\").append(img);\n\t\t\t//\n\n\t\t\tvar dataurl = canvas.toDataURL(\"image/png\");\n\t\t\t// console.log(\"dataurl:\", dataurl)\n\n\t\t\t// window.open(dataurl, \"_blank\");\n\n\t\t\tconst overlay = document.getElementsByClassName(\"screenshot-overlay\")[0];\n\t\t\toverlay.style = \"\";\n\t\t\toverlay.ariaModal = true\n\n\n\t\t\tif (autoDownload) {\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tscreenshot.download();\n\t\t\t\t\tscreenshot.close();\n\t\t\t\t}, 0);\n\t\t\t}\n\n\t\t}\n\t\texplrLogo.src = \"assets/img/explrlogo.png\";\n\t}\n\n\tscreenshot.close = function () {\n\t\tdocument.getElementsByClassName(\"screenshot-overlay\")[0].style = \"display:none;\";\n\t\tdocument.getElementsByClassName(\"screenshot-overlay\")[0].ariaModal = false;\n\t}\n\n\tscreenshot.download = function () {\n\t\tvar dataurl = document.getElementById(\"screenshot-img\").src;\n\t\n\t\t// Create a new anchor element\n\t\tvar a = document.createElement('a');\n\t\n\t\t// Set the href and download attributes of the anchor\n\t\ta.href = dataurl;\n\t\ta.download = 'screenshot.png'; // or any other filename you want\n\t\n\t\t// Append the anchor to the body (this is necessary for Firefox)\n\t\tdocument.body.appendChild(a);\n\t\n\t\t// Programmatically click the anchor\n\t\ta.click();\n\t\n\t\t// Remove the anchor from the body\n\t\tdocument.body.removeChild(a);\n\t}\n\n})(window, document);\n","/* requires:\naria-announcer.js\nsearch.js\n*/\n\nconst keyboardMode = keyboardMode || {};\n\nconst MIN_ZOOM_LEVEL_FOR_KEYBOARD_MODE = 7;\nconst MAX_COUNTRY_SUGGESTIONS = 20;\nlet KEYBOARD_MODE_ACTIVE = false;\n// Use numbers 1–99 for country shortcuts\nconst NUMBER_POOL = Array.from({length: 99}, (_, i) => (i + 1).toString());\n\nlet visibleCountries = [];\nlet keyBuffer = '';\nlet keyBufferTimer = null;\nlet keyboardModeActive = false;\nlet isKeyboardModeEnabled = false;\nlet currentFocus = null;\n\n// Add a list of country IDs to exclude from keyboard mode\nconst EXCLUDED_COUNTRY_IDS = [\n  831, // Jersey\n  832, // Guernsey\n  833, // Isle of Man\n  136, // Cayman Islands\n  796, // Turks and Caicos Islands\n];\n\n// Add a map to store country-to-number assignments\nlet countryNumberMap = {};\n\n// Buffer for multi-digit number input\nlet numberBuffer = '';\nlet numberBufferTimer = null;\nconst NUMBER_BUFFER_TIMEOUT = 1000; // ms\n\nconst handleNumberKeyPress = (e) => {\n    // Only handle number keys, and not if in an input\n    if (!e.key.match(/^[0-9]$/) || e.target.tagName === \"INPUT\") return;\n    if (e.ctrlKey || e.altKey || e.shiftKey || e.metaKey) return;\n\n    numberBuffer += e.key;\n    // Remove leading zeros\n    numberBuffer = numberBuffer.replace(/^0+/, '');\n\n    // If buffer is empty or >2 digits, reset\n    if (!numberBuffer || numberBuffer.length > 2) {\n        numberBuffer = '';\n        return;\n    }\n\n    // If two digits, try to select immediately\n    if (numberBuffer.length === 2) {\n        const targetCountryId = Object.keys(countryNumberMap).find(\n            id => countryNumberMap[id] === numberBuffer\n        );\n        if (targetCountryId) {\n            const targetCountry = visibleCountries.find(country => country.id === targetCountryId);\n            if (targetCountry) {\n                // Find the corresponding SVG country element using D3\n                const svgCountry = d3.select(`#${targetCountry.id}`).node();\n                if (svgCountry) {\n                    svgCountry.dispatchEvent(new Event('click'));\n                    keyboardMode.cleanup();\n                }\n                ga('send', {\n                    hitType: 'event',\n                    eventCategory: 'Keyboard',\n                    eventAction: 'Opened country',\n                    eventLabel: 'test'\n                });\n            }\n            numberBuffer = '';\n            clearTimeout(numberBufferTimer);\n            numberBufferTimer = null;\n            return;\n        }\n        // If not valid, wait for timeout and then clear\n        clearTimeout(numberBufferTimer);\n        numberBufferTimer = setTimeout(() => {\n            numberBuffer = '';\n        }, NUMBER_BUFFER_TIMEOUT);\n        return;\n    }\n\n    // If single digit, check if any two-digit number starting with this digit is assigned\n    const hasTwoDigit = Object.values(countryNumberMap).some(num => num.length === 2 && num.startsWith(numberBuffer));\n    if (!hasTwoDigit) {\n        // No possible two-digit, select immediately if valid\n        const targetCountryId = Object.keys(countryNumberMap).find(\n            id => countryNumberMap[id] === numberBuffer\n        );\n        if (targetCountryId) {\n            const targetCountry = visibleCountries.find(country => country.id === targetCountryId);\n            if (targetCountry) {\n                // Find the corresponding SVG country element using D3\n                const svgCountry = d3.select(`#${targetCountry.id}`).node();\n                if (svgCountry) {\n                    svgCountry.dispatchEvent(new Event('click'));\n                    keyboardMode.cleanup();\n                }\n                ga('send', {\n                    hitType: 'event',\n                    eventCategory: 'Keyboard',\n                    eventAction: 'Opened country',\n                    eventLabel: 'test'\n                });\n            }\n            numberBuffer = '';\n            clearTimeout(numberBufferTimer);\n            numberBufferTimer = null;\n            return;\n        }\n    }\n    // Otherwise, wait for next digit or timeout\n    clearTimeout(numberBufferTimer);\n    numberBufferTimer = setTimeout(() => {\n        // If still single digit and valid, select now\n        if (numberBuffer.length === 1) {\n            const targetCountryId = Object.keys(countryNumberMap).find(\n                id => countryNumberMap[id] === numberBuffer\n            );\n            if (targetCountryId) {\n                const targetCountry = visibleCountries.find(country => country.id === targetCountryId);\n                if (targetCountry) {\n                    // Find the corresponding SVG country element using D3\n                    const svgCountry = d3.select(`#${targetCountry.id}`).node();\n                    if (svgCountry) {\n                        svgCountry.dispatchEvent(new Event('click'));\n                        keyboardMode.cleanup();\n                    }\n                    ga('send', {\n                        hitType: 'event',\n                        eventCategory: 'Keyboard',\n                        eventAction: 'Opened country',\n                        eventLabel: 'test'\n                    });\n                }\n            }\n        }\n        numberBuffer = '';\n    }, NUMBER_BUFFER_TIMEOUT);\n};\n\nfunction getCurrentlyVisibleCountries() {\n    const userName = window.location.href.split(\"username=\")[1];\n    let data = script.getCurrentData();\n    // return an array consisting of objects with the country name in plain text + the index number of the country\n    let formattedCountries = [];\n    \n    // Add null checks and error handling\n    if (!data || !userName) {\n        console.warn('Data or username not available');\n        return formattedCountries;\n    }\n\n    visibleCountries.forEach((country) => {\n        const countryId = parseInt(country.id.slice(1));\n        \n        // Skip excluded country IDs\n        if (EXCLUDED_COUNTRY_IDS.includes(countryId)) {\n            return;\n        }\n        \n        const number = countryNumberMap[country.id];\n        \n        // Add null checks for data[countryId] and data[countryId][userName]\n        const artistCount = data[countryId] && data[countryId][userName] ? \n            data[countryId][userName].length : 0;\n            \n        // Only add countries that have a valid name\n        const countryName = utils.getCountryNameFromId(countryId);\n        if (countryName && countryName !== \"undefined\") {\n            formattedCountries.push({\n                name: countryName,\n                number: number,\n                artistCount: artistCount,\n                id: countryId\n            });\n        }\n    });\n    return formattedCountries;\n}\n\nfunction isInViewport(element) {\n    // Get country ID from the element\n    const countryId = parseInt(element.id.slice(1));\n    \n    // Skip excluded country IDs\n    if (EXCLUDED_COUNTRY_IDS.includes(countryId)) {\n        return false;\n    }\n    \n    // Check if we have an override for this country in map.COUNTRY_BBOX_OVERRIDES\n    if (map.COUNTRY_BBOX_OVERRIDES && map.COUNTRY_BBOX_OVERRIDES[countryId]) {\n        // For countries with multiple boxes (like USA), check if any box is visible\n        const overrides = map.COUNTRY_BBOX_OVERRIDES[countryId];\n        const boxArray = Array.isArray(overrides[0]) ? overrides : [overrides];\n        \n        return boxArray.some(bbox => isBBoxInViewport(bbox));\n    }\n    \n    // Fall back to the current implementation for countries without overrides\n    const rect = element.getBoundingClientRect();\n\n    // Define the dimensions of the rectangle\n    const rectangleWidth = 500;\n    const rectangleHeight = 500;\n\n    // Calculate the position of the rectangle\n    const rectangleLeft = (window.innerWidth - rectangleWidth) / 2;\n    const rectangleRight = rectangleLeft + rectangleWidth;\n    const rectangleTop = (window.innerHeight - rectangleHeight) / 2;\n    const rectangleBottom = rectangleTop + rectangleHeight;\n\n    // Check if the element is partially within the rectangle\n    return (\n        rect.top <= rectangleBottom &&\n        rect.bottom >= rectangleTop &&\n        rect.left <= rectangleRight &&\n        rect.right >= rectangleLeft\n    );\n}\n\n// New helper function to check if a geographic bounding box is in the viewport\nfunction isBBoxInViewport(bbox) {\n    // Convert geographic coordinates to screen coordinates\n    const [west, south, east, north] = bbox;\n    \n    // Create points for the corners of the bounding box\n    const corners = [\n        [west, north], // Northwest\n        [east, north], // Northeast\n        [east, south], // Southeast\n        [west, south]  // Southwest\n    ];\n    \n    // Project each corner to screen coordinates\n    const screenCorners = corners.map(coord => {\n        const projected = map.projection(coord);\n        return {\n            x: projected[0],\n            y: projected[1]\n        };\n    });\n    \n    // Find the bounding box of the projected corners\n    const minX = Math.min(...screenCorners.map(p => p.x));\n    const maxX = Math.max(...screenCorners.map(p => p.x));\n    const minY = Math.min(...screenCorners.map(p => p.y));\n    const maxY = Math.max(...screenCorners.map(p => p.y));\n    \n    // Get the current transform from the zoom behavior\n    const zoom = d3.select(\"#map-svg\").call(map.zoom);\n    const scale = map.zoom.scale();\n    const translate = map.zoom.translate();\n    \n    // Apply the transform to the bounding box\n    const transformedMinX = translate[0] + minX * scale;\n    const transformedMaxX = translate[0] + maxX * scale;\n    const transformedMinY = translate[1] + minY * scale;\n    const transformedMaxY = translate[1] + maxY * scale;\n    \n    // Define the dimensions of the viewport rectangle\n    const rectangleWidth = 400;\n    const rectangleHeight = 400;\n    \n    // Calculate the position of the rectangle\n    const rectangleLeft = (window.innerWidth - rectangleWidth) / 2;\n    const rectangleRight = rectangleLeft + rectangleWidth;\n    const rectangleTop = (window.innerHeight - rectangleHeight) / 2;\n    const rectangleBottom = rectangleTop + rectangleHeight;\n    \n    // Check if the transformed bounding box intersects with the viewport rectangle\n    return !(\n        transformedMaxX < rectangleLeft ||\n        transformedMinX > rectangleRight ||\n        transformedMaxY < rectangleTop ||\n        transformedMinY > rectangleBottom\n    );\n}\n\nfunction displayKeyboardModeMessage() {\n    const message = document.getElementById(\"keyboard-mode-message\");\n    message.classList.remove(\"hidden\");\n    const innerMessage = document.createElement(\"div\");\n    innerMessage.innerHTML = \"<h2>Keyboard mode active! <span class='fa fa-keyboard'></span> </h2><p>Type a <kbd>number</kbd> to select a country.<p><p>Move around with <kbd>&#8592;</kbd><kbd>&#8594;</kbd><kbd>&#8593;</kbd><kbd>&#8595;</kbd> keys.</p><p>Zoom out with <kbd>-</kbd> key. </p><p>Toggle audio feedback with <kbd>A</kbd> key.</p>\";\n    message.appendChild(innerMessage);\n    \n    // Add the visual indicator for the 400x400 box\n    addViewportBoxIndicator();\n}\n\nfunction hideKeyboardModeMessage() {\n    const message = document.getElementById(\"keyboard-mode-message\");\n    message.classList.add(\"hidden\");\n    message.innerHTML = \"\";\n    \n    // Remove the visual indicator\n    removeViewportBoxIndicator();\n}\n\n// Add a visual indicator for the 400x400 box used to determine visible countries\nfunction addViewportBoxIndicator() {\n    // Remove any existing indicator first\n    removeViewportBoxIndicator();\n    \n    // Create the indicator element\n    const indicator = document.createElement(\"div\");\n    indicator.id = \"viewport-box-indicator\";\n    \n    // Calculate the position and size\n    const rectangleWidth = 400;\n    const rectangleHeight = 400;\n    const rectangleLeft = (window.innerWidth - rectangleWidth) / 2;\n    const rectangleTop = (window.innerHeight - rectangleHeight) / 2;\n    \n    // Set the styles\n    indicator.style.position = \"fixed\";\n    indicator.style.left = rectangleLeft + \"px\";\n    indicator.style.top = rectangleTop + \"px\";\n    indicator.style.width = rectangleWidth + \"px\";\n    indicator.style.height = rectangleHeight + \"px\";\n    indicator.style.border = \"1px solid rgba(255, 255, 255, 0.6)\";\n    indicator.style.pointerEvents = \"none\"; // Make sure it doesn't interfere with clicks\n    indicator.style.zIndex = \"1000\"; // Make sure it's above the map but below other UI\n    indicator.style.boxSizing = \"border-box\";\n\n    \n    // Update position on window resize\n    window.addEventListener('resize', updateViewportBoxPosition);\n}\n\nfunction removeViewportBoxIndicator() {\n    const indicator = document.getElementById(\"viewport-box-indicator\");\n    if (indicator) {\n        indicator.remove();\n    }\n    window.removeEventListener('resize', updateViewportBoxPosition);\n}\n\nfunction updateViewportBoxPosition() {\n    const indicator = document.getElementById(\"viewport-box-indicator\");\n    if (indicator) {\n        const rectangleWidth = 400;\n        const rectangleHeight = 400;\n        const rectangleLeft = (window.innerWidth - rectangleWidth) / 2;\n        const rectangleTop = (window.innerHeight - rectangleHeight) / 2;\n        \n        indicator.style.left = rectangleLeft + \"px\";\n        indicator.style.top = rectangleTop + \"px\";\n    }\n}\n\nfunction getPathCenter(path) {\n    const y = parseFloat(path.getAttribute(\"data-center-y\"));\n    const x = parseFloat(path.getAttribute(\"data-center-x\"));\n    return {\n        x: -x,\n        y: -y\n    };\n    \n  }\n\nlet hasAnnounced = false;\n\nfunction getVisibleCountries() {\n    // Get all country elements in a D3 v3 compatible way\n    const countriesSelection = d3.selectAll(\".country\");\n    const countries = [];\n    \n    // Convert D3 selection to array in v3 compatible way\n    countriesSelection.each(function() {\n        countries.push(this);\n    });\n    \n    // Filter out countries that should be excluded\n    const filteredCountries = countries.filter(country => {\n        const countryId = parseInt(country.id.slice(1));\n        \n        // Skip excluded country IDs\n        if (EXCLUDED_COUNTRY_IDS.includes(countryId)) {\n            return false;\n        }\n        \n        // Skip countries with undefined names\n        const countryName = utils.getCountryNameFromId(countryId);\n        if (!countryName || countryName === \"undefined\") {\n            return false;\n        }\n        \n        // Check if the country is in the viewport\n        return isInViewport(country);\n    });\n    \n    return filteredCountries;\n}\n\n// New function to get a summary of visible countries\nfunction getVisibleCountriesSummary() {\n    const countries = getVisibleCountries();\n    return `${countries.length} ${countries.length === 1 ? 'country' : 'countries'} visible, press L to list`;\n}\n\nfunction updateVisibleCountries(zoom) {\n    keyboardMode.cleanup();\n    \n    // Get filtered visible countries\n    visibleCountries = getVisibleCountries();\n    \n    if (zoom && zoom.scale() >= MIN_ZOOM_LEVEL_FOR_KEYBOARD_MODE) {\n        // Lets start keyboard mode\n        KEYBOARD_MODE_ACTIVE = true;\n        displayKeyboardModeMessage();\n        // TODO: Find a working way to only announce this once\n        if (!hasAnnounced) {\n            announcer.announce(\"Keyboard mode active! Press L to hear the list of countries.\")\n            hasAnnounced = true;\n        }\n        \n        // Hide controls, footer and legend\n        document.getElementById(\"controls\").classList.add(\"hidden\");\n        document.getElementById(\"legend\").classList.add(\"hidden\");\n        document.getElementById(\"filter-text\").classList.add(\"hidden\");\n        document.getElementById(\"filter\").classList.add(\"hidden\");\n        document.querySelector(\".no-countries\").classList.add(\"hidden\");\n        document.getElementById(\"friends\").classList.add(\"hidden\");\n        \n        // Assign numbers to countries if they don't already have one\n        assignNumbersToCountries();\n        \n        // display a number on the center of each country\n        visibleCountries.forEach((country) => {\n            window.addEventListener('keydown', handleNumberKeyPress);\n            \n            var center = getPathCenter(country);\n            const countryId = country.id;\n            const number = countryNumberMap[countryId];\n            \n            // Append a circle\n            d3.select(country.parentElement).append(\"rect\")\n                .attr(\"class\", \"a11y-number-bg\")\n                .attr(\"x\", center.x - 1.5) // position the rectangle\n                .attr(\"y\", center.y - 1.5) // position the rectangle\n                .attr(\"width\", 3) // width of the rectangle\n                .attr(\"height\", 3) // height of the rectangle\n                .attr(\"rx\", 0.5) // horizontal corner radius\n                .attr(\"ry\", 0.5); // vertical corner radius\n            \n            // Append a text for the number\n            d3.select(country.parentElement).append(\"text\")\n                .attr(\"class\", \"a11y-number\")\n                .attr(\"data-country-id\", countryId)\n                .attr(\"text-anchor\", \"middle\")\n                .attr(\"alignment-baseline\", \"middle\")\n                .attr(\"x\", center.x) // position the text\n                .attr(\"y\", center.y + 0.2) // position the text\n                .text(number);\n            \n            // Append a text for the country name\n            d3.select(country.parentElement).append(\"text\")\n                .attr(\"class\", \"a11y-country-name\")\n                .attr(\"text-anchor\", \"middle\")\n                .attr(\"alignment-baseline\", \"middle\")\n                .attr(\"font-size\", \"0.1rem\")\n                .attr(\"x\", center.x) // position the text\n                .attr(\"y\", center.y + 4) // position the text below the number\n                .text(utils.getCountryNameFromId(parseInt(countryId.slice(1))));\n        });\n    }\n}\n\n// New function to assign numbers to countries\nfunction assignNumbersToCountries() {\n    // Try to keep previous assignments\n    const usedNumbers = new Set();\n    visibleCountries.forEach((country) => {\n        const countryId = country.id;\n        // If already assigned and not used, keep it\n        if (countryNumberMap[countryId] && !usedNumbers.has(countryNumberMap[countryId])) {\n            usedNumbers.add(countryNumberMap[countryId]);\n            return;\n        }\n        // Assign the first available number\n        for (let i = 0; i < NUMBER_POOL.length; i++) {\n            const num = NUMBER_POOL[i];\n            if (!Object.values(countryNumberMap).includes(num) && !usedNumbers.has(num)) {\n                countryNumberMap[countryId] = num;\n                usedNumbers.add(num);\n                break;\n            }\n        }\n    });\n    // Clean up numbers for countries that are no longer visible\n    Object.keys(countryNumberMap).forEach(id => {\n        const isVisible = visibleCountries.some(country => country.id === id);\n        if (!isVisible) {\n            delete countryNumberMap[id];\n        }\n    });\n}\n\n// Update the announcement functions to only include country count when keyboard mode is active\nfunction getAnnouncementText(baseText) {\n    if (KEYBOARD_MODE_ACTIVE) {\n        const audioFeedbackIsEnabled = window.auditoryFeedback && window.auditoryFeedback.isEnabled();\n        return `${baseText} ${getVisibleCountriesSummary()}, ${audioFeedbackIsEnabled ? \"Press A to turn off audio feedback.\" : \"\"}`;\n    }\n    return baseText;\n}\n\n(function () {\n\n    keyboardMode.init = function (zoom, move, width, height, MAX_ZOOM) {\n        // Store the zoom behavior for use in other methods\n        keyboardMode.zoomBehavior = zoom;\n        \n        // Set keyboard listeners for zoom and pan\n        window.addEventListener('keydown', function(e) {\n            // If any dialog is open, do not process keyboard mode events\n            if (document.querySelector('dialog[open]')) {\n                return;\n            }\n\n            const param = window.location.href.split(\"username=\")[1];\n\n\n            // Exit if the search is active or there is no user yet\n            if (search.getSearchStatus() || !param ) {\n                return;\n            }\n\n            // Get the current translation and scale\n            var t = zoom.translate();\n            var s = zoom.scale();\n\n            // Define the distance for each pan step\n            var panStep = 100;\n\n            // Define the factor for each zoom step\n            var zoomStep = 1.25;\n\n            // Get the center of the screen\n            var center = [width / 2, height / 2];\n\n            \n\n            // Adjust the translation or scale based on the key pressed\n            switch(e.key) {\n\n                case 'Escape':\n                    if (map.centered !== null) {\n                        map.dismissCenteredCountry();\n                        keyboardMode.cleanup();\n                        // Restore focus to the img\n                        d3.select('#map-svg').node().focus();\n                        return\n                    }\n                    // reset the zoom and translation\n                    // Calculate the new scale\n                    var newScale = 1;\n\n                    // Calculate the new translation to keep the center fixed\n                    t[0] = center[0] + (t[0] - center[0]) * newScale / s;\n                    t[1] = center[1] + (t[1] - center[1]) * newScale / s;\n\n                    // Update the scale\n                    s = newScale;\n                    e.preventDefault();\n                    move(t, s, false, true);\n                    keyboardMode.cleanup();\n                    ga('send', {\n                        hitType: 'event',\n                        eventCategory: 'Keyboard',\n                        eventAction: 'Escape key',\n                        eventLabel: 'test'\n                    });\n                    break;\n                    \n                case 'ArrowUp':\n                    t[1] += panStep;\n                    e.preventDefault();\n                    move(t, s, false, true);\n                    getVisibleCountries();\n                    // Update announcement to include country count only when keyboard mode is active\n                    setTimeout(() => {\n                        const message = getAnnouncementText(\"Panning north\");\n                        announcer.announce(message, \"assertive\", 100);\n                    }, 100);\n                    ga('send', {\n                        hitType: 'event',\n                        eventCategory: 'Keyboard',\n                        eventAction: 'ArrowUp key',\n                        eventLabel: 'test'\n                    });\n                    break;\n                case 'ArrowDown':\n                    t[1] -= panStep;\n                    e.preventDefault();\n                    move(t, s, false, true);\n                    getVisibleCountries();\n                    // Update announcement to include country count only when keyboard mode is active\n                    setTimeout(() => {\n                        const message = getAnnouncementText(\"Panning south\");\n                        announcer.announce(message, \"assertive\", 100);\n                    }, 100);\n                    ga('send', {\n                        hitType: 'event',\n                        eventCategory: 'Keyboard',\n                        eventAction: 'ArrowDown key',\n                        eventLabel: 'test'\n                    });\n                    break;\n                case 'ArrowLeft':\n                    t[0] += panStep;\n                    e.preventDefault();\n                    move(t, s, false, true);\n                    getVisibleCountries();\n                    // Update announcement to include country count only when keyboard mode is active\n                    setTimeout(() => {\n                        const message = getAnnouncementText(\"Panning west\");\n                        announcer.announce(message, \"assertive\", 100);\n                    }, 100);\n                    ga('send', {\n                        hitType: 'event',\n                        eventCategory: 'Keyboard',\n                        eventAction: 'ArrowLeft key',\n                        eventLabel: 'test'\n                    });\n                    break;\n                case 'ArrowRight':\n                    t[0] -= panStep;\n                    e.preventDefault();\n                    move(t, s, false, true);\n                    getVisibleCountries();\n                    // Update announcement to include country count only when keyboard mode is active\n                    setTimeout(() => {\n                        const message = getAnnouncementText(\"Panning east\");\n                        announcer.announce(message, \"assertive\", 100);\n                    }, 100);\n                    ga('send', {\n                        hitType: 'event',\n                        eventCategory: 'Keyboard',\n                        eventAction: 'ArrowRight key',\n                        eventLabel: 'test'\n                    });\n                    break;\n                case '+':\n                case '-':\n                    // Calculate the new scale\n                    var newScale = e.key === '+' ? s * zoomStep : s / zoomStep;\n\n                    // If the new scale exceeds the maximum scale, clamp\n                    if (newScale > MAX_ZOOM) {\n                    newScale = MAX_ZOOM;\n                    }\n\n                    // Calculate the new translation to keep the center fixed\n                    t[0] = center[0] + (t[0] - center[0]) * newScale / s;\n                    t[1] = center[1] + (t[1] - center[1]) * newScale / s;\n\n                    // Update the scale\n                    s = newScale;\n                    e.preventDefault();\n                    move(t, s, false, true);\n\n                    // Update visible countries and keyboard mode\n                    updateVisibleCountries(zoom);\n\n                    // Announce if keyboard mode was just disabled\n                    if (KEYBOARD_MODE_ACTIVE && s < MIN_ZOOM_LEVEL_FOR_KEYBOARD_MODE) {\n                        announcer.announce(\"Keyboard mode disabled.\", \"assertive\", 100);\n                    }\n\n                    // Update announcement to include country count only when keyboard mode is active\n                    setTimeout(() => {\n                        const baseMessage = `Zoom ${e.key === '+' ? \"in\" : \"out\"} level ${parseInt(newScale)}`;\n                        const message = getAnnouncementText(baseMessage);\n                        announcer.announce(message, \"assertive\", 100);\n                    }, 100);\n                    ga('send', {\n                        hitType: 'event',\n                        eventCategory: 'Keyboard',\n                        eventAction: 'Zoom in/out',\n                        eventLabel: 'test'\n                    });\n                    break;\n                case 'h':\n                    // Help for screen reader users. Read out the contents of #a11y-info-text\n                    announcer.announce(document.getElementById(\"a11y-info-text\").textContent, \"polite\");\n                    ga('send', {\n                        hitType: 'event',\n                        eventCategory: 'Keyboard',\n                        eventAction: 'Help',\n                        eventLabel: 'test'\n                    }); \n                    break;\n                case 'l':\n                    if (!KEYBOARD_MODE_ACTIVE) {\n                        announcer.announce(\"Keyboard mode is not active right now. Zoom in to at least level 7 to activate.\", \"assertive\", 100);\n                        ga('send', {\n                            hitType: 'event',\n                            eventCategory: 'Keyboard',\n                            eventAction: 'List countries (premature)',\n                            eventLabel: 'test'\n                        });\n                        return;\n                    }\n                    // announce the list of countries. Temporarily removing the prefix to improve screen reader ux\n                    // let message = \"Listing countries: \";\n                    let message = \"\";\n                    const countries = getCurrentlyVisibleCountries();\n                    \n                    // Sort countries by their assigned number\n                    countries.sort((a, b) => parseInt(a.number) - parseInt(b.number));\n                    \n                    countries.forEach((country) => {\n                        message += `${country.number}: ${country.name} (${country.artistCount} artists), `;\n                    });\n                    announcer.announce(message, \"assertive\", 100);\n                    ga('send', {\n                        hitType: 'event',\n                        eventCategory: 'Keyboard',\n                        eventAction: 'List countries',\n                        eventLabel: 'test'\n                    });\n                    break;\n                default:\n                    return; // Exit if it's not an arrow key or zoom key\n            }\n\n            if (map.centered !== null) {\n                map.dismissCenteredCountry();\n            }\n\n            // Only handle arrow keys for navigation\n            if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || \n                e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n                \n                // Then trigger the auditory feedback after a small delay\n                // to allow the map to update first\n                setTimeout(function() {\n                    if (window.auditoryFeedback && window.auditoryFeedback.isEnabled()) {\n                        window.auditoryFeedback.updateFeedback();\n                    }\n                }, 100);\n            }\n\n        });\n\n    }\n\n    keyboardMode.cleanup = function () {\n        // Announce if keyboard mode was active before cleanup\n        if (KEYBOARD_MODE_ACTIVE) {\n            announcer.announce(\"Keyboard mode disabled.\", \"assertive\", 100);\n        }\n        \n        hideKeyboardModeMessage();\n        KEYBOARD_MODE_ACTIVE = false;\n        // Reset the letter map when exiting keyboard mode completely\n        if (keyboardMode.zoomBehavior && keyboardMode.zoomBehavior.scale() < MIN_ZOOM_LEVEL_FOR_KEYBOARD_MODE) {\n            countryNumberMap = {};\n        }\n        d3.selectAll(\".a11y-number\").remove();\n        d3.selectAll(\".a11y-number-bg\").remove();\n        d3.selectAll(\".a11y-country-name\").remove();\n        // restore controls, footer and legend\n        document.getElementById(\"controls\").classList.remove(\"hidden\");\n        document.getElementById(\"friends\").classList.remove(\"hidden\");\n        document.getElementById(\"legend\").classList.remove(\"hidden\");\n        document.getElementById(\"filter-text\").classList.remove(\"hidden\");\n        document.getElementById(\"filter\").classList.remove(\"hidden\");\n        document.querySelector(\".no-countries\").classList.remove(\"hidden\");\n        // remove keyboard listeners\n        window.removeEventListener('keydown', handleNumberKeyPress);\n        // Remove the visual indicator\n        removeViewportBoxIndicator();\n    }\n\n    keyboardMode.isActive = function() {\n        // Return true if keyboard mode is currently active\n        // Instead of using currentZoomLevel which doesn't exist,\n        // use the stored zoom behavior and check its scale\n        return keyboardMode.zoomBehavior && \n               keyboardMode.zoomBehavior.scale() >= MIN_ZOOM_LEVEL_FOR_KEYBOARD_MODE;\n    }\n\n    keyboardMode.getStatus = function () {\n        return KEYBOARD_MODE_ACTIVE;\n    }\n\n    function enableKeyboardMode() {\n        isKeyboardModeEnabled = true;\n        // Likely adds visual indicators or focus states\n    }\n\n    function disableKeyboardMode() {\n        isKeyboardModeEnabled = false;\n        currentFocus = null;\n        // Removes visual indicators\n    }\n\n    keyboardMode.updateVisibleCountries = function(zoom) {\n        updateVisibleCountries(zoom);\n    };\n\n    // Add this line to expose the getCurrentlyVisibleCountries function\n    keyboardMode.getCurrentlyVisibleCountries = function() {\n        return getCurrentlyVisibleCountries();\n    };\n\n})();\n","const noCountries = noCountries || {};\n\nvar listOfArtistsWithNoCountry = [];\n\nvar saveToStorage = function (key, object, cb) {\n    localforage.setItem(key, object, cb || function () {});\n}\n\nfunction sortArtists(data, method) {\n    if (method === \"scrobbles\")\n        return data.sort((a, b) => b.playcount - a.playcount);\n    else if (method === \"name\")\n        return data.sort((a, b) => a.artist.localeCompare(b.artist));\n}\n\nvar addArtistsWithNoCountry = function (data) {\n    listOfArtistsWithNoCountry = listOfArtistsWithNoCountry.concat(data);\n    saveToStorage(\"no_countries\", listOfArtistsWithNoCountry);\n\n    function handleCheckboxChange() {\n        let artistName = this.id;\n        let checked = this.checked;\n        let artistsState = JSON.parse(localStorage.getItem('noCountryArtistsProgress')) || {};\n        artistsState[artistName] = { artistName, checked };\n        localStorage.setItem('noCountryArtistsProgress', JSON.stringify(artistsState));\n        // If you just checked and the filter is on, remove the artist from the DOM\n        if (checked && document.querySelector(\"#hide-checked\")?.checked) {\n            this.parentNode.style.display = 'none';\n            let nextCheckbox = this.parentNode.nextElementSibling.querySelector('input');\n            if (nextCheckbox) {\n                nextCheckbox.focus();\n            }\n        }\n        // get the label element for the filter checked checkbox\n        let filterCheckedLabel = document.querySelector(\"label[for='hide-checked']\");\n        // Update the label to include the number of checked artists\n        filterCheckedLabel.innerHTML = `Hide checked artists (${document.querySelectorAll(\"dialog[open] ul li input[type='checkbox']:checked\").length})`;\n        ga('send', {\n            hitType: 'event',\n            eventCategory: 'No countries',\n            eventAction: 'Check artist as done',\n            eventLabel: 'test'\n        });\n    }\n\n    \n\n    function updateNoCountriesList() {\n        let artistsState = JSON.parse(localStorage.getItem('noCountryArtistsProgress')) || {};\n        const sortedData = sortArtists(listOfArtistsWithNoCountry, noCountryArtistSortMethod);\n        var noCountriesListEl = d3.select(\".no-countries__content ul\");\n        noCountriesListEl.html(\"\");\n        sortedData.forEach(function (_art) {\n            let artistState = artistsState[_art.artist] || { artistName: _art.artist, checked: false };\n            let listItem = noCountriesListEl.append(\"li\");\n            listItem.append(\"input\")\n                .attr(\"type\", \"checkbox\")\n                .property(\"checked\", artistState.checked)\n                .attr(\"id\", _art.artist)\n                .on(\"change\", handleCheckboxChange);\n            listItem.append(\"label\")\n                .attr(\"for\", _art.artist)\n                .html('<a href=\"' + _art.url + '\" target=\"blank\" class=\"no-countries__link\">' + _art.artist + '</a><span class=\"no-countries__secondary\">' + _art.playcount + ' scrobbles</span>');\n            if (document.querySelector(\"#hide-checked\")?.checked && artistState.checked) {\n                listItem.style(\"display\", \"none\");\n            }\n        })\n        d3.select(\".no-countries__info\").html(listOfArtistsWithNoCountry.length + \" artists without a country:\");\n    }\n\n    // Check if the checkbox and label already exist\n    if (!d3.select(\"#hide-checked\").node() && !d3.select(\"label[for='hide-checked']\").node()) {\n        // Add the checkbox next to the filter radios\n        d3.select(\"dialog fieldset\").append(\"input\")\n            .attr(\"type\", \"checkbox\")\n            .attr(\"id\", \"hide-checked\")\n            .on(\"change\", updateNoCountriesList);\n        d3.select(\"dialog fieldset\").append(\"label\")\n            .attr(\"for\", \"hide-checked\")\n            .text(\"Hide checked artists\");\n    }\n\n    // Handle sorting with radios\n    let radios = document.getElementsByName('sort');\n    function sortFunction() {\n        let selectedValue;\n        for (let radio of radios) {\n            if (radio.checked) {\n                selectedValue = radio.value;\n                noCountryArtistSortMethod = selectedValue;\n                updateNoCountriesList();\n                break;\n            }\n        }\n        ga('send', {\n            hitType: 'event',\n            eventCategory: 'No countries',\n            eventAction: 'Sort artists',\n            eventLabel: 'test'\n        });\n    }\n\n    for (let radio of radios) {\n        radio.addEventListener('change', sortFunction);\n    }\n\n    updateNoCountriesList(\"scrobbles\");\n\n    document.querySelector(\".no-countries__title\").addEventListener(\"click\", function () {\n        const dialog = document.querySelector(\".no-countries__content\");\n        dialog.showModal();\n\n        document.querySelector(\"#no-countries__heading\").focus();\n\n        // Update the label to include the number of checked artists\n        let filterCheckedLabel = document.querySelector(\"label[for='hide-checked']\");\n        filterCheckedLabel.innerHTML = `Hide checked artists (${document.querySelectorAll(\"dialog[open] ul li input[type='checkbox']:checked\").length})`;\n\n        document.addEventListener(\"keydown\", function (e) {\n            if (e.keyCode == 27) {\n                const dialog = document.querySelector(\".no-countries__content\");\n                dialog.close();\n                document.querySelector(\".no-countries__title\").focus();\n            }\n        });\n        ga('send', {\n            hitType: 'event',\n            eventCategory: 'No countries',\n            eventAction: 'Open dialog',\n            eventLabel: 'test'\n        });\n    });\n\n    document.querySelector(\".no-countries__content .close\").addEventListener(\"click\", function () {\n        const dialog = document.querySelector(\".no-countries__content\");\n        dialog.close();\n        document.querySelector(\".no-countries__title\").focus();\n    });\n    const dialog = document.querySelector(\".no-countries__content\");\n    dialog.addEventListener(\"click\", function (event) {\n        if (event.target === dialog) {\n            dialog.close();\n            }\n    });\n\n    if (listOfArtistsWithNoCountry.length) {\n        setTimeout(function () {\n            document.querySelector(\".no-countries\").classList.remove(\"hidden\");\n        }, 850);\n    }\n}\n\nnoCountries.addArtistsWithNoCountry = addArtistsWithNoCountry;","/* requires:\napi/api.js\napi/lastfm.js\nutils.js\nsearch.js\naria-announcer.js\nno-countries.js\nkeyboard-mode.js\n*/\n\nvar script = script || {};\nlet loadingReady = false;\nlet loadingStatus = loadingReady ? \"Ready to Explr!\" : \"Loading...\";\nlet announcementIntervalId;\nlet noCountryArtistSortMethod = \"scrobbles\";\n\n\nvar STORED_ARTISTS;\nvar STORED_ARTISTS_PROMISE = localforage.getItem(\"artists\").then(val => \n    STORED_ARTISTS = val || {}\n);\n\nvar CACHED_NO_COUNTRIES;\nvar CACHED_NO_COUNTRIES_PROMISE = localforage.getItem(\"no_countries\").then(val => \n    CACHED_NO_COUNTRIES = val || {}\n);\n\nvar USER_TAGS = []; // JSON.parse(window.localStorage.user_tags || \"[]\");\nvar CACHED_USERS = JSON.parse(window.localStorage.cached_users || \"{}\");\nvar SESSION = {};\n\n\nfunction clearExplrCache() {\n    var theme = window.localStorage.getItem(\"theme\");\n    window.localStorage.clear();\n    window.localStorage.setItem(\"theme\", theme);\n\n    announcer.announce(\"Cleared artist cache, reloading page...\");\n\n    return localforage.clear();\n}\n\nvar countryCountObj = {};\n\n(function () {\n    // user = prompt(\"Input your user name, get top 20 artists\")\n    var user, currPage = 1,\n        maxPage;\n    var count = 0;\n    var tries = 0;\n    var randomcountrylist = [\"Malawi\", \"Malaysia\", \"Peru\", \"Sierra Leone\", \"Trinidad & Tobago\", \"Greece\", \"Laos\", \"Iran\", \"Haiti\", \"Nicaragua\", \"Mongolia\", \"Slovakia\"];\n\n    var getAllArtists = function () {\n        // console.log(\"get artists\")\n\n        loadingReady = false;\n\n        api.lastfm.send(\"library.getartists\", [\n                [\"user\", user],\n                [\"limit\", 50],\n                [\"page\", currPage]\n            ],\n            function (error, responseData) {\n                // Special case for unfortunate users\n                if (responseData === \"\") {\n                    console.error('Got empty string (\"\") as response, skipping page.')\n                    currPage++;\n                    getAllArtists();\n                    return;\n                }\n                if (error || responseData.error) {\n                    console.error(\"Error in getAllArtists, page \" + currPage, error, responseData);\n\n                    // Try again, but not forever\n                    if (tries++ < 5) {\n                        getAllArtists();\n\n                        // TODO: Show erorr message ;)\n                    } else {\n                        var refresh = confirm(\"Last.fm took too long to respond.\\n\\nPress OK to refresh the page and try again, or Cancel to use the page as it is.\");\n                        if (refresh) {\n                            clearExplrCache().then(function () {\n                                saveToStorage(\"artists\", STORED_ARTISTS, function () {\n                                    window.location.reload()\n                                });\n                            })\n                        }\n                    }\n                    return;\n                }\n\n                tries = 0;\n\n                if (currPage === 1) {\n                    SESSION.total_artists = +responseData.artists[\"@attr\"].total;\n                    maxPage = +responseData.artists[\"@attr\"].totalPages;\n\n                    if (SESSION.total_artists === 0) {\n                        d3.select(\".bubblingG\").remove();\n                        d3.select(\"#loading-text\")\n                            .html(\"You haven't listened to any<br> artists yet. Start scrobbling with <br>\\\n                                                        <a href='http://evolver.fm/2012/05/08/how-to-scrobble-to-last-fm-from-itunes-\" +\n                                \"spotify-and-more/'>your favorite music player!</a>\");\n                        d3.select(\".loader\").style(\"pointer-events\", \"all\");\n                        return;\n                    }\n                }\n\n                currPage++;\n                // console.log(\"Artists done, get countries\");\n\n                // Save artist data to localStorage (and create a list of artist names)\n                var artistNames = []\n                responseData.artists.artist.forEach(function (newArtist) {\n                    var a = STORED_ARTISTS[newArtist.name] || {};\n\n                    a.playcount = +newArtist.playcount;\n                    a.url = newArtist.url;\n\n                    STORED_ARTISTS[newArtist.name] = a;\n                    artistNames.push(newArtist.name);\n                })\n                saveToStorage(\"artists\", STORED_ARTISTS);\n                // var n = count++;\n\n                // Get country for all artists\n                api.getCountries(artistNames, function (data) {\n                    //Gör så att man kan slå upp på land-id och få upp en lista på artister.\n                    var newArtistCountries = d3.nest().key((d) => d.id)\n                        // gör så att man får en lista på alla artister för ett land.\n                        .rollup((leaves) => leaves)\n                        // Skickar in en lista med ett objekt för varje artist.\n                        .map(data);\n\n                    d3.keys(newArtistCountries).forEach(function (id) {\n                        countryCountObj[id] = countryCountObj[id] || {};\n                        countryCountObj[id][user] = countryCountObj[id][user] || [];\n\n                        var artistsFromCountry = countryCountObj[id][user];\n\n                        artistsFromCountry = artistsFromCountry.concat(newArtistCountries[id]);\n\n                        artistsFromCountry.forEach(function (el, i) {\n                            //Här lägger vi till ett fält image med artistens bild-url som ett fält till det \"inre\" objektet.\n                            artistsFromCountry[i].url = STORED_ARTISTS[el.artist].url;\n                            artistsFromCountry[i].playcount = STORED_ARTISTS[el.artist].playcount;\n                        });\n                        // countryCountObj är en lista med \"country\"-objekt. \n                        // Varje country-objekt innehåller en lista med \"inre\" objekt med artistnamn, lands-id och landsnamn.\n                        // dataObj är typ samma som countryCountObj, fast är bara för de tillfälligt sparade artisterna (intervallet).\n                        countryCountObj[id][user] = artistsFromCountry;\n                    })\n\n                    noCountries.addArtistsWithNoCountry(data.filter((artist) => !artist.id));\n\n                    map.addArtists(newArtistCountries);\n\n                    if (currPage > maxPage) {\n                        end();\n                        return;\n                    } else {\n                        getAllArtists();\n                    }\n                });\n            });\n    }\n\n    var getRecommendations = function () {\n        var currPage = 1,\n            limit = 50,\n            maxPage = 1000 / limit;\n        var countriesList = JSON.parse(window.localStorage.countries);\n\n        var countriesObj = d3.nest().key(function (d) {\n            return d.name;\n        }).rollup(function (d) {\n            return d[0];\n        }).map(countriesList);\n        // Get \"all\" artists from one country\n        // countriesList.forEach(function(country){\n\n        // });\n        api.lastfm.send(\"tag.gettopartists\", [\n            [\"tag\", \"swedish\"],\n            [\"limit\", limit],\n            [\"page\", currPage]\n        ], function (err, data) {\n            var artists = data.topartists.artist;\n            // For each artist, get their tags\n            artists.forEach(function (a) {\n                api.lastfm.send(\"artist.gettoptags\", [\n                    [\"artist\", a.name]\n                ], function (err, data) {\n                    // console.log(data);\n                })\n            })\n            // Look for user's top tags in artist tags\n            // If a lot of matches, save to recommended artists for that country\n        });\n\n    }\n\n    var getUserTags = function (err, data) {\n        // err = err ||data.error;\n        if (err || data.error) {\n            if (data && data.error === 6) {\n                alert(\"User not found\");\n                window.location.assign(window.location.origin + window.location.pathname);\n            }\n        }\n\n\n        /*if (err || data.error) {\n            console.error(\"Erorr in getUserTags\", err, data);\n            alert(\"Something went wrong when contacting the Last.fm API\\n\\nEither:\\n - The specified user does not exist\\n - Last.fm is down\\n\\nPlease try again.\");\n            window.location.replace(window.location.origin + window.location.pathname);\n        }*/\n\n        var c = 0;\n\n        var tagCount = {};\n\n        //console.log(\"Gotta get tags\")\n\n        var topArtists = data.topartists.artist;\n        var done = function () {\n            // make list of tags to sort\n            USER_TAGS = [];\n            //Remove specific tags from user's top tags\n            let forbidden = [\"american\", \"swedish\", \"british\", \"female vocalists\", \"male vocalists\", \"german\", \"seen live\", \"english\", \"singer-songwriter\", \"spanish\", \"french\"];\n            d3.keys(tagCount).forEach(function (el) {\n                var nogood = false\n                for (let i = 0; i < forbidden.length; i++) {\n                    if (el === forbidden[i]) {\n                        nogood = true;\n                    }\n                }\n                if (!nogood) {\n                    USER_TAGS.push({\n                        tag: el,\n                        count: tagCount[el]\n                    });\n                }\n            })\n            USER_TAGS.sort(function (a, b) {\n                return b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\n            });\n            console.info(\"Done getting tags, saved to localStorage.user_tags\")\n            window.localStorage.user_tags = JSON.stringify(USER_TAGS);\n        }\n\n\n        topArtists.forEach(function (el, i) {\n            // get top ten tags and save to users tag count....\n            setTimeout(function () { // Set timeout to not stop artists from loading...\n                api.lastfm.send(\"artist.gettoptags\", [\n                    [\"artist\", el.name]\n                ], function (err, data) {\n                    let taglist = data.toptags && data.toptags.tag;\n                    if (taglist) {\n                        var lim = Math.min(taglist.length, 10);\n                        for (var i = 0; i < lim; i++) {\n                            if (tagCount[taglist[i].name]) {\n                                tagCount[taglist[i].name]++;\n                            } else {\n                                tagCount[taglist[i].name] = 1;\n                            }\n                        }\n                        // console.log(c, topArtists.length)\n                    }\n\n                    c++;\n                    if (c == topArtists.length - 1) {\n                        done();\n                    }\n                });\n            }, Math.random() * 3000);\n        });\n\n    }\n\n    var begin = function () {\n        //Send analytics event\n        ga('send', 'event', 'splash screen', 'Go!', 'test');\n        document.getElementById(\"map-label\").innerHTML = `${user}'s world map`;\n        // fade out username input box\n        var welcomeOverlay = d3.select(\"#welcome-container\");\n        welcomeOverlay.transition().duration(2000)\n            .style(\"opacity\", 0)\n            .each(\"end\", function () {\n                welcomeOverlay.remove();\n            });\n\n        // Fade in loader\n        d3.select(\".loader\").transition().duration(2000).style(\"opacity\", 1);\n        d3.select(\"#loading-text\").html(\"Getting library...\");\n\n        // Screen reader status update every 30 seconds\n        setTimeout(function () {\n            announcer.announce(document.getElementById(\"loading-text\")?.innerText);\n        }, 6000);\n\n        setTimeout(function () {\n            if (d3.select(\"#loading-text\")?.html() === \"Getting library...\") {\n                d3.select(\"#loading-text\").html(\"Last.fm is taking<br>a long time to<br>respond...\");\n                setTimeout(function () {\n                    if (d3.select(\"#loading-text\").html() === \"Last.fm is taking<br>a long time to<br>respond...\") {\n                        d3.select(\"#loading-text\").html(\"Maybe <a href='http://last.fm' target='_blank'>last.fm</a> has<br>gone offline...\")\n                            .style(\"pointer-events\", \"all\");\n                    }\n                }, 8000);\n            }\n        }, 8000);\n\n        // Show hidden screen reader help text\n        document.getElementById(\"a11y-map-info\").classList.remove(\"hidden\");\n\n        // Fade in legend, progress-bar etc\n        d3.selectAll(\".on-map-view\").style({\n            \"visibility\": \"visible\",\n            //            \"opacity\": 0\n        }) //.transition().duration(1000).style(\"opacity\", 1);\n\n        // Get user tags\n        api.lastfm.send(\"user.gettopartists\", [\n            [\"user\", user],\n            [\"period\", \"12months\"],\n            [\"limit\", \"50\"]\n        ], getUserTags);\n\n        // Get user friends\n        api.getFriends(function (err, data) {\n            try {\n                var friends = data.friends.user;\n                var i = 0;\n                var friendName = d3.select(\"#friend-name\");\n\n                var updateName = function () {\n                    friendName.html(\"\");\n                    friendName.append(\"a\").attr({\n                        href: window.location.origin + window.location.pathname + \"?username=\" + friends[i].name,\n                        target: \"_self\",\n                    }).html(friends[i].name);\n                }\n\n                d3.selectAll(\".arrow\").on(\"click\", function () {\n                    if (d3.select(this).classed(\"left\")) {\n                        // Go left\n                        i = (i === 0 ? friends.length - 1 : i - 1);\n                    } else {\n                        // Go right\n                        i = (i + 1) % friends.length;\n                    }\n\n                    updateName();\n                })\n\n                updateName();\n                d3.select(\"#friends #msg\").html(\"Check out \" + user + \"'s friends\")\n                d3.select(\"#friends\").transition().duration(1000).style(\"opacity\", 1);\n\n            } catch (e) {\n                console.error(\"getFriends()\", e);\n                d3.select(\"#friends\").html(\"&nbsp;Couldn't find any<br>friends on last.fm :(&nbsp;\")\n                d3.select(\"#friends\").transition().duration(1000).style(\"opacity\", 1);\n            }\n        });\n\n        if (CACHED_USERS[user]) {\n            // TODO: use timestamp\n            console.info(\"No new artists on last.fm!\");\n            countryCountObj = JSON.parse(window.localStorage.countryCountObj);\n\n            localforage.getItem(\"no_countries\", function (err, val) {\n                noCountries.addArtistsWithNoCountry(val || []);\n            });\n\n            // Get number of artists for screenshot etc.\n            api.lastfm.send(\"library.getartists\", [\n                    [\"user\", user],\n                    [\"limit\", 1],\n                    [\"page\", 1]\n                ],\n                function (error, responseData) {\n                    SESSION.total_artists = +responseData.artists[\"@attr\"].total;\n                });\n\n            setTimeout(function () {\n                map.addArtists(\n                    Object.keys(countryCountObj).reduce((acc, countryId) => ({\n                        ...acc,\n                        [countryId]: countryCountObj[countryId][SESSION.name]\n                    }), {}));\n                end();\n            }, 1000)\n        } else {\n            // Save theme\n            var theme = window.localStorage.theme;\n            window.localStorage.clear();\n            if (theme) {\n                window.localStorage.theme = theme;\n            }\n            getAllArtists();\n        }\n    }\n\n    var end = function () {\n        loadingReady = true;\n\n        // Screen reader status update\n        clearInterval(announcementIntervalId);\n        announcer.announce(\"All artists have been loaded!\");\n        const map = document.querySelector(\"#map-container svg\")\n        const existingAriaLabelledBy = map.getAttribute(\"aria-labelledby\");\n        map.setAttribute(\"aria-labelledby\", `${existingAriaLabelledBy} progress-text sr-instructions`);\n\n        // We're done, fade out loader\n        var loader = d3.select(\".loader\");\n        loader.transition().duration(2000)\n            .style(\"opacity\", 0)\n            .each(\"end\", function () {\n                loader.remove();\n            });\n        //Also fade out progress bar text (after a short delay)\n        d3.select(\"#progress-text\").transition().delay(5000).duration(1500)\n            .style(\"opacity\", 0);\n\n        CACHED_USERS = {};\n        CACHED_USERS[user] = new Date().getTime();\n        window.localStorage.cached_users = JSON.stringify(CACHED_USERS);\n        window.localStorage.countryCountObj = JSON.stringify(countryCountObj);\n    }\n\n    // // Set theme\n    // map.nextTheme(window.localStorage.theme || \"pink_white\");\n\n    // Try to get username from url\n    var param = window.location.href.split(\"username=\")[1];\n\n    if (param) { // We already have a user\n\n        // Set up search button listener\n        document.addEventListener('DOMContentLoaded', (event) => {\n            document.getElementById('search-button').addEventListener('click', function() {\n                // Set timeout needed to make sure the browser is ready to focus the search box\n                setTimeout(()=> { search.initSearch() }, 0) ;\n            });\n        });\n\n        // set up keyboard shortcuts\n        window.addEventListener(\"keydown\", function (evt) {\n\n            if ((evt.ctrlKey || evt.metaKey) && evt.keyCode === 70 && !evt.shiftKey && !keyboardMode.getStatus()) { \n                console.log(keyboardMode.getStatus());               \n                // Prevent the browser's default \"ctrl + f\" or \"cmd + f\" action (usually \"Find\")\n                evt.preventDefault();\n\n                // Initialize the search box\n                search.initSearch();\n                \n            }\n            // Supress hotkeys if search or keyboard mode is open \n            if (search.getSearchStatus() || keyboardMode.getStatus()) {\n                return;\n            };\n            switch (evt.keyCode) {\n                case 83:\n                    screenshot.render();\n                    //Send google analytics event\n                    ga('send', {\n                        hitType: 'event',\n                        eventCategory: 'Hotkeys',\n                        eventAction: 'Take screenshot',\n                        eventLabel: 'test'\n                    });\n                    break;\n                    // t\n                case 84:\n                    nextTheme();\n                    //Send google analytics event\n                    ga('send', {\n                        hitType: 'event',\n                        eventCategory: 'Hotkeys',\n                        eventAction: 'Cycle theme',\n                        eventLabel: 'test'\n                    });\n                    break;\n                default:\n                    break;\n            }\n        });\n\n        if (param.length > 15) {\n            param = param.substr(0, 15);\n        }\n        user = param;\n        SESSION.name = param;\n        Promise.all([CACHED_NO_COUNTRIES_PROMISE, STORED_ARTISTS_PROMISE]).then(() => begin());\n    } else {\n        d3.select(\"#welcome-container\").style(\"visibility\", \"visible\");\n        d3.select(\"#randomCountry\").html(randomcountrylist[Math.floor(Math.random() * (randomcountrylist.length))] + \"?\")\n    }\n\n    var saveToStorage = function (key, object, cb) {\n        localforage.setItem(key, object, cb || function () {});\n    }\n\n})();\n\nscript.getCurrentData = function () {\n    if (loadingReady) {\n        return JSON.parse(window.localStorage.getItem('countryCountObj'));;\n    } else {\n        return countryCountObj;\n    }\n\n}\n\nscript.getLoadingStatus = function () {\n    return loadingStatus;\n}\nscript.setLoadingStatus = function (status) {\n    loadingStatus = status;\n}","/* requires:\napi/api.js\napi/lastfm.js\nscript.js\naria-announcer.js\nkeyboard-mode.js\n*/\nvar map = {};\n//White theme default:\nvar colorArray = [\"#feebe2\", \"#feebe2\", \"#fcc5c0\", \"#fa9fb5\", \"#f768a1\", \"#dd3497\", \"#ae017e\", \"#7a0177\"];\nvar legend;\nvar countryScore = 0;\nlet currentPage = 1;\nlet itemsPerPage = 5;\nlet artists = []; // Your artists data goes here\nlet currentZoom = 1;\nconst MAX_ZOOM = 25;\n\nconst prefersReducedMotion = window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches;\n\n// Update the COUNTRY_BBOX_OVERRIDES constant\nconst COUNTRY_BBOX_OVERRIDES = {\n  // Format: [west, south, east, north]\n  // US territories as multiple boxes\n  '840': [\n    [-125, 24, -66, 50],  // Continental US\n    [-180, 51, -130, 72], // Alaska\n    [-160, 18, -154, 23], // Hawaii\n  ],\n  // Russia - adjusted boundaries\n  '643': [\n    [27.5, 41.0, 180.0, 82.0],   // Main Russian territory (European + Asian)\n    [-180.0, 60.0, -169.0, 71.0], // Far Eastern part (crosses the date line)\n  ],\n  // Chile - mainland only, excluding Pacific islands\n  '152': [\n    [-75.6, -55.9, -66.0, -17.5],  // Chilean mainland\n    [-109.5, -27.2, -109.2, -27.0], // Easter Island (Rapa Nui)\n    [-80.8, -33.8, -80.0, -33.3]    // Juan Fernández Islands\n  ],\n  // Ecuador - mainland only, excluding Galápagos\n  '218': [\n    [-81.5, -5.0, -75.0, 1.5],   // Ecuadorian mainland\n    [-92.0, -1.4, -89.2, 1.7]     // Galápagos Islands\n  ],\n  // Spain - mainland and islands\n  '724': [\n    [-9.3, 36.0, 3.4, 43.8],     // Iberian Peninsula (mainland Spain)\n    [-18.2, 27.6, -13.3, 29.5],   // Canary Islands\n    [1.2, 38.6, 4.4, 40.1]        // Balearic Islands\n  ],\n  // Portugal\n  '620': [\n    [-9.5, 36.8, -6.2, 42.2],     // Continental Portugal (mainland)\n    [-31.3, 32.6, -16.2, 39.7]     // Atlantic islands (Azores and Madeira)\n  ],\n  // France - mainland and overseas territories\n  '250': [\n    [-5.1, 41.3, 9.6, 51.1],     // Metropolitan France (mainland)\n    [-54.6, 2.1, -51.6, 5.8],     // French Guiana\n    [55.2, -21.4, 55.8, -20.8],   // Réunion\n    [-61.2, 14.4, -60.8, 14.9],   // Martinique\n    [-61.8, 15.8, -61.0, 16.5],   // Guadeloupe\n    [8.5, 41.3, 9.6, 43.0]        // Corsica\n  ],\n  // Netherlands - mainland and Caribbean territories\n  '528': [\n    [3.3, 50.7, 7.2, 53.6],      // Mainland Netherlands\n    [-69.2, 12.0, -68.2, 12.4],   // Aruba\n    [-69.0, 11.9, -68.2, 12.4],   // Curaçao\n    [-63.2, 17.9, -62.9, 18.1]    // Sint Maarten\n  ],\n  // New Zealand - main islands\n  '554': [\n    [166.0, -47.5, 179.0, -34.0],  // Main islands (North and South)\n    [172.5, -43.9, 173.9, -40.5],  // Chatham Islands\n  ],\n  // Fiji - main island group (corrected)\n  '242': [\n    [177.0, -21.0, 180.0, -16.0],  // Western islands (up to the date line)\n    [-180.0, -21.0, -178.0, -16.0], // Eastern islands (from the date line)\n  ],\n  // Kiribati - three island groups spread across the Pacific\n  '296': [\n    [172.0, -3.0, 177.0, 5.0],      // Gilbert Islands (western group)\n    [-175.0, -11.5, -170.0, -5.0],   // Phoenix Islands (central group)\n    [-160.0, -5.0, -150.0, 12.0],    // Line Islands (eastern group)\n  ],\n  // Add other countries as needed\n};\n\nmap.COUNTRY_BBOX_OVERRIDES = COUNTRY_BBOX_OVERRIDES;\n\n// At the top, after requires or before main logic\nwindow.lastInputWasKeyboard = false;\n\n// Listen for keyboard and mouse input globally\nwindow.addEventListener('keydown', function(e) {\n  // Only set for navigation/keyboard mode relevant keys\n  if ([37,38,39,40, 65, 76, 27, 13, 32].includes(e.keyCode) || (e.key >= '0' && e.key <= '9')) {\n    window.lastInputWasKeyboard = true;\n  }\n});\nwindow.addEventListener('mousedown', function() { window.lastInputWasKeyboard = false; });\nwindow.addEventListener('click', function() { window.lastInputWasKeyboard = false; });\nwindow.addEventListener('wheel', function() { window.lastInputWasKeyboard = false; });\n\n(function(window, document) {\n  d3.select(window).on(\"resize\", throttle);\n\n  var doThrottle = false;\n  var filter = \"artists\"; // filter by artists or plays\n\n  var zoom = d3.behavior.zoom()\n    .scaleExtent([1, MAX_ZOOM])\n    .on(\"zoom\", move);\n\n\n  var height, width;\n\n  var topo, projection, path, svg, g, countryNames, rateById, centered, active;\n  let countryCount = {};\n  let countryDivIsOpen = false;\n  let currentNoArtists = 0;\n  let currentCount = 0;\n  let currentCountry = null;\n\n  //Variables needed to update scale and legend\n  var mydomain = [0, 1, 2, 3, 4, 5, 6];\n  var maxartists = 1,\n    maxplaycount = 0;\n\n  //Setting color and range to be used\n  var color;\n\n\n  // Set theme\n  const defaultTheme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"blue_black\" : \"pink_white\";\n  var theme = window.localStorage.theme || defaultTheme;\n\n  map.drawPlays = function() {\n    filter = \"scrobbles\";\n    redraw();\n  };\n\n  let countryPlaylists; \n  // load links to country playlists\n  d3.json(\"assets/data/playlists.json\", (err, list) => {\n    countryPlaylists = list;\n  });  \n\n  /**\n   * Sets width/height, i.e. changes the global variables \"width\" and \"height\"\n   */\n  function updateDimensions() {\n    height = window.innerHeight - 5;\n    width = document.getElementById('map-container').offsetWidth;\n  }\n\n  //Returns total number of plays for country\n  function getCountryPlaycount(c) {\n    if (countryCount[c.id]) {\n      var count = 0;\n      for (let i = 0; i < countryCount[c.id].length; i++) {\n        count += countryCount[c.id][i].playcount;\n      }\n      return count;\n    } else return 0;\n  };\n\n\n  function updateProgressBar() {\n    var progressPro = (countryScore / 210);\n    return progressPro;\n  }\n;\n\n  //Function to format numbers over 1000 with a space\n  function numbersWithSpace(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\n  }\n  /**\n   * Randomize array element order in-place.\n   * Using Fisher-Yates shuffle algorithm.\n   */\n  function shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n  //Function to remove duplicates from arrays\n  function onlyUnique(value, index, self) {\n    return self.indexOf(value) === index;\n  }\n\n  function updateScale() {\n    var max = -1;\n    switch (filter) {\n      case \"artists\":\n        max = maxartists;\n        for (let i = 0; i < 5; i++) {\n          mydomain[i] = Math.pow(Math.E, (Math.log(max) / 6) * (i + 1));\n        }\n        mydomain = [0, 1, mydomain[0], mydomain[1], mydomain[2], mydomain[3], mydomain[4]];\n        break;\n      case \"scrobbles\":\n        max = maxplaycount;\n        for (let i = 0; i < 7; i++) {\n          mydomain[i] = Math.pow(Math.E, (Math.log(max) / 7) * (i + 1))\n        }\n        mydomain = [0, 1, mydomain[1], mydomain[2], mydomain[3], mydomain[4], mydomain[5]];\n        break;\n    };\n\n\n    color = d3.scale.threshold()\n      .domain(mydomain)\n      .range(colorArray);\n  };\n\n  function updateLegend() {\n    //Remove decimals from domain\n    var x = 0;\n    var len = mydomain.length\n    while (x < len) {\n      mydomain[x] = Math.ceil(mydomain[x]);\n      x++;\n    };\n\n    //Array of text\n    var legend_labels = [numbersWithSpace(mydomain[0]) + \"\", mydomain[1] + \"-\" + (mydomain[2] - 1), mydomain[2] + \"-\" + (mydomain[3] - 1), mydomain[3] + \"-\" + (mydomain[4] - 1), mydomain[4] + \"-\" + numbersWithSpace((mydomain[5] - 1)), numbersWithSpace(mydomain[5]) + \"-\" + numbersWithSpace((mydomain[6] - 1)), \"> \" + numbersWithSpace(mydomain[6])];\n\n    //Create Legend\n    svg.select(\"g#legend\").selectAll(\"g.legend\").remove(); // need to remove for theme changing :(\n    legend = svg.select(\"g#legend\").selectAll(\"g.legend\")\n      .data(mydomain);\n\n    //Color box sizes\n    var ls_w = 20,\n      ls_h = 20;\n    var x = width * 0.03;\n    var y = height * 0.03;\n\n    // Add legend filter text\n    var text1 = svg.select(\"#filter-text\")\n      .attr(\"x\", x)\n      .attr(\"y\", height - y - mydomain.length * ls_h - 1.5 * ls_h)\n      .text(\"Number of \");\n    var text2 = svg.select(\"#filter\")\n      .attr(\"x\", x + text1[0][0].getComputedTextLength() + 5)\n      .attr(\"y\", height - y - mydomain.length * ls_h - 1.5 * ls_h)\n      .text(filter);\n    text2.on(\"click\", function() {\n      // Toggle filter method\n      filter = (filter === \"artists\" ? \"scrobbles\" : \"artists\");\n      redraw();\n    });\n\n    var noCountryArtists = d3.select(\".no-countries\")\n      .style(\"bottom\", (y + mydomain.length * ls_h + 1.5 * ls_h + 30) + \"px\"); // <<< magic numbers broo\n\n    var enter = legend.enter()\n      .append(\"g\")\n      .attr(\"class\", \"legend\");\n\n    enter.append(\"rect\")\n      .attr(\"x\", x)\n      .attr(\"y\", function(d, i) {\n        return height - (i * ls_h) - 2 * ls_h - y;\n      })\n      .attr(\"width\", ls_w)\n      .attr(\"height\", ls_h)\n      .style(\"fill\", function(d) {\n        return color(d);\n      });\n    enter.append(\"text\")\n      .attr(\"x\", x + 30)\n      .attr(\"y\", function(d, i) {\n        return height - (i * ls_h) - ls_h - 4 - y;\n      });\n\n    legend.selectAll(\"text\").data(mydomain)\n      .text(function(d, _, i) {\n        return legend_labels[i];\n      });\n  }\n  //Variables for color legend\n\n  var tooltip = d3.select(\"#map-container\").append(\"div\").attr(\"class\",\n    \"tooltip hidden\").attr(\"aria-hidden\", \"true\");\n\n  var infoContainer = d3.select(\"main\").append(\"div\")\n  .attr(\"class\",\"infoContainer hidden\")\n  .attr(\"id\", \"infoContainer\")\n  .attr(\"role\", \"region\")\n  .attr(\"aria-labelledby\", \"music-from cname-heading\")\n\n    var cnameDiv = d3.select(\"#infoContainer\").append(\"div\").attr(\"class\",\n  \"cnameDiv\").attr(\"id\", \"cname\");\n  \n    var artistContainer = d3.select(\"#infoContainer\").append(\"div\").attr(\"class\",\n    \"artistContainer\").attr(\"id\", \"artistContainer\");\n\n\n  var detailsDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\n    \"detailsDiv\").attr(\"id\", \"details\");\n\n  var recoDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\n    \"recoDiv\").attr(\"id\", \"recommendations\");\n\n  var artistSummaryDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\n    \"artistSummaryDiv\").attr(\"id\", \"summary\");\n\n  var closeButton;\n\n  var offsetL;\n  var offsetT;\n\n  //---------------------- Color preferences -------------//\n  var themes = {\n    blue_black: [\"#03020D\", \"#140E1F\", \"#2A075A\", \"#321C78\", \"#362688\", \"#3E3CA7\", \"#4651C5\", \"#5371F4\"],\n    green_black: [\"#03020D\", \"#08120C\", \"#032F30\", \"#064137\", \"#0E6745\", \"#158C54\", \"#1CB162\", \"#28EA78\"],\n    pink_black: [\"#03020D\", \"#1F0310\", \"#4B0627\", \"#5C1138\", \"#7E285C\", \"#A13F80\", \"#C355A4\", \"#F778DA\"],\n    pink_white: [\"#feebe2\", \"#feebe2\", \"#fcc5c0\", \"#fa9fb5\", \"#f768a1\", \"#dd3497\", \"#ae017e\", \"#7a0177\"],\n    green_white: [\"#ece2f0\", \"#F6EBFA\", \"#ccece6\", \"#99d8c9\", \"#66c2a4\", \"#41ae76\", \"#238b45\", \"#006d2c\"],\n    red_white: [\"#F0F0D8\", \"#F0F0D8\", \"#feb24c\", \"#fd8d3c\", \"#fc4e2a\", \"#e31a1c\", \"#bd0026\", \"#800026\"],\n  };\n\n  let nextTheme = window.nextTheme = function(toTheme) {\n    // Go to next theme\n    var themeList = d3.keys(themes);\n    theme = toTheme || themeList[(themeList.indexOf(theme) + 1) % themeList.length];\n    colorArray = themes[theme];\n\n    // Change body class\n    let bodyClass = [\"blue_black\", \"green_black\", \"pink_black\"].includes(theme) ? \"dark\" : \"light\";\n    bodyClass += \" \" + theme;\n    d3.select(document.body).attr(\"class\", bodyClass);\n\n    // Save :)\n    window.localStorage.theme = theme;\n\n    // Redraw map :)\n    if (topo) redraw();\n\n    // Annunce to screen readers\n    announcer.announce(`Theme changed to ${theme}`);\n  }\n  map.nextTheme = nextTheme;\n\n  nextTheme(theme);\n  updateScale();\n  updateDimensions();\n  setup(width, height);\n  keyboardMode.init(zoom, move, width, height, MAX_ZOOM);\n\n  function setup(width, height) {\n    projection = d3.geo.naturalEarth()\n      .translate([(width / 2), (height / 2) + height * 0.08])\n      .scale(width / 1.7 / Math.PI);\n\n    path = d3.geo.path().projection(projection);\n    \n    // Export path and projection for use in keyboard-mode.js\n    map.path = path;\n    map.projection = projection;\n\n    svg = d3.select(\"#map-container\")\n      .attr(\"role\", \"application\")\n      .append(\"svg\")\n      .attr(\"role\", \"img\")\n      .attr(\"tabindex\", \"0\")\n      .attr(\"aria-labelledby\", \"map-label\")\n      // .attr(\"aria-describedby\", \"map-hint\")\n      .attr(\"id\", \"map-svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .style(\"margin-left\", document.getElementById(\"map-container\").offsetWidth / 2 - width / 2)\n      .call(zoom)\n      .on(\"click\", click)\n      .append(\"g\");\n\n    g = svg.append(\"g\");\n    svg.append(\"g\").attr(\"id\", \"legend\")\n    svg.append(\"text\").attr({\n      id: \"filter-text\",\n      class: \"legend\"\n    });\n    svg.append(\"text\").attr({\n      id: \"filter\",\n      class: \"legend\"\n    });\n\n    map.zoom = zoom; // Export the zoom behavior\n  }\n\n  //Load country aliases and names\n  api.getCountriesData().then(countries => (map.countryNames = countryNames = countries));\n  \n  //Load map\n  d3.json(\"assets/data/world-50m.json\", function(error, world) {\n\n    var countries = topojson.feature(world, world.objects.countries).features;\n\n    topo = countries;\n    draw(topo, true);\n\n  });\n\n  function draw(topo, redrawMap) {\n    var country = g.selectAll(\".country\").data(topo);\n\n    var progress = d3.select(\"#progress-bar\").style({\n      \"height\": updateProgressBar() * 100 + \"%\",\n      \"background-color\": colorArray[6]\n    });\n    d3.select(\"#countryCount\").style({\n      \"background-color\": colorArray[1],\n      \"border-color\": colorArray[6]\n    })\n    //Show progressbar text on mouse-over\n    .on(\"mousemove\", function() {\n      d3.select(\"#progress-text\")\n        .transition().duration(prefersReducedMotion ? 0 : 150).style(\"opacity\", 0.9);\n    })\n      .on(\"mouseout\", function() {\n        d3.select(\"#progress-text\").transition().duration(prefersReducedMotion ? 0 : 150).style(\"opacity\", 0);\n      });\n    d3.select(\"#progress-text\").html(\"Scrobbled from \" + countryScore + \"/210 countries\").attr(\"aria-hidden\", \"true\");\n\n    //Draw countries\n    if (redrawMap) {\n      country.enter().insert(\"path\")\n        .attr(\"class\", \"country\")\n        .attr(\"d\", path)\n        .attr(\"id\", function(d, i) {\n          return `c${d.id}`;\n        })\n        .attr(\"title\", function(d, i) {\n          return d.properties.name;\n        })\n        .attr(\"data-center-x\", function(d, i) {\n          return getCountryCenter(d).x;\n        })\n        .attr(\"data-center-y\", function(d, i) {\n          return getCountryCenter(d).y;\n        })\n        .style(\"fill\", function() {\n          return color(0);\n        })\n        .style(\"transform-origin\", function (d) {\n          const center = getCountryCenter(d);\n          return `${-center.x}px ${-center.y}px`;\n        });\n    }\n    //Color countries\n    country.transition().style(\"fill\", function(d) {\n      switch (filter) {\n        case \"artists\":\n          return countryCount[d.id] ? color(countryCount[d.id].length) :\n            color(0);\n          //break;\n        case \"scrobbles\":\n          return color(getCountryPlaycount(d));\n      }\n    })\n\n    //offsets for tooltips\n    offsetL = document.getElementById('map-container').offsetLeft;\n    offsetT = document.getElementById('map-container').offsetTop;\n\n    //tooltips\n    country\n      .on(\"mousemove\", function(d, i) {\n        var name;\n        var tag;\n        countryNames.forEach(function(e, i) {\n          if (e.id === d.id) {\n            name = e.name;\n            tag = e.tag;\n          };\n        })\n        var mouse = d3.mouse(svg.node()).map(function(d) {\n          return parseInt(d);\n        });\n\n        tooltip.classed(\"hidden\", false)\n          .attr(\"style\", \"left:\" + (mouse[0] + offsetL + 20) + \"px;top:\" + (\n            mouse[1] +\n            offsetT + 10) + \"px\")\n          .html(name + (countryCount[d.id] ? \"<br>\" + countryCount[d.id].length + \" artists, \" + numbersWithSpace(getCountryPlaycount(d)) + \" scrobbles\" : \"\"));\n      })\n      .on(\"mouseout\", function(d, i) {\n        tooltip.classed(\"hidden\", true);\n      })\n      //Show div with top 10 artists for country when clicked\n      .on(\"click\", function(d, i) {\n        var name;\n        var tag;\n        var id;\n\n        clicked(d);\n\n        countryNames.forEach(function(e, i) {\n          if (e.id === d.id) {\n            name = e.name;\n            tag = e.tag;\n            id = d.id;\n          };\n        })\n        var mouse = d3.mouse(svg.node()).map(function(d) {\n          return parseInt(d);\n        });\n\n        closeButton\n          .on(\"click\", function(d, i) {\n            removeArtistDiv();\n            // zoom out map, fulhack\n            clicked(centered);\n            // Restore focus to the img\n            d3.select('#map-svg').node().focus();\n          }) //\"stäng\" onclick slutar\n      }) // on click slutar\n\n  }\n\n  /*-------redraw----*/\n  //den kallas varje gång datan uppdateras. redrawMap är en boolean\n  function redraw(redrawMap) {\n    updateDimensions();\n\n    if (redrawMap) {\n      d3.select('#map-svg').remove();\n      setup(width, height);\n    }\n\n    maxartists = d3.max(d3.keys(countryCount), function(cname) {\n      return countryCount[cname].length;\n    });\n    maxplaycount = d3.max(d3.keys(countryCount), function(cname) {\n      return getCountryPlaycount({\n        id: cname\n      });\n    })\n    updateScale();\n    updateLegend();\n\n    draw(topo, redrawMap);\n  }\n\n\n  /**\n   * Moves the map to the specified location or based on the current zoom event\n   * @param  {Array} tr      Optional: Translation tuple [x, y]\n   * @param  {Number} sc      Optional: Scale factor\n   * @param  {Boolean} animate Optional: Decides whether to animate the map movement\n   * @param  {Boolean} withKeyboard If the move was initiated by the keyboard\n   */\n  function move(tr, sc, animate, withKeyboard) {\n    // Check if we should activate keyboard mode\n    if (sc >= MIN_ZOOM_LEVEL_FOR_KEYBOARD_MODE) {\n      if (window.lastInputWasKeyboard) {\n        keyboardMode.updateVisibleCountries(zoom);\n      } else {\n        keyboardMode.cleanup();\n      }\n    } else {\n      keyboardMode.cleanup();\n    }\n    \n    var t = tr || (d3.event ? d3.event.translate : false) || zoom.translate();\n    var s = sc || (d3.event ? d3.event.scale : false) || zoom.scale();\n\n    // If move was not initiated by clicking on a country, deselect the selected country\n    if (!tr && !sc && centered) {\n      highlightCountry(false);\n      removeArtistDiv();\n      centered = null;\n    }\n\n    var zscale = s;\n    var h = height / 4;\n\n    t[0] = Math.min(\n      (width / height) * (s - 1),\n      Math.max((width * 1.2) * (1 - s), t[0])\n    );\n\n    t[1] = Math.min(\n      h * (s - 1) + h * s,\n      Math.max(height * (1 - s) - h * s, t[1])\n    );\n\n    zoom.translate(t);\n    zoom.scale(s);\n\n    if (animate) {\n      g.transition().duration(prefersReducedMotion ? 0 : 950).attr(\"transform\", \"translate(\" + t + \")scale(\" + s + \")\");\n\n    } else {\n      g.attr(\"transform\", \"translate(\" + t + \")scale(\" + s + \")\");\n    }\n\n    //adjust the country hover stroke width based on zoom level\n    d3.selectAll(\".country\").style(\"stroke-width\", 1.5 / s);\n\n    window.triggerAuditoryFeedback();\n  }\n  map.move = move;\n\n  var throttleTimer;\n\n  function throttle() {\n    window.clearTimeout(throttleTimer);\n    throttleTimer = window.setTimeout(function() {\n      redraw(true);\n      move([0, 0], 1); // Reset position\n    }, 200);\n  }\n\n\n  //geo translation on mouse click in map\n  function click() {\n    var latlon = projection.invert(d3.mouse(this));\n    // console.log(latlon);\n    //console.log(countryCount);\n  }\n\n  function showArtists(pageNumber, itemsPerPage) {\n    const start = (pageNumber - 1) * itemsPerPage;\n    const end = start + itemsPerPage;\n    const pageItems = artists.slice(start, end);\n\n    // Clear the details section\n    d3.selectAll(\".artist-li\").remove();\n\n    // Append the artists to the details section\n    pageItems.forEach(artist => {\n      var artistLi = d3.select(\"#top-artist-list\")\n      .append(\"li\")\n        .attr(\"class\", \"artist-li\");\n      \n      var artistDiv = artistLi.append(\"button\")\n        .attr({\n          \"class\": `scrobbled artist-div lowlight`,\n          \"data-artist\": artist.artist\n        })\n        .on(\"click\", function() {\n          // Lowlight not selected artists\n          d3.selectAll(\".artist-div\").classed({\n            \"lowlight\": true,\n            \"highlight\": false\n          });\n          // Remove aria-owns from all li elements\n          d3.selectAll(\".artist-li\").attr(\"aria-owns\", null);\n          \n          // Highlight selected artist\n          d3.select(this).classed({\n            \"highlight\": true,\n            \"lowlight\": false\n          });\n          d3.selectAll(\".artist-div\").attr(\"aria-pressed\", \"false\");\n          d3.select(this).attr(\"aria-pressed\", \"true\");\n\n          // Add aria-owns to the parent li element\n          d3.select(this.parentNode).attr(\"aria-owns\", \"summaryText\");\n\n          makeSummaryDiv(d3.select(this).attr(\"data-artist\"), []);\n        });\n      \n      var artistLink = artistDiv.append(\"div\").style(\"display\", \"block\")\n      artistLink.append(\"div\")\n        .attr(\"class\", \"artist-image image-div\");\n\n      var playCountDiv = artistDiv.append(\"div\").attr(\"class\", \"play-count-div\");\n\n      playCountDiv.append(\"p\")\n        .html(\"<strong>\" + artist.artist + \"</strong><br>\" + artist.playcount + \" scrobbles\")\n        .attr(\"class\", \"details-p\");\n    });\n\n    // Update the state of the navigation buttons\n    d3.select(\".artist-control.left\").attr(\"disabled\", currentPage === 1 ? \"disabled\" : null);\n    d3.select(\".artist-control.right\").attr(\"disabled\", currentPage === Math.ceil(artists.length / itemsPerPage) ? \"disabled\" : null);\n}\n\n  function showNextFive() {\n      if (currentPage < artists.length / itemsPerPage) {\n          currentPage++;\n          showArtists(currentPage, itemsPerPage);\n          // Give feedback to screen readers\n          announcer.announce(\"Showing next five artists\", \"polite\");\n          //Send event to google analytics\n          ga('send', {\n            hitType: 'event',\n            eventCategory: 'Artist viewer',\n            eventAction: 'Next five',\n            eventLabel: 'test'\n          });\n      }\n  }\n\n  function showPreviousFive() {\n      if (currentPage > 1) {\n          currentPage--;\n          showArtists(currentPage, itemsPerPage);\n          // Give feedback to screen readers\n          announcer.announce(\"Showing previous five artists\", \"polite\");\n          //Trigger GA event\n          ga('send', {\n            hitType: 'event',\n            eventCategory: 'Artist viewer',\n            eventAction: 'Previous five',\n            eventLabel: 'test'\n          });\n      }\n  }\n\n  function searchArtist(name) {\n    const index = artists.findIndex(artist => artist.artist.toLowerCase() === name.toLowerCase());\n\n    if (index !== -1) {\n        currentPage = Math.floor(index / itemsPerPage) + 1;\n        showArtists(currentPage, itemsPerPage);\n        setTimeout(() => {\n          const artist = document.querySelector(`[data-artist=\"${name}\"]`);\n          artist?.click();\n          setTimeout(() => {\n            artist?.focus();\n          }, 50); \n        }, 250);\n    }\n  }\n\n  /*----------------------------makeArtistDiv------------------------------------------------*/\n  //Skapar \"details-on-demand\"-divarna.\n  // d är det land vi klickat på\n  // artistName är ett artistnamn vi vill zooma in på\n  function makeArtistDiv(d) {\n\n    countryDivIsOpen = true;\n    currentCountry = d;\n\n    //lägga till namn till detailseDiv\n    var name;\n    var tag;\n    var nameTags;\n    var tagTags;\n    var recoms;\n    //var id;\n    countryNames.forEach(function(e, i) {\n      if (e.id === d.id) {\n        name = e.name;\n        tag = e.tag;\n\n        nameTags = (e.names || [e.name]).map(n => \"<span class=\\\"demonym\\\">\" + n + \"</span>\").join(\", \");\n        tagTags = (e.tags || [e.tag]).map(t => \"<span class=\\\"demonym\\\">\" + t + \"</span>\").join(\", \");\n      };\n    })\n    d3.select(\"#recommendations\").html(\"\");\n    //Show country name and info div on left hand side\n    infoContainer\n      .classed(\"hidden\", false)\n      .transition()\n      .style(\"opacity\", 1)\n      .duration(prefersReducedMotion ? 0 : 750);\n\n    //Hide progressbar when showing\n    d3.selectAll(\"#countryCount, .on-map-view\")\n      .classed(\"hidden\", true);\n\n    closeButton = d3.select('#infoContainer').append(\"button\").attr(\"type\", \"button\").attr(\"aria-label\", `Close ${name}`).attr(\"class\", \"close-button fa fa-xmark\");\n\n    //Populate country information div\n    cnameDiv\n      .append(\"div\").attr(\"class\", \"cnameContainer\").attr(\"id\", \"cnameCont\")\n      .append(\"h1\").html(name)\n      .attr(\"id\", \"cname-heading\");\n    d3.select(\"#cnameCont\").append(\"strong\")\n      .html(function() {\n        if (countryCount[d.id])\n          return numbersWithSpace(countryCount[d.id].length) + \" artists, \" + numbersWithSpace(getCountryPlaycount(d)) + \" scrobbles\"\n        else return \"No artists yet - Find new here<span aria-hidden> -></span>\"\n      })\n\n    let pl = countryPlaylists.find(c => c.name === name);\n    let linkdiv = d3.select(\"#cnameCont\")\n      .append(\"div\").attr(\"class\", \"playlist-link\")\n\n   let lastFmLink =  linkdiv.append(\"a\").attr(\"href\", \"https://last.fm/tag/\" + name)\n   lastFmLink.append(\"img\").attr(\"alt\", \"Last.fm tag\").attr(\"class\", \"playlist-link__img\").attr(\"src\", \"https://www.shareicon.net/data/32x32/2016/05/24/769923_logo_512x512.png\").attr(\"style\",\"background:none\");\n   lastFmLink.append(\"span\").html(\"#\"+name);\n\n    if (pl) {\n\n      linkdiv.append(\"span\").attr(\"class\",\"divider\").html(\"/\").attr(\"aria-hidden\", \"true\");\n\n      let a = linkdiv.append(\"a\").attr(\"href\", pl.uri).attr(\"target\", \"_self\");\n\n      a.append(\"img\")\n        .attr(\"alt\", \"Spotify playlist\")\n        .attr(\"class\", \"playlist-link__img\")\n        .attr(\"src\", \"https://upload.wikimedia.org/wikipedia/commons/1/19/Spotify_logo_without_text.svg\");\n\n      a.append(\"span\").html(pl.playlistName);\n\n    }\n\n    if (countryCount[d.id]) { //Om landet vi klickat på har lyssnade artister.\n\n      d3.select(\"#details\").append(\"h2\")\n        .html(\"<span>Your top artists tagged with </span>\" + nameTags + \"<span> or </span>\" + tagTags + \"<span>: </span>\")\n        .attr(\"class\", \"topartists-desc\").attr(\"id\", \"top-artist-list-heading\");\n      \n        currentPage = 1;\n        itemsPerPage = 5;\n        artists = countryCount[d.id]; // Your artists data goes here\n        d3.select(\"#details\").append(\"div\").attr(\"id\", \"top-artist-list-container\");\n\n        d3.select(\"#top-artist-list-container\").append(\"ol\").attr(\"id\", \"top-artist-list\").attr(\"aria-labelledby\", \"top-artist-list-heading\");\n      \n        d3.select(\"#top-artist-list-container\").append(\"button\").attr(\"class\", \"fa artist-control left fa-angle-left\").attr(\"aria-label\", \"Previous five artists\");\n        d3.select(\"#top-artist-list-container\").append(\"button\").attr(\"class\", \"fa artist-control right fa-angle-right\").attr(\"aria-label\", \"Next five artists\");\n        \n        // Event listeners for the navigation buttons\n        d3.select(\".artist-control.left\").on(\"click\", showPreviousFive);\n        d3.select(\".artist-control.right\").on(\"click\", showNextFive);\n        \n        \n        // Initial display of artists\n        showArtists(currentPage, itemsPerPage);\n\n\n    } else { //Om landet vi klickat på inte har några lyssnade artister...\n      // console.log(\"landet har inga lyssnade artister\");\n    }\n    //\"Recommended\"-heading\n    d3.select(\"#recommendations\")\n    .append(\"h2\")\n      .html(\"You may like: \")\n      .attr(\"id\", \"recom-heading\")\n      .attr(\"class\", \"topartists-desc\");\n    d3.select(\"#recommendations\")\n      .append(\"ul\")\n        .attr(\"id\", \"recom-list\")\n        .attr(\"aria-labelledby\", \"recom-heading\")\n        .classed(\"hidden\", false);\n\n    // show loading message\n    var recLoadingDiv = d3.select(\"#recommendations\").append(\"div\").attr(\"class\", \"recLoadingDiv\");\n    var recLoadingMessage = recLoadingDiv.append(\"span\")\n      .attr(\"id\", \"rec-loading\")\n      .html(\"Looking for artists tagged #\" + tag);\n    recLoadingDiv.append(\"img\")\n      .attr({\n        id: \"rec-loading-img\",\n        src: \"assets/img/loader_horizontal.gif\",\n        alt: \"Loading...\"\n      })\n      .style({\n        display: \"inline-block\",\n        margin: \"0 5px\"\n      })\n    recLoadingDiv.append(\"span\").attr(\"id\", \"rec-loading-current\");\n\n\n\n    //Get list of recommendations for country based on tags!\n    api.getRecommendations(tag, function(taglist) {\n      // Return if this callback is from an old (not active) country\n      if (!centered || centered.id !== d.id) {\n        return;\n      }\n      // Show loading message\n      recLoadingMessage.html(\"Looking for artists tagged #\" + name)\n\n      //Get list of recommendations for country based on country name!\n      api.getRecommendations(name, function(namelist) {\n        // Return if this callback is from an old (not active) country\n        if (!centered || centered.id !== d.id) {\n          return;\n        }\n        //Show loading message\n        recLoadingMessage.html(\"Loading images for recommended artists\");\n\n        //Join the two lists\n        var list = taglist.concat(namelist);\n\n        //Removing duplicates from the list!\n        var arr = {};\n        for (let i = 0; i < list.length; i++)\n          arr[list[i]['name']] = list[i];\n\n        list = new Array();\n        for (let key in arr)\n          list.push(arr[key]);\n\n        list.sort(function(a, b) {\n          return b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\n        });\n        //Get the first 20 artists\n        list = list.slice(0, 20);\n        //Randomize list\n        list = shuffleArray(list);\n\n        if (list.length === 0) { // Found no recommendations\n          recLoadingDiv.remove();\n          d3.select(\"#recommendations\").append(\"p\")\n            .html(\"We couldn't find any good \" + tag + \" recommendations for you :-( \");\n          d3.select(\"#recommendations\").append(\"a\").attr({\n            href: \"https://www.last.fm/tag/\" + name,\n            target: \"_blank\",\n          }).html(\"Try searching last.fm yourself!\");\n        }\n\n        for (let i = 0; i < Math.min(list.length, 5); i++) {\n          // Return if this callback is from an old (not active) country\n          if (centered.id !== d.id) {\n            return;\n          }\n\n          var artisturl, artistimg, artistname;\n\n          //Get url and images for recommended artists!\n          api.getArtistInfo(list[i].name, function(art) {\n            recLoadingDiv.remove();\n            var artisturl = art[0].url;\n            var artistimg = art[0].image;\n            var artistname = art[0].name;\n\n\n            var recoArtistDiv = d3.select(\"#recom-list\")\n              .append(\"li\")\n              .insert(\"button\", \"#summaryText\")\n              .attr(\"type\", \"button\")\n              .attr(\"class\", \"artist-div lowlight\");\n            var recoArtistLink = recoArtistDiv.append(\"div\").style(\"display\", \"block\")\n              //.attr(\"href\", artisturl)\n              //.attr(\"target\", \"_blank\");\n            recoArtistLink.append(\"div\")\n              .attr(\"class\", \"image-div\")\n              .style(\"background-image\", \"url(\" + \"'\" + artistimg + \"'\" + \")\")\n\n            var recoArtistInfoDiv = recoArtistDiv.append(\"div\").attr(\"class\", \"recoArtistInfoDiv\");\n\n            recoArtistInfoDiv.append(\"p\")\n              .html(artistname)\n              .attr(\"class\", \"details-p\");\n\n            recoArtistDiv.on(\"click\", function() {\n              d3.selectAll(\".artist-div\").classed({ // Lowlight not selected artists\n                \"lowlight\": true,\n                \"highlight\": false\n              });\n\n              d3.select(this).classed({ // Highlight selected artist\n                \"highlight\": true,\n                \"lowlight\": false\n              });\n              makeSummaryDiv(artistname);\n            });\n\n          })\n        }\n\n\n      })\n    });\n\n  }\n\n  function removeArtistDiv() {\n    countryDivIsOpen = false;\n    currentCountry = null;\n    api.cancelRecommendationRequests();\n\n    // Remove aria-owns from all li elements\n    d3.selectAll(\".artist-li\").attr(\"aria-owns\", null);\n\n    infoContainer.transition().style(\"opacity\", 0).duration(prefersReducedMotion ? 0 : 1000);\n\n    infoContainer.classed(\"hidden\", true);\n\n    // Restore toolbar\n    d3.selectAll(\"#countryCount, .on-map-view\")\n      .classed(\"hidden\", false);\n\n    d3.select(\"#details\").html(\"\");\n    d3.select(\"#recommendations\").html(\"\");\n    d3.select(\"#cname\").html(\"\");\n    d3.selectAll(\".artist-control\").remove();\n    d3.select(\".close-button\").remove();\n    d3.selectAll(\"#top-artist-list\").remove();\n  }\n\n  function makeSummaryDiv(artistname) {\n    var usertaglist = [];\n    var artisttaglist = [];\n\n    d3.select(\"#summaryText\").remove();\n    var summaryText = d3.select(\"#recommendations\").append(\"div\").attr(\"class\", \"summaryText\").attr(\"id\", \"summaryText\");\n    d3.select(\"#summaryText\").append(\"span\").html(\"Loading description of \" + artistname);\n    d3.select(\"#summaryText\").append(\"img\")\n      .attr({\n        id: \"sum-loading-img\",\n        src: \"assets/img/loader_horizontal.gif\"\n      })\n      .style({\n        display: \"inline-block\",\n        margin: \"0 5px\"\n      });\n\n    //Get artist info from Lastfm\n    api.getArtistInfo(artistname, function(art) {\n      var paragraphs = art[0].description.split(/(\\n)+/g);\n      //var text = text.substring(6);\n      //Get artist's top tags\n      artisttaglist = art[0].tags;\n      //Create list of user tags\n\n      //Make list of artist tags which are also user's top tags:\n      for (let y = 0; y < 15; y++) {\n        for (let z = 0; z < artisttaglist.length; z++) {\n          if (artisttaglist[z] === USER_TAGS[y].tag) {\n            usertaglist.push(USER_TAGS[y].tag)\n          }\n        }\n      }\n\n      //Create combined tag list and remove duplicates\n      var taglist = usertaglist.concat(artisttaglist);\n      taglist = taglist.filter(function(elem, pos) {\n        return taglist.indexOf(elem) == pos;\n      })\n      // Remove loading text\n      d3.select(\"#summaryText\").html(\"\");\n      //Create containing div\n      // Calculate height of infotextbox (so the scrollbar is inside the box and not on body)\n      var h = window.innerHeight * 0.90 - document.getElementById(\"artistContainer\").offsetHeight;\n      summaryText.style(\"max-height\", h + \"px\");\n\n      summaryText.append(\"h2\").html(artistname).attr(\"id\", \"artistname\");\n\n      const tags = summaryText.append(\"ul\").attr(\"class\", \"taglist\").attr(\"aria-labelledby\", \"tags-for artistname\");\n\n      //Show top 7 tags\n      for (let i = 0; i < Math.min(taglist.length, 6); i++) {\n        var tagdiv = tags.append(\"li\").attr(\"class\", \"tagdiv\").html(taglist[i]);\n        //Mark all user tags\n        for (let p = 0; p < usertaglist.length; p++) {\n          if (taglist[i] === usertaglist[p])\n            tagdiv.classed(\"usertag\", true);\n        }\n      }\n      //Display artist summary\n      paragraphs.forEach(function(paragraph) {\n        summaryText.append(\"p\").html(paragraph || \"No description available - <a href='https://last.fm/music/\" + artistname + \"' target='_blank'>check out last.fm.</a>\");\n      });\n\n    })\n\n  }\n\n  /**\n   * Toggles highlight of a specified country\n   * @param  {Boolean} highlight      Specifies whether to highlight or \"dehighlight\"\n   * @param  {Object} countryElement The country element to highlight (needs to have an \"id\" property)\n   */\n  function highlightCountry(highlight, countryElement) {\n    d3.selectAll(\".country\").classed(\"highlighted\", false);\n\n    if (highlight) {\n      // Fade out all other countries\n      d3.selectAll(\".country\").transition()\n        .style(\"opacity\", function() {\n          return (this.id === `c${countryElement.id}` ? 1.0 : 0.3);\n        })\n\n      var ce = d3.select(document.getElementById(`c${countryElement.id}`));\n      ce.classed(\"highlighted\", true);\n    } else {\n      // Fade in all countries\n      d3.selectAll(\".country\").transition()\n        .style(\"opacity\", 1.0)\n    }\n}\n\n\n  function clicked(d) { //d är det en har klickat på\n    if (window.keyboardMode && window.keyboardMode.getStatus && window.keyboardMode.getStatus()) {\n        window.keyboardMode.cleanup();\n    }\n\n    var x, y, k;\n    //bounding box for clicked country\n    var b = path.bounds(d);\n\n    getCountryPlaycount(d);\n\n    //Set scale\n    var modscaleX = (b[1][0] - b[0][0]);\n    var modscaleY = (b[1][1] - b[0][1]);\n\n    //Dom't zoom too far with small countries!\n    if (modscaleX < 80)\n      modscaleX = 80;\n\n    //Landet är inte centrerat redan\n    if (d && centered !== d) {\n      centered = d;\n      removeArtistDiv();\n      makeArtistDiv(d);\n      highlightCountry(true, d);\n\n      announcer.announce(`Opened ${countryNames.find(c => c.id === d.id).name}. Use TAB key to find scrobbled artists.`, \"assertive\");\n\n      //Special rules for special countries:\n      switch (d.id) {\n        case 840: //US\n          k = 3;\n          x = -(b[1][0] + b[0][0]) / 3;\n          y = -(b[1][1] + b[0][1]) / 1.7;\n          break;\n        case 250: //France\n          k = 7.012;\n          x = -(b[1][0] + b[0][0]) / 1.85;\n          y = -(b[1][1] + b[0][1]) / 3;\n          break;\n        case 528: //Netherlands\n          k = 12.0124;\n          x = -(b[1][0] + b[0][0]) / 1.56;\n          y = -(b[1][1] + b[0][1]) / 2.7;\n          break;\n        case 643: //Russia\n          k = 1.9;\n          x = -(b[1][0] + b[0][0]) / 1.25;\n          y = -(b[1][1] + b[0][1]) / 2;\n          break;\n        case 554: //New Zeeland\n          k = 4;\n          x = -(b[1][0] + b[0][0]) / 0.90;\n          y = -(b[1][1] + b[0][1]) / 1.8;\n          break;\n        case 36: //Australia\n          k = 3.3;\n          x = -(b[1][0] + b[0][0]) / 1.8;\n          y = -(b[1][1] + b[0][1]) / 2.1;\n          break;\n\n        default: //Everybody else\n          k = .55 / Math.max(modscaleX / width, modscaleY / height);\n          x = -(b[1][0] + b[0][0]) / 2 - (width / k) / 4;\n          y = -(b[1][1] + b[0][1]) / 2;\n          break;\n      }\n\n      //Landet är redan centrerat\n    } else {\n      announcer.announce(`Left ${countryNames.find(c => c.id === d.id).name}`, \"polite\");\n      x = -width / 2;\n      y = -height / 2 - height * 0.08;\n      k = 1\n      removeArtistDiv();\n      highlightCountry(false);\n      centered = null;\n      // Refocus the map svg (mainly for screen readers)\n      document.getElementById(\"map-svg\").focus( { \n        preventScroll: true\n       } );\n\n    }\n\n    var pt = projection.translate();\n    // Tell map to move with animation\n    // Basically does the same as before: translate to middle,\n    // then to x and y with respect to scale\n    move([pt[0] + x * k, pt[1] + y * k], k, !prefersReducedMotion);\n\n  }\n\nfunction dismissCenteredCountry() {\n  if (centered) {\n    const countryName = countryNames.find(c => c.id === centered.id).name;\n    announcer.announce(`Left ${countryName}`, \"polite\");\n  }\n  removeArtistDiv();\n  highlightCountry(false);\n  centered = null;\n}\n\n// Add this helper function\nfunction getBBoxCenter(bbox) {\n  const [west, south, east, north] = bbox;\n  // For countries that cross the date line, handle the longitude calculation specially\n  const centerLon = west > east ? (west + east + 360) / 2 % 360 : (west + east) / 2;\n  const centerLat = (north + south) / 2;\n  return [centerLon, centerLat];\n}\n\n// Modify the getCountryCenter function\nfunction getCountryCenter(countryTopoData) {\n  // Check if we have a custom bounding box for this country\n  const countryId = countryTopoData.id;\n  if (COUNTRY_BBOX_OVERRIDES && COUNTRY_BBOX_OVERRIDES[countryId]) {\n    // Use the first bounding box for the center (usually the main territory)\n    const overrides = COUNTRY_BBOX_OVERRIDES[countryId];\n    const mainBBox = Array.isArray(overrides[0]) ? overrides[0] : overrides;\n    \n    // Calculate the center of the bounding box\n    const center = getBBoxCenter(mainBBox);\n    \n    // Project the center to screen coordinates\n    const projected = projection(center);\n    return {\n      x: -projected[0],\n      y: -projected[1]\n    };\n  }\n  \n  // Fall back to the existing logic for countries without overrides\n  let x, y;\n  let b = path.bounds(countryTopoData);\n\n  //Special rules for special countries:\n  switch (countryTopoData.id) {\n    case 840: //US\n      x = -(b[1][0] + b[0][0]) / 4;\n      y = -(b[1][1] + b[0][1]) / 1.9;\n      break;\n    case 250: //France\n      x = -(b[1][0] + b[0][0]) / 1.94;\n      y = -(b[1][1] + b[0][1]) / 2.81;\n      break;\n    case 528: //Netherlands\n      x = -(b[1][0] + b[0][0]) / 1.605;\n      y = -(b[1][1] + b[0][1]) / 2.54;\n      break;\n    case 643: //Russia\n      x = -(b[1][0] + b[0][0]) / 1.40;\n      y = -(b[1][1] + b[0][1]) / 2;\n      break;\n    case 554: //New Zeeland\n      x = -(b[1][0] + b[0][0]) / 1.03;\n      y = -(b[1][1] + b[0][1]) / 1.87;\n      break;\n    case 36: //Australia\n      x = -(b[1][0] + b[0][0]) / 2;\n      y = -(b[1][1] + b[0][1]) / 2.1;\n      break;\n\n    default: //Everybody else\n      x = -(b[1][0] + b[0][0]) / 2;\n      y = -(b[1][1] + b[0][1]) / 2;\n      break;\n  }\n\n  return { x, y };\n}\n\n  // Close the country div on escape\n  window.addEventListener('keydown', function(evt) {\n    if ((evt.key === 'Escape' || evt.keyCode === 27) && countryDivIsOpen) {\n      console.log(\"Escape pressed\");\n      removeArtistDiv();\n      // zoom out map, fulhack\n      clicked(centered);\n    }\n  });\n\n  //function to add points and text to the map (used in plotting capitals)\n  function addpoint(lat, lon, text) {\n\n    var gpoint = g.append(\"g\").attr(\"class\", \"gpoint\");\n    var x = projection([lat, lon])[0];\n    var y = projection([lat, lon])[1];\n\n    gpoint.append(\"svg:circle\")\n      .attr(\"cx\", x)\n      .attr(\"cy\", y)\n      .attr(\"class\", \"point\")\n      .attr(\"r\", 1.5);\n\n    //conditional in case a point has no associated text\n    if (text.length > 0) {\n\n      gpoint.append(\"text\")\n        .attr(\"x\", x + 2)\n        .attr(\"y\", y + 2)\n        .attr(\"class\", \"text\")\n        .text(text);\n    }\n\n  }\n\n  function animateCountries(countryDict) {\n    const userPrefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n    var countries = g.selectAll(\".country\").filter(c => !!countryDict[c.id]);\n\n    setTimeout(() => {\n      // bounce - didn't look too good but might be fun to try again\n      // later\n      \n      // countries.transition()\n      // .duration(200)\n      // .style(\"transform\", \"scale(1.1)\")\n      // .delay((_, i) => i * 100)\n      // .transition().duration(150)\n      // .style(\"transform\", \"scale(1)\");\n\n      // fade\n      // Only do the bing bong thing if the user doesn't prefer reduced motion\n      if (!userPrefersReducedMotion) {\n        countries.transition()\n        .duration(200)\n        .style(\"opacity\", \"0.8\")\n        .delay((_, i) => i * 100)\n        .transition().duration(150)\n        .style(\"opacity\", \"1\");\n      }\n      \n    })\n  }\n\n  function putCountryCount(newArtists) {\n    Object.entries(newArtists).forEach(([key, value]) => {\n      countryCount[key] = (countryCount[key] || []).concat(value);\n    });\n\n    countryScore = 0;\n\n    d3.keys(countryCount).forEach(function (id) {\n      countryScore = countryScore + 1;\n    })\n\n    if (topo) redraw();\n\n    window.countryScore = countryScore;\n  }\n\n  /** \"PUBLUC\" FUNCTIONS **/\n  \n  map.addArtists = function (newArtistsByCountry) {\n    putCountryCount(newArtistsByCountry);\n    animateCountries(newArtistsByCountry);\n  }\n\n  map.getCountryCenter = getCountryCenter;\n\n  map.makeSummaryDiv = makeSummaryDiv;\n\n  map.showArtists = showArtists;\n\n  map.searchArtist = searchArtist;\n\n  map.centered = centered;\n\n  map.dismissCenteredCountry = dismissCenteredCountry;\n\n  map.toggleFilter = function() {\n    filter = filter === \"artists\" ? \"scrobbles\" : \"artists\";\n    updateLegend();\n    redraw();\n  }\n\n  // Find the function that handles the zoom/fit behavior, likely something like:\n  function fitToCountry(countryFeature) {\n    if (countryFeature.id && COUNTRY_BBOX_OVERRIDES[countryFeature.id]) {\n      const overrides = COUNTRY_BBOX_OVERRIDES[countryFeature.id];\n      const boxArray = Array.isArray(overrides[0]) ? overrides : [overrides];\n      \n      // Find the overall bounding box that encompasses all boxes\n      const allBounds = boxArray.reduce((acc, bbox) => {\n        const [west, south, east, north] = bbox;\n        return {\n          west: Math.min(acc.west, west),\n          south: Math.min(acc.south, south),\n          east: Math.max(acc.east, east),\n          north: Math.max(acc.north, north)\n        };\n      }, {west: 180, south: 90, east: -180, north: -90});\n      \n      const bounds = [[allBounds.west, allBounds.south], [allBounds.east, allBounds.north]];\n      \n      // Use your existing zoom/fit logic with these bounds\n      const [[x0, y0], [x1, y1]] = bounds;\n      const dx = x1 - x0;\n      const dy = y1 - y0;\n      const x = (x0 + x1) / 2;\n      const y = (y0 + y1) / 2;\n      const scale = Math.max(1, Math.min(8, 0.9 / Math.max(dx / width, dy / height)));\n      \n      // Apply the transform\n      svg.transition()\n        .duration(750)\n        .call(zoom.transform, d3.zoomIdentity\n          .translate(width / 2, height / 2)\n          .scale(scale)\n          .translate(-projection([x, y])[0], -projection([x, y])[1]));\n        \n      return; // Skip the regular bounds calculation\n    }\n    \n    // ... rest of existing fitToCountry code ...\n  }\n\n  function handleKeyboardNavigation(event) {\n    if (!isKeyboardModeEnabled) return;\n    \n    switch(event.key) {\n        case 'ArrowRight':\n        case 'ArrowLeft':\n            // Move focus to next/previous country\n            const countries = getVisibleCountries();\n            const currentIndex = countries.indexOf(currentFocus);\n            const nextIndex = event.key === 'ArrowRight' ? \n                (currentIndex + 1) % countries.length :\n                (currentIndex - 1 + countries.length) % countries.length;\n            setFocus(countries[nextIndex]);\n            break;\n            \n        case 'Enter':\n        case ' ': // Space\n            // Select currently focused country\n            selectCountry(currentFocus);\n            break;\n    }\n  }\n\n  // Update the setupAuditoryFeedbackForMap function to only trigger on keyboard navigation\n  function setupAuditoryFeedbackForMap() {\n    // Remove the automatic triggers on zoom/pan\n    \n    // Only trigger feedback when new data is loaded\n    document.addEventListener(\"artistsLoaded\", function() {\n      if (window.auditoryFeedback) {\n        window.auditoryFeedback.updateFeedback();\n      }\n    });\n    \n    // Create a custom event dispatcher to trigger feedback manually if needed\n    window.triggerAuditoryFeedback = function() {\n      if (window.auditoryFeedback) {\n        window.auditoryFeedback.updateFeedback();\n      }\n    };\n    \n    // Remove the automatic trigger in the move function\n  }\n\n  // Call this after your map is initialized\n  setupAuditoryFeedbackForMap();\n\n  // Add this to the public API section at the bottom of the file\n  map.getColorDomain = function() {\n    return mydomain; // This is the array that defines the color thresholds\n  };\n\n})(window, document)\n"]}